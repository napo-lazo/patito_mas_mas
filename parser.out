Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> programa
Rule 2     programa -> PROGRAMA ID SEMICOLON jump var funcion clear_scope PRINCIPAL update_jump L_PARENTHESIS R_PARENTHESIS bloque EOF
Rule 3     jump -> <empty>
Rule 4     clear_scope -> <empty>
Rule 5     var -> VAR var_seen varp
Rule 6     var -> empty
Rule 7     var_seen -> <empty>
Rule 8     varp -> tipo tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp
Rule 9     varp -> tipo tipo_seen COLON ID error varppp varpp delete_type SEMICOLON varpppp
Rule 10    tipo_seen -> <empty>
Rule 11    variable_seen -> <empty>
Rule 12    delete_type -> <empty>
Rule 13    varpp -> COMMA ID variable_seen varppp varpp
Rule 14    varpp -> empty
Rule 15    varppp -> dimDeclare
Rule 16    varppp -> dimDeclare dimDeclare
Rule 17    varppp -> empty
Rule 18    varpppp -> varp
Rule 19    varpppp -> empty
Rule 20    dimDeclare -> L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET
Rule 21    tipo -> INT
Rule 22    tipo -> FLOAT
Rule 23    tipo -> CHAR
Rule 24    funcion -> FUNCION funcionp
Rule 25    funcion -> FUNCION error
Rule 26    funcion -> empty
Rule 27    funcionp -> tipoRetorno ID create_func_scope L_PARENTHESIS parametro R_PARENTHESIS var bloque end_func funcion
Rule 28    create_func_scope -> <empty>
Rule 29    end_func -> <empty>
Rule 30    parametro -> tipo ID save_param parametrop
Rule 31    parametro -> empty
Rule 32    save_param -> <empty>
Rule 33    parametrop -> COMMA tipo ID save_param parametrop
Rule 34    parametrop -> empty
Rule 35    tipoRetorno -> tipo
Rule 36    tipoRetorno -> VOID
Rule 37    bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET
Rule 38    bloquep -> estatuto bloquep
Rule 39    bloquep -> empty
Rule 40    estatuto -> asignacion
Rule 41    estatuto -> funcionVacia
Rule 42    estatuto -> regresa
Rule 43    estatuto -> lectura
Rule 44    estatuto -> escritura
Rule 45    estatuto -> decision
Rule 46    estatuto -> cicloCondicional
Rule 47    estatuto -> cicloNoCondicional
Rule 48    asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON
Rule 49    operand_seen -> <empty>
Rule 50    dimId -> is_array create_dim dim pop_array
Rule 51    dimId -> is_array create_dim dim dim pop_array
Rule 52    dimId -> empty
Rule 53    pop_array -> <empty>
Rule 54    is_array -> <empty>
Rule 55    dim -> L_SQUARE_BRACKET bracket_seen expresion R_SQUARE_BRACKET bracket_seen
Rule 56    create_dim -> <empty>
Rule 57    bracket_seen -> <empty>
Rule 58    apply_operation_assign -> <empty>
Rule 59    expresion -> relacional apply_operation_expresion expresionp
Rule 60    expresionp -> AND operation_seen expresion
Rule 61    expresionp -> OR operation_seen expresion
Rule 62    expresionp -> empty
Rule 63    apply_operation_expresion -> <empty>
Rule 64    relacional -> aritmetica apply_operation_relational relacionalp
Rule 65    relacionalp -> EQUALS operation_seen relacional
Rule 66    relacionalp -> NOT_EQUAL operation_seen relacional
Rule 67    relacionalp -> LESS_THAN operation_seen relacional
Rule 68    relacionalp -> LESS_THAN_EQUAL operation_seen relacional
Rule 69    relacionalp -> GREATER_THAN operation_seen relacional
Rule 70    relacionalp -> GREATER_THAN_EQUAL operation_seen relacional
Rule 71    relacionalp -> empty
Rule 72    apply_operation_relational -> <empty>
Rule 73    aritmetica -> factor apply_operation_aritmetica aritmeticap
Rule 74    aritmeticap -> SUM operation_seen aritmetica
Rule 75    aritmeticap -> SUBTRACT operation_seen aritmetica
Rule 76    aritmeticap -> empty
Rule 77    apply_operation_aritmetica -> <empty>
Rule 78    factor -> matriz apply_operation_factor factorp
Rule 79    factorp -> MULTIPLY operation_seen factor
Rule 80    factorp -> DIVIDE operation_seen factor
Rule 81    factorp -> empty
Rule 82    apply_operation_factor -> <empty>
Rule 83    operation_seen -> <empty>
Rule 84    matriz -> cte matrizp
Rule 85    matriz -> NOT operation_seen cte apply_not
Rule 86    apply_not -> <empty>
Rule 87    matrizp -> DETERMINANT operation_seen apply_mat
Rule 88    matrizp -> TRANSPOSED operation_seen apply_mat
Rule 89    matrizp -> INVERSE operation_seen apply_mat
Rule 90    matrizp -> empty
Rule 91    apply_mat -> <empty>
Rule 92    cte -> CTE_INT
Rule 93    cte -> CTE_FLOAT
Rule 94    cte -> CTE_CHAR
Rule 95    cte -> llamadaFuncion
Rule 96    cte -> ID operand_seen dimId
Rule 97    cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
Rule 98    llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen
Rule 99    llamadaFuncionp -> expresion verify_parameter llamadaFuncionpp
Rule 100   llamadaFuncionp -> empty
Rule 101   llamadaFuncionpp -> COMMA llamadaFuncionp
Rule 102   llamadaFuncionpp -> empty
Rule 103   verify_parameter -> <empty>
Rule 104   funcionVacia -> ID set_func_scope L_PARENTHESIS llamadaFuncionp R_PARENTHESIS SEMICOLON
Rule 105   set_func_scope -> <empty>
Rule 106   regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON
Rule 107   lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON
Rule 108   lecturap -> ID dimId gen_input lecturapp
Rule 109   gen_input -> <empty>
Rule 110   lecturapp -> COMMA lecturap
Rule 111   lecturapp -> empty
Rule 112   escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON
Rule 113   escriturap -> LETRERO gen_print escriturapp
Rule 114   escriturap -> expresion gen_print escriturapp
Rule 115   gen_print -> <empty>
Rule 116   escriturapp -> COMMA escriturap
Rule 117   escriturapp -> empty
Rule 118   decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp
Rule 119   jump_false -> <empty>
Rule 120   update_jump -> <empty>
Rule 121   decisionp -> SINO jump_else bloque update_jump
Rule 122   decisionp -> empty update_jump
Rule 123   jump_else -> <empty>
Rule 124   cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle
Rule 125   jump_cycle -> <empty>
Rule 126   update_jump_cycle -> <empty>
Rule 127   cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle
Rule 128   add_gt -> <empty>
Rule 129   add_one -> <empty>
Rule 130   empty -> <empty>

Terminals, with rules where they appear

AND                  : 60
ASSIGN               : 48 127
CHAR                 : 23
COLON                : 8 9
COMMA                : 13 33 101 110 116
CTE_CHAR             : 94
CTE_FLOAT            : 93
CTE_INT              : 20 92
DESDE                : 127
DETERMINANT          : 87
DIVIDE               : 80
EOF                  : 2
EQUALS               : 65
ESCRIBE              : 112
FLOAT                : 22
FUNCION              : 24 25
GREATER_THAN         : 69
GREATER_THAN_EQUAL   : 70
HACER                : 127
HASTA                : 127
HAZ                  : 118 124
ID                   : 2 8 9 13 27 30 33 48 96 98 104 108 127
INT                  : 21
INVERSE              : 89
LECTURA              : 107
LESS_THAN            : 67
LESS_THAN_EQUAL      : 68
LETRERO              : 113
L_CURLY_BRACKET      : 37
L_PARENTHESIS        : 2 27 97 98 104 106 107 112 118 124
L_SQUARE_BRACKET     : 20 55
MIENTRAS             : 124
MULTIPLY             : 79
NOT                  : 85
NOT_EQUAL            : 66
OR                   : 61
PRINCIPAL            : 2
PROGRAMA             : 2
REGRESA              : 106
R_CURLY_BRACKET      : 37
R_PARENTHESIS        : 2 27 97 98 104 106 107 112 118 124
R_SQUARE_BRACKET     : 20 55
SEMICOLON            : 2 8 9 48 104 106 107 112
SI                   : 118
SINO                 : 121
SUBTRACT             : 75
SUM                  : 74
TRANSPOSED           : 88
VAR                  : 5
VOID                 : 36
error                : 9 25

Nonterminals, with rules where they appear

add_gt               : 127
add_one              : 127
apply_mat            : 87 88 89
apply_not            : 85
apply_operation_aritmetica : 73
apply_operation_assign : 48 127
apply_operation_expresion : 59
apply_operation_factor : 78
apply_operation_relational : 64 127
aritmetica           : 64 74 75
aritmeticap          : 73
asignacion           : 40
bloque               : 2 27 118 121 124 127
bloquep              : 37 38
bracket_seen         : 55 55
cicloCondicional     : 46
cicloNoCondicional   : 47
clear_scope          : 2
create_dim           : 50 51
create_func_scope    : 27
cte                  : 84 85
decision             : 45
decisionp            : 118
delete_type          : 8 9
dim                  : 50 51 51
dimDeclare           : 15 16 16
dimId                : 48 96 108 127
empty                : 6 14 17 19 26 31 34 39 52 62 71 76 81 90 100 102 111 117 122
end_func             : 27
escritura            : 44
escriturap           : 112 116
escriturapp          : 113 114
estatuto             : 38
expresion            : 48 55 60 61 97 99 106 114 118 124 127 127
expresionp           : 59
factor               : 73 79 80
factorp              : 78
funcion              : 2 27
funcionVacia         : 41
funcionp             : 24
gen_input            : 108
gen_print            : 113 114
is_array             : 50 51
jump                 : 2
jump_cycle           : 124 127
jump_else            : 121
jump_false           : 118 124 127
lectura              : 43
lecturap             : 107 110
lecturapp            : 108
llamadaFuncion       : 95
llamadaFuncionp      : 98 101 104
llamadaFuncionpp     : 99
matriz               : 78
matrizp              : 84
operand_seen         : 48 96 127
operation_seen       : 48 60 61 65 66 67 68 69 70 74 75 79 80 85 87 88 89 97 97 98 98 127
parametro            : 27
parametrop           : 30 33
pop_array            : 50 51
programa             : 1
regresa              : 42
relacional           : 59 65 66 67 68 69 70
relacionalp          : 64
save_param           : 30 33
set_func_scope       : 98 104
start                : 0
tipo                 : 8 9 30 33 35
tipoRetorno          : 27
tipo_seen            : 8 9
update_jump          : 2 121 122
update_jump_cycle    : 124 127
var                  : 2 27
var_seen             : 5
variable_seen        : 8 13
varp                 : 5 18
varpp                : 8 9 13
varppp               : 8 9 13
varpppp              : 8 9
verify_parameter     : 99

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . programa
    (2) programa -> . PROGRAMA ID SEMICOLON jump var funcion clear_scope PRINCIPAL update_jump L_PARENTHESIS R_PARENTHESIS bloque EOF

    PROGRAMA        shift and go to state 3

    start                          shift and go to state 1
    programa                       shift and go to state 2

state 1

    (0) S' -> start .



state 2

    (1) start -> programa .

    $end            reduce using rule 1 (start -> programa .)


state 3

    (2) programa -> PROGRAMA . ID SEMICOLON jump var funcion clear_scope PRINCIPAL update_jump L_PARENTHESIS R_PARENTHESIS bloque EOF

    ID              shift and go to state 4


state 4

    (2) programa -> PROGRAMA ID . SEMICOLON jump var funcion clear_scope PRINCIPAL update_jump L_PARENTHESIS R_PARENTHESIS bloque EOF

    SEMICOLON       shift and go to state 5


state 5

    (2) programa -> PROGRAMA ID SEMICOLON . jump var funcion clear_scope PRINCIPAL update_jump L_PARENTHESIS R_PARENTHESIS bloque EOF
    (3) jump -> .

    VAR             reduce using rule 3 (jump -> .)
    FUNCION         reduce using rule 3 (jump -> .)
    PRINCIPAL       reduce using rule 3 (jump -> .)

    jump                           shift and go to state 6

state 6

    (2) programa -> PROGRAMA ID SEMICOLON jump . var funcion clear_scope PRINCIPAL update_jump L_PARENTHESIS R_PARENTHESIS bloque EOF
    (5) var -> . VAR var_seen varp
    (6) var -> . empty
    (130) empty -> .

    VAR             shift and go to state 8
    FUNCION         reduce using rule 130 (empty -> .)
    PRINCIPAL       reduce using rule 130 (empty -> .)

    var                            shift and go to state 7
    empty                          shift and go to state 9

state 7

    (2) programa -> PROGRAMA ID SEMICOLON jump var . funcion clear_scope PRINCIPAL update_jump L_PARENTHESIS R_PARENTHESIS bloque EOF
    (24) funcion -> . FUNCION funcionp
    (25) funcion -> . FUNCION error
    (26) funcion -> . empty
    (130) empty -> .

    FUNCION         shift and go to state 11
    PRINCIPAL       reduce using rule 130 (empty -> .)

    funcion                        shift and go to state 10
    empty                          shift and go to state 12

state 8

    (5) var -> VAR . var_seen varp
    (7) var_seen -> .

    INT             reduce using rule 7 (var_seen -> .)
    FLOAT           reduce using rule 7 (var_seen -> .)
    CHAR            reduce using rule 7 (var_seen -> .)

    var_seen                       shift and go to state 13

state 9

    (6) var -> empty .

    FUNCION         reduce using rule 6 (var -> empty .)
    PRINCIPAL       reduce using rule 6 (var -> empty .)
    L_CURLY_BRACKET reduce using rule 6 (var -> empty .)


state 10

    (2) programa -> PROGRAMA ID SEMICOLON jump var funcion . clear_scope PRINCIPAL update_jump L_PARENTHESIS R_PARENTHESIS bloque EOF
    (4) clear_scope -> .

    PRINCIPAL       reduce using rule 4 (clear_scope -> .)

    clear_scope                    shift and go to state 14

state 11

    (24) funcion -> FUNCION . funcionp
    (25) funcion -> FUNCION . error
    (27) funcionp -> . tipoRetorno ID create_func_scope L_PARENTHESIS parametro R_PARENTHESIS var bloque end_func funcion
    (35) tipoRetorno -> . tipo
    (36) tipoRetorno -> . VOID
    (21) tipo -> . INT
    (22) tipo -> . FLOAT
    (23) tipo -> . CHAR

    error           shift and go to state 16
    VOID            shift and go to state 19
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22

    funcionp                       shift and go to state 15
    tipoRetorno                    shift and go to state 17
    tipo                           shift and go to state 18

state 12

    (26) funcion -> empty .

    PRINCIPAL       reduce using rule 26 (funcion -> empty .)


state 13

    (5) var -> VAR var_seen . varp
    (8) varp -> . tipo tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp
    (9) varp -> . tipo tipo_seen COLON ID error varppp varpp delete_type SEMICOLON varpppp
    (21) tipo -> . INT
    (22) tipo -> . FLOAT
    (23) tipo -> . CHAR

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22

    varp                           shift and go to state 23
    tipo                           shift and go to state 24

state 14

    (2) programa -> PROGRAMA ID SEMICOLON jump var funcion clear_scope . PRINCIPAL update_jump L_PARENTHESIS R_PARENTHESIS bloque EOF

    PRINCIPAL       shift and go to state 25


state 15

    (24) funcion -> FUNCION funcionp .

    PRINCIPAL       reduce using rule 24 (funcion -> FUNCION funcionp .)


state 16

    (25) funcion -> FUNCION error .

    PRINCIPAL       reduce using rule 25 (funcion -> FUNCION error .)


state 17

    (27) funcionp -> tipoRetorno . ID create_func_scope L_PARENTHESIS parametro R_PARENTHESIS var bloque end_func funcion

    ID              shift and go to state 26


state 18

    (35) tipoRetorno -> tipo .

    ID              reduce using rule 35 (tipoRetorno -> tipo .)


state 19

    (36) tipoRetorno -> VOID .

    ID              reduce using rule 36 (tipoRetorno -> VOID .)


state 20

    (21) tipo -> INT .

    ID              reduce using rule 21 (tipo -> INT .)
    COLON           reduce using rule 21 (tipo -> INT .)


state 21

    (22) tipo -> FLOAT .

    ID              reduce using rule 22 (tipo -> FLOAT .)
    COLON           reduce using rule 22 (tipo -> FLOAT .)


state 22

    (23) tipo -> CHAR .

    ID              reduce using rule 23 (tipo -> CHAR .)
    COLON           reduce using rule 23 (tipo -> CHAR .)


state 23

    (5) var -> VAR var_seen varp .

    FUNCION         reduce using rule 5 (var -> VAR var_seen varp .)
    PRINCIPAL       reduce using rule 5 (var -> VAR var_seen varp .)
    L_CURLY_BRACKET reduce using rule 5 (var -> VAR var_seen varp .)


state 24

    (8) varp -> tipo . tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp
    (9) varp -> tipo . tipo_seen COLON ID error varppp varpp delete_type SEMICOLON varpppp
    (10) tipo_seen -> .

    COLON           reduce using rule 10 (tipo_seen -> .)

    tipo_seen                      shift and go to state 27

state 25

    (2) programa -> PROGRAMA ID SEMICOLON jump var funcion clear_scope PRINCIPAL . update_jump L_PARENTHESIS R_PARENTHESIS bloque EOF
    (120) update_jump -> .

    L_PARENTHESIS   reduce using rule 120 (update_jump -> .)

    update_jump                    shift and go to state 28

state 26

    (27) funcionp -> tipoRetorno ID . create_func_scope L_PARENTHESIS parametro R_PARENTHESIS var bloque end_func funcion
    (28) create_func_scope -> .

    L_PARENTHESIS   reduce using rule 28 (create_func_scope -> .)

    create_func_scope              shift and go to state 29

state 27

    (8) varp -> tipo tipo_seen . COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp
    (9) varp -> tipo tipo_seen . COLON ID error varppp varpp delete_type SEMICOLON varpppp

    COLON           shift and go to state 30


state 28

    (2) programa -> PROGRAMA ID SEMICOLON jump var funcion clear_scope PRINCIPAL update_jump . L_PARENTHESIS R_PARENTHESIS bloque EOF

    L_PARENTHESIS   shift and go to state 31


state 29

    (27) funcionp -> tipoRetorno ID create_func_scope . L_PARENTHESIS parametro R_PARENTHESIS var bloque end_func funcion

    L_PARENTHESIS   shift and go to state 32


state 30

    (8) varp -> tipo tipo_seen COLON . ID variable_seen varppp varpp delete_type SEMICOLON varpppp
    (9) varp -> tipo tipo_seen COLON . ID error varppp varpp delete_type SEMICOLON varpppp

    ID              shift and go to state 33


state 31

    (2) programa -> PROGRAMA ID SEMICOLON jump var funcion clear_scope PRINCIPAL update_jump L_PARENTHESIS . R_PARENTHESIS bloque EOF

    R_PARENTHESIS   shift and go to state 34


state 32

    (27) funcionp -> tipoRetorno ID create_func_scope L_PARENTHESIS . parametro R_PARENTHESIS var bloque end_func funcion
    (30) parametro -> . tipo ID save_param parametrop
    (31) parametro -> . empty
    (21) tipo -> . INT
    (22) tipo -> . FLOAT
    (23) tipo -> . CHAR
    (130) empty -> .

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    R_PARENTHESIS   reduce using rule 130 (empty -> .)

    parametro                      shift and go to state 35
    tipo                           shift and go to state 36
    empty                          shift and go to state 37

state 33

    (8) varp -> tipo tipo_seen COLON ID . variable_seen varppp varpp delete_type SEMICOLON varpppp
    (9) varp -> tipo tipo_seen COLON ID . error varppp varpp delete_type SEMICOLON varpppp
    (11) variable_seen -> .

    error           shift and go to state 39
    L_SQUARE_BRACKET reduce using rule 11 (variable_seen -> .)
    COMMA           reduce using rule 11 (variable_seen -> .)
    SEMICOLON       reduce using rule 11 (variable_seen -> .)

    variable_seen                  shift and go to state 38

state 34

    (2) programa -> PROGRAMA ID SEMICOLON jump var funcion clear_scope PRINCIPAL update_jump L_PARENTHESIS R_PARENTHESIS . bloque EOF
    (37) bloque -> . L_CURLY_BRACKET bloquep R_CURLY_BRACKET

    L_CURLY_BRACKET shift and go to state 41

    bloque                         shift and go to state 40

state 35

    (27) funcionp -> tipoRetorno ID create_func_scope L_PARENTHESIS parametro . R_PARENTHESIS var bloque end_func funcion

    R_PARENTHESIS   shift and go to state 42


state 36

    (30) parametro -> tipo . ID save_param parametrop

    ID              shift and go to state 43


state 37

    (31) parametro -> empty .

    R_PARENTHESIS   reduce using rule 31 (parametro -> empty .)


state 38

    (8) varp -> tipo tipo_seen COLON ID variable_seen . varppp varpp delete_type SEMICOLON varpppp
    (15) varppp -> . dimDeclare
    (16) varppp -> . dimDeclare dimDeclare
    (17) varppp -> . empty
    (20) dimDeclare -> . L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET
    (130) empty -> .

    L_SQUARE_BRACKET shift and go to state 47
    COMMA           reduce using rule 130 (empty -> .)
    SEMICOLON       reduce using rule 130 (empty -> .)

    varppp                         shift and go to state 44
    dimDeclare                     shift and go to state 45
    empty                          shift and go to state 46

state 39

    (9) varp -> tipo tipo_seen COLON ID error . varppp varpp delete_type SEMICOLON varpppp
    (15) varppp -> . dimDeclare
    (16) varppp -> . dimDeclare dimDeclare
    (17) varppp -> . empty
    (20) dimDeclare -> . L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET
    (130) empty -> .

    L_SQUARE_BRACKET shift and go to state 47
    COMMA           reduce using rule 130 (empty -> .)
    SEMICOLON       reduce using rule 130 (empty -> .)

    varppp                         shift and go to state 48
    dimDeclare                     shift and go to state 45
    empty                          shift and go to state 46

state 40

    (2) programa -> PROGRAMA ID SEMICOLON jump var funcion clear_scope PRINCIPAL update_jump L_PARENTHESIS R_PARENTHESIS bloque . EOF

    EOF             shift and go to state 49


state 41

    (37) bloque -> L_CURLY_BRACKET . bloquep R_CURLY_BRACKET
    (38) bloquep -> . estatuto bloquep
    (39) bloquep -> . empty
    (40) estatuto -> . asignacion
    (41) estatuto -> . funcionVacia
    (42) estatuto -> . regresa
    (43) estatuto -> . lectura
    (44) estatuto -> . escritura
    (45) estatuto -> . decision
    (46) estatuto -> . cicloCondicional
    (47) estatuto -> . cicloNoCondicional
    (130) empty -> .
    (48) asignacion -> . ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON
    (104) funcionVacia -> . ID set_func_scope L_PARENTHESIS llamadaFuncionp R_PARENTHESIS SEMICOLON
    (106) regresa -> . REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON
    (107) lectura -> . LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON
    (112) escritura -> . ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON
    (118) decision -> . SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp
    (124) cicloCondicional -> . MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle
    (127) cicloNoCondicional -> . DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle

    R_CURLY_BRACKET reduce using rule 130 (empty -> .)
    ID              shift and go to state 61
    REGRESA         shift and go to state 62
    LECTURA         shift and go to state 63
    ESCRIBE         shift and go to state 64
    SI              shift and go to state 65
    MIENTRAS        shift and go to state 66
    DESDE           shift and go to state 67

    bloquep                        shift and go to state 50
    estatuto                       shift and go to state 51
    empty                          shift and go to state 52
    asignacion                     shift and go to state 53
    funcionVacia                   shift and go to state 54
    regresa                        shift and go to state 55
    lectura                        shift and go to state 56
    escritura                      shift and go to state 57
    decision                       shift and go to state 58
    cicloCondicional               shift and go to state 59
    cicloNoCondicional             shift and go to state 60

state 42

    (27) funcionp -> tipoRetorno ID create_func_scope L_PARENTHESIS parametro R_PARENTHESIS . var bloque end_func funcion
    (5) var -> . VAR var_seen varp
    (6) var -> . empty
    (130) empty -> .

    VAR             shift and go to state 8
    L_CURLY_BRACKET reduce using rule 130 (empty -> .)

    var                            shift and go to state 68
    empty                          shift and go to state 9

state 43

    (30) parametro -> tipo ID . save_param parametrop
    (32) save_param -> .

    COMMA           reduce using rule 32 (save_param -> .)
    R_PARENTHESIS   reduce using rule 32 (save_param -> .)

    save_param                     shift and go to state 69

state 44

    (8) varp -> tipo tipo_seen COLON ID variable_seen varppp . varpp delete_type SEMICOLON varpppp
    (13) varpp -> . COMMA ID variable_seen varppp varpp
    (14) varpp -> . empty
    (130) empty -> .

    COMMA           shift and go to state 71
    SEMICOLON       reduce using rule 130 (empty -> .)

    varpp                          shift and go to state 70
    empty                          shift and go to state 72

state 45

    (15) varppp -> dimDeclare .
    (16) varppp -> dimDeclare . dimDeclare
    (20) dimDeclare -> . L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET

    COMMA           reduce using rule 15 (varppp -> dimDeclare .)
    SEMICOLON       reduce using rule 15 (varppp -> dimDeclare .)
    L_SQUARE_BRACKET shift and go to state 47

    dimDeclare                     shift and go to state 73

state 46

    (17) varppp -> empty .

    COMMA           reduce using rule 17 (varppp -> empty .)
    SEMICOLON       reduce using rule 17 (varppp -> empty .)


state 47

    (20) dimDeclare -> L_SQUARE_BRACKET . CTE_INT R_SQUARE_BRACKET

    CTE_INT         shift and go to state 74


state 48

    (9) varp -> tipo tipo_seen COLON ID error varppp . varpp delete_type SEMICOLON varpppp
    (13) varpp -> . COMMA ID variable_seen varppp varpp
    (14) varpp -> . empty
    (130) empty -> .

    COMMA           shift and go to state 71
    SEMICOLON       reduce using rule 130 (empty -> .)

    varpp                          shift and go to state 75
    empty                          shift and go to state 72

state 49

    (2) programa -> PROGRAMA ID SEMICOLON jump var funcion clear_scope PRINCIPAL update_jump L_PARENTHESIS R_PARENTHESIS bloque EOF .

    $end            reduce using rule 2 (programa -> PROGRAMA ID SEMICOLON jump var funcion clear_scope PRINCIPAL update_jump L_PARENTHESIS R_PARENTHESIS bloque EOF .)


state 50

    (37) bloque -> L_CURLY_BRACKET bloquep . R_CURLY_BRACKET

    R_CURLY_BRACKET shift and go to state 76


state 51

    (38) bloquep -> estatuto . bloquep
    (38) bloquep -> . estatuto bloquep
    (39) bloquep -> . empty
    (40) estatuto -> . asignacion
    (41) estatuto -> . funcionVacia
    (42) estatuto -> . regresa
    (43) estatuto -> . lectura
    (44) estatuto -> . escritura
    (45) estatuto -> . decision
    (46) estatuto -> . cicloCondicional
    (47) estatuto -> . cicloNoCondicional
    (130) empty -> .
    (48) asignacion -> . ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON
    (104) funcionVacia -> . ID set_func_scope L_PARENTHESIS llamadaFuncionp R_PARENTHESIS SEMICOLON
    (106) regresa -> . REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON
    (107) lectura -> . LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON
    (112) escritura -> . ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON
    (118) decision -> . SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp
    (124) cicloCondicional -> . MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle
    (127) cicloNoCondicional -> . DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle

    R_CURLY_BRACKET reduce using rule 130 (empty -> .)
    ID              shift and go to state 61
    REGRESA         shift and go to state 62
    LECTURA         shift and go to state 63
    ESCRIBE         shift and go to state 64
    SI              shift and go to state 65
    MIENTRAS        shift and go to state 66
    DESDE           shift and go to state 67

    estatuto                       shift and go to state 51
    bloquep                        shift and go to state 77
    empty                          shift and go to state 52
    asignacion                     shift and go to state 53
    funcionVacia                   shift and go to state 54
    regresa                        shift and go to state 55
    lectura                        shift and go to state 56
    escritura                      shift and go to state 57
    decision                       shift and go to state 58
    cicloCondicional               shift and go to state 59
    cicloNoCondicional             shift and go to state 60

state 52

    (39) bloquep -> empty .

    R_CURLY_BRACKET reduce using rule 39 (bloquep -> empty .)


state 53

    (40) estatuto -> asignacion .

    ID              reduce using rule 40 (estatuto -> asignacion .)
    REGRESA         reduce using rule 40 (estatuto -> asignacion .)
    LECTURA         reduce using rule 40 (estatuto -> asignacion .)
    ESCRIBE         reduce using rule 40 (estatuto -> asignacion .)
    SI              reduce using rule 40 (estatuto -> asignacion .)
    MIENTRAS        reduce using rule 40 (estatuto -> asignacion .)
    DESDE           reduce using rule 40 (estatuto -> asignacion .)
    R_CURLY_BRACKET reduce using rule 40 (estatuto -> asignacion .)


state 54

    (41) estatuto -> funcionVacia .

    ID              reduce using rule 41 (estatuto -> funcionVacia .)
    REGRESA         reduce using rule 41 (estatuto -> funcionVacia .)
    LECTURA         reduce using rule 41 (estatuto -> funcionVacia .)
    ESCRIBE         reduce using rule 41 (estatuto -> funcionVacia .)
    SI              reduce using rule 41 (estatuto -> funcionVacia .)
    MIENTRAS        reduce using rule 41 (estatuto -> funcionVacia .)
    DESDE           reduce using rule 41 (estatuto -> funcionVacia .)
    R_CURLY_BRACKET reduce using rule 41 (estatuto -> funcionVacia .)


state 55

    (42) estatuto -> regresa .

    ID              reduce using rule 42 (estatuto -> regresa .)
    REGRESA         reduce using rule 42 (estatuto -> regresa .)
    LECTURA         reduce using rule 42 (estatuto -> regresa .)
    ESCRIBE         reduce using rule 42 (estatuto -> regresa .)
    SI              reduce using rule 42 (estatuto -> regresa .)
    MIENTRAS        reduce using rule 42 (estatuto -> regresa .)
    DESDE           reduce using rule 42 (estatuto -> regresa .)
    R_CURLY_BRACKET reduce using rule 42 (estatuto -> regresa .)


state 56

    (43) estatuto -> lectura .

    ID              reduce using rule 43 (estatuto -> lectura .)
    REGRESA         reduce using rule 43 (estatuto -> lectura .)
    LECTURA         reduce using rule 43 (estatuto -> lectura .)
    ESCRIBE         reduce using rule 43 (estatuto -> lectura .)
    SI              reduce using rule 43 (estatuto -> lectura .)
    MIENTRAS        reduce using rule 43 (estatuto -> lectura .)
    DESDE           reduce using rule 43 (estatuto -> lectura .)
    R_CURLY_BRACKET reduce using rule 43 (estatuto -> lectura .)


state 57

    (44) estatuto -> escritura .

    ID              reduce using rule 44 (estatuto -> escritura .)
    REGRESA         reduce using rule 44 (estatuto -> escritura .)
    LECTURA         reduce using rule 44 (estatuto -> escritura .)
    ESCRIBE         reduce using rule 44 (estatuto -> escritura .)
    SI              reduce using rule 44 (estatuto -> escritura .)
    MIENTRAS        reduce using rule 44 (estatuto -> escritura .)
    DESDE           reduce using rule 44 (estatuto -> escritura .)
    R_CURLY_BRACKET reduce using rule 44 (estatuto -> escritura .)


state 58

    (45) estatuto -> decision .

    ID              reduce using rule 45 (estatuto -> decision .)
    REGRESA         reduce using rule 45 (estatuto -> decision .)
    LECTURA         reduce using rule 45 (estatuto -> decision .)
    ESCRIBE         reduce using rule 45 (estatuto -> decision .)
    SI              reduce using rule 45 (estatuto -> decision .)
    MIENTRAS        reduce using rule 45 (estatuto -> decision .)
    DESDE           reduce using rule 45 (estatuto -> decision .)
    R_CURLY_BRACKET reduce using rule 45 (estatuto -> decision .)


state 59

    (46) estatuto -> cicloCondicional .

    ID              reduce using rule 46 (estatuto -> cicloCondicional .)
    REGRESA         reduce using rule 46 (estatuto -> cicloCondicional .)
    LECTURA         reduce using rule 46 (estatuto -> cicloCondicional .)
    ESCRIBE         reduce using rule 46 (estatuto -> cicloCondicional .)
    SI              reduce using rule 46 (estatuto -> cicloCondicional .)
    MIENTRAS        reduce using rule 46 (estatuto -> cicloCondicional .)
    DESDE           reduce using rule 46 (estatuto -> cicloCondicional .)
    R_CURLY_BRACKET reduce using rule 46 (estatuto -> cicloCondicional .)


state 60

    (47) estatuto -> cicloNoCondicional .

    ID              reduce using rule 47 (estatuto -> cicloNoCondicional .)
    REGRESA         reduce using rule 47 (estatuto -> cicloNoCondicional .)
    LECTURA         reduce using rule 47 (estatuto -> cicloNoCondicional .)
    ESCRIBE         reduce using rule 47 (estatuto -> cicloNoCondicional .)
    SI              reduce using rule 47 (estatuto -> cicloNoCondicional .)
    MIENTRAS        reduce using rule 47 (estatuto -> cicloNoCondicional .)
    DESDE           reduce using rule 47 (estatuto -> cicloNoCondicional .)
    R_CURLY_BRACKET reduce using rule 47 (estatuto -> cicloNoCondicional .)


state 61

    (48) asignacion -> ID . operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON
    (104) funcionVacia -> ID . set_func_scope L_PARENTHESIS llamadaFuncionp R_PARENTHESIS SEMICOLON
    (49) operand_seen -> .
    (105) set_func_scope -> .

    ASSIGN          reduce using rule 49 (operand_seen -> .)
    L_SQUARE_BRACKET reduce using rule 49 (operand_seen -> .)
    L_PARENTHESIS   reduce using rule 105 (set_func_scope -> .)

    operand_seen                   shift and go to state 78
    set_func_scope                 shift and go to state 79

state 62

    (106) regresa -> REGRESA . L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON

    L_PARENTHESIS   shift and go to state 80


state 63

    (107) lectura -> LECTURA . L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON

    L_PARENTHESIS   shift and go to state 81


state 64

    (112) escritura -> ESCRIBE . L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON

    L_PARENTHESIS   shift and go to state 82


state 65

    (118) decision -> SI . L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp

    L_PARENTHESIS   shift and go to state 83


state 66

    (124) cicloCondicional -> MIENTRAS . jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle
    (125) jump_cycle -> .

    L_PARENTHESIS   reduce using rule 125 (jump_cycle -> .)

    jump_cycle                     shift and go to state 84

state 67

    (127) cicloNoCondicional -> DESDE . ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle

    ID              shift and go to state 85


state 68

    (27) funcionp -> tipoRetorno ID create_func_scope L_PARENTHESIS parametro R_PARENTHESIS var . bloque end_func funcion
    (37) bloque -> . L_CURLY_BRACKET bloquep R_CURLY_BRACKET

    L_CURLY_BRACKET shift and go to state 41

    bloque                         shift and go to state 86

state 69

    (30) parametro -> tipo ID save_param . parametrop
    (33) parametrop -> . COMMA tipo ID save_param parametrop
    (34) parametrop -> . empty
    (130) empty -> .

    COMMA           shift and go to state 88
    R_PARENTHESIS   reduce using rule 130 (empty -> .)

    parametrop                     shift and go to state 87
    empty                          shift and go to state 89

state 70

    (8) varp -> tipo tipo_seen COLON ID variable_seen varppp varpp . delete_type SEMICOLON varpppp
    (12) delete_type -> .

    SEMICOLON       reduce using rule 12 (delete_type -> .)

    delete_type                    shift and go to state 90

state 71

    (13) varpp -> COMMA . ID variable_seen varppp varpp

    ID              shift and go to state 91


state 72

    (14) varpp -> empty .

    SEMICOLON       reduce using rule 14 (varpp -> empty .)


state 73

    (16) varppp -> dimDeclare dimDeclare .

    COMMA           reduce using rule 16 (varppp -> dimDeclare dimDeclare .)
    SEMICOLON       reduce using rule 16 (varppp -> dimDeclare dimDeclare .)


state 74

    (20) dimDeclare -> L_SQUARE_BRACKET CTE_INT . R_SQUARE_BRACKET

    R_SQUARE_BRACKET shift and go to state 92


state 75

    (9) varp -> tipo tipo_seen COLON ID error varppp varpp . delete_type SEMICOLON varpppp
    (12) delete_type -> .

    SEMICOLON       reduce using rule 12 (delete_type -> .)

    delete_type                    shift and go to state 93

state 76

    (37) bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .

    EOF             reduce using rule 37 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    FUNCION         reduce using rule 37 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    PRINCIPAL       reduce using rule 37 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    SINO            reduce using rule 37 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    ID              reduce using rule 37 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    REGRESA         reduce using rule 37 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    LECTURA         reduce using rule 37 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    ESCRIBE         reduce using rule 37 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    SI              reduce using rule 37 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    MIENTRAS        reduce using rule 37 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    DESDE           reduce using rule 37 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    R_CURLY_BRACKET reduce using rule 37 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)


state 77

    (38) bloquep -> estatuto bloquep .

    R_CURLY_BRACKET reduce using rule 38 (bloquep -> estatuto bloquep .)


state 78

    (48) asignacion -> ID operand_seen . dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON
    (50) dimId -> . is_array create_dim dim pop_array
    (51) dimId -> . is_array create_dim dim dim pop_array
    (52) dimId -> . empty
    (54) is_array -> .
    (130) empty -> .

    L_SQUARE_BRACKET reduce using rule 54 (is_array -> .)
    ASSIGN          reduce using rule 130 (empty -> .)

    dimId                          shift and go to state 94
    is_array                       shift and go to state 95
    empty                          shift and go to state 96

state 79

    (104) funcionVacia -> ID set_func_scope . L_PARENTHESIS llamadaFuncionp R_PARENTHESIS SEMICOLON

    L_PARENTHESIS   shift and go to state 97


state 80

    (106) regresa -> REGRESA L_PARENTHESIS . expresion R_PARENTHESIS SEMICOLON
    (59) expresion -> . relacional apply_operation_expresion expresionp
    (64) relacional -> . aritmetica apply_operation_relational relacionalp
    (73) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (78) factor -> . matriz apply_operation_factor factorp
    (84) matriz -> . cte matrizp
    (85) matriz -> . NOT operation_seen cte apply_not
    (92) cte -> . CTE_INT
    (93) cte -> . CTE_FLOAT
    (94) cte -> . CTE_CHAR
    (95) cte -> . llamadaFuncion
    (96) cte -> . ID operand_seen dimId
    (97) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (98) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    NOT             shift and go to state 105
    CTE_INT         shift and go to state 106
    CTE_FLOAT       shift and go to state 107
    CTE_CHAR        shift and go to state 108
    ID              shift and go to state 110
    L_PARENTHESIS   shift and go to state 98

    expresion                      shift and go to state 99
    relacional                     shift and go to state 100
    aritmetica                     shift and go to state 101
    factor                         shift and go to state 102
    matriz                         shift and go to state 103
    cte                            shift and go to state 104
    llamadaFuncion                 shift and go to state 109

state 81

    (107) lectura -> LECTURA L_PARENTHESIS . lecturap R_PARENTHESIS SEMICOLON
    (108) lecturap -> . ID dimId gen_input lecturapp

    ID              shift and go to state 112

    lecturap                       shift and go to state 111

state 82

    (112) escritura -> ESCRIBE L_PARENTHESIS . escriturap R_PARENTHESIS SEMICOLON
    (113) escriturap -> . LETRERO gen_print escriturapp
    (114) escriturap -> . expresion gen_print escriturapp
    (59) expresion -> . relacional apply_operation_expresion expresionp
    (64) relacional -> . aritmetica apply_operation_relational relacionalp
    (73) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (78) factor -> . matriz apply_operation_factor factorp
    (84) matriz -> . cte matrizp
    (85) matriz -> . NOT operation_seen cte apply_not
    (92) cte -> . CTE_INT
    (93) cte -> . CTE_FLOAT
    (94) cte -> . CTE_CHAR
    (95) cte -> . llamadaFuncion
    (96) cte -> . ID operand_seen dimId
    (97) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (98) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    LETRERO         shift and go to state 114
    NOT             shift and go to state 105
    CTE_INT         shift and go to state 106
    CTE_FLOAT       shift and go to state 107
    CTE_CHAR        shift and go to state 108
    ID              shift and go to state 110
    L_PARENTHESIS   shift and go to state 98

    escriturap                     shift and go to state 113
    expresion                      shift and go to state 115
    relacional                     shift and go to state 100
    aritmetica                     shift and go to state 101
    factor                         shift and go to state 102
    matriz                         shift and go to state 103
    cte                            shift and go to state 104
    llamadaFuncion                 shift and go to state 109

state 83

    (118) decision -> SI L_PARENTHESIS . expresion R_PARENTHESIS jump_false HAZ bloque decisionp
    (59) expresion -> . relacional apply_operation_expresion expresionp
    (64) relacional -> . aritmetica apply_operation_relational relacionalp
    (73) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (78) factor -> . matriz apply_operation_factor factorp
    (84) matriz -> . cte matrizp
    (85) matriz -> . NOT operation_seen cte apply_not
    (92) cte -> . CTE_INT
    (93) cte -> . CTE_FLOAT
    (94) cte -> . CTE_CHAR
    (95) cte -> . llamadaFuncion
    (96) cte -> . ID operand_seen dimId
    (97) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (98) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    NOT             shift and go to state 105
    CTE_INT         shift and go to state 106
    CTE_FLOAT       shift and go to state 107
    CTE_CHAR        shift and go to state 108
    ID              shift and go to state 110
    L_PARENTHESIS   shift and go to state 98

    expresion                      shift and go to state 116
    relacional                     shift and go to state 100
    aritmetica                     shift and go to state 101
    factor                         shift and go to state 102
    matriz                         shift and go to state 103
    cte                            shift and go to state 104
    llamadaFuncion                 shift and go to state 109

state 84

    (124) cicloCondicional -> MIENTRAS jump_cycle . L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle

    L_PARENTHESIS   shift and go to state 117


state 85

    (127) cicloNoCondicional -> DESDE ID . operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle
    (49) operand_seen -> .

    ASSIGN          reduce using rule 49 (operand_seen -> .)
    L_SQUARE_BRACKET reduce using rule 49 (operand_seen -> .)

    operand_seen                   shift and go to state 118

state 86

    (27) funcionp -> tipoRetorno ID create_func_scope L_PARENTHESIS parametro R_PARENTHESIS var bloque . end_func funcion
    (29) end_func -> .

    FUNCION         reduce using rule 29 (end_func -> .)
    PRINCIPAL       reduce using rule 29 (end_func -> .)

    end_func                       shift and go to state 119

state 87

    (30) parametro -> tipo ID save_param parametrop .

    R_PARENTHESIS   reduce using rule 30 (parametro -> tipo ID save_param parametrop .)


state 88

    (33) parametrop -> COMMA . tipo ID save_param parametrop
    (21) tipo -> . INT
    (22) tipo -> . FLOAT
    (23) tipo -> . CHAR

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22

    tipo                           shift and go to state 120

state 89

    (34) parametrop -> empty .

    R_PARENTHESIS   reduce using rule 34 (parametrop -> empty .)


state 90

    (8) varp -> tipo tipo_seen COLON ID variable_seen varppp varpp delete_type . SEMICOLON varpppp

    SEMICOLON       shift and go to state 121


state 91

    (13) varpp -> COMMA ID . variable_seen varppp varpp
    (11) variable_seen -> .

    L_SQUARE_BRACKET reduce using rule 11 (variable_seen -> .)
    COMMA           reduce using rule 11 (variable_seen -> .)
    SEMICOLON       reduce using rule 11 (variable_seen -> .)

    variable_seen                  shift and go to state 122

state 92

    (20) dimDeclare -> L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET .

    L_SQUARE_BRACKET reduce using rule 20 (dimDeclare -> L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET .)
    COMMA           reduce using rule 20 (dimDeclare -> L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET .)
    SEMICOLON       reduce using rule 20 (dimDeclare -> L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET .)


state 93

    (9) varp -> tipo tipo_seen COLON ID error varppp varpp delete_type . SEMICOLON varpppp

    SEMICOLON       shift and go to state 123


state 94

    (48) asignacion -> ID operand_seen dimId . ASSIGN operation_seen expresion apply_operation_assign SEMICOLON

    ASSIGN          shift and go to state 124


state 95

    (50) dimId -> is_array . create_dim dim pop_array
    (51) dimId -> is_array . create_dim dim dim pop_array
    (56) create_dim -> .

    L_SQUARE_BRACKET reduce using rule 56 (create_dim -> .)

    create_dim                     shift and go to state 125

state 96

    (52) dimId -> empty .

    ASSIGN          reduce using rule 52 (dimId -> empty .)
    COMMA           reduce using rule 52 (dimId -> empty .)
    R_PARENTHESIS   reduce using rule 52 (dimId -> empty .)
    DETERMINANT     reduce using rule 52 (dimId -> empty .)
    TRANSPOSED      reduce using rule 52 (dimId -> empty .)
    INVERSE         reduce using rule 52 (dimId -> empty .)
    MULTIPLY        reduce using rule 52 (dimId -> empty .)
    DIVIDE          reduce using rule 52 (dimId -> empty .)
    SUM             reduce using rule 52 (dimId -> empty .)
    SUBTRACT        reduce using rule 52 (dimId -> empty .)
    EQUALS          reduce using rule 52 (dimId -> empty .)
    NOT_EQUAL       reduce using rule 52 (dimId -> empty .)
    LESS_THAN       reduce using rule 52 (dimId -> empty .)
    LESS_THAN_EQUAL reduce using rule 52 (dimId -> empty .)
    GREATER_THAN    reduce using rule 52 (dimId -> empty .)
    GREATER_THAN_EQUAL reduce using rule 52 (dimId -> empty .)
    AND             reduce using rule 52 (dimId -> empty .)
    OR              reduce using rule 52 (dimId -> empty .)
    SEMICOLON       reduce using rule 52 (dimId -> empty .)
    R_SQUARE_BRACKET reduce using rule 52 (dimId -> empty .)
    HASTA           reduce using rule 52 (dimId -> empty .)
    HACER           reduce using rule 52 (dimId -> empty .)


state 97

    (104) funcionVacia -> ID set_func_scope L_PARENTHESIS . llamadaFuncionp R_PARENTHESIS SEMICOLON
    (99) llamadaFuncionp -> . expresion verify_parameter llamadaFuncionpp
    (100) llamadaFuncionp -> . empty
    (59) expresion -> . relacional apply_operation_expresion expresionp
    (130) empty -> .
    (64) relacional -> . aritmetica apply_operation_relational relacionalp
    (73) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (78) factor -> . matriz apply_operation_factor factorp
    (84) matriz -> . cte matrizp
    (85) matriz -> . NOT operation_seen cte apply_not
    (92) cte -> . CTE_INT
    (93) cte -> . CTE_FLOAT
    (94) cte -> . CTE_CHAR
    (95) cte -> . llamadaFuncion
    (96) cte -> . ID operand_seen dimId
    (97) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (98) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    R_PARENTHESIS   reduce using rule 130 (empty -> .)
    NOT             shift and go to state 105
    CTE_INT         shift and go to state 106
    CTE_FLOAT       shift and go to state 107
    CTE_CHAR        shift and go to state 108
    ID              shift and go to state 110
    L_PARENTHESIS   shift and go to state 98

    llamadaFuncionp                shift and go to state 126
    expresion                      shift and go to state 127
    empty                          shift and go to state 128
    relacional                     shift and go to state 100
    aritmetica                     shift and go to state 101
    factor                         shift and go to state 102
    matriz                         shift and go to state 103
    cte                            shift and go to state 104
    llamadaFuncion                 shift and go to state 109

state 98

    (97) cte -> L_PARENTHESIS . operation_seen expresion R_PARENTHESIS operation_seen
    (83) operation_seen -> .

    NOT             reduce using rule 83 (operation_seen -> .)
    CTE_INT         reduce using rule 83 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 83 (operation_seen -> .)
    CTE_CHAR        reduce using rule 83 (operation_seen -> .)
    ID              reduce using rule 83 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 83 (operation_seen -> .)

    operation_seen                 shift and go to state 129

state 99

    (106) regresa -> REGRESA L_PARENTHESIS expresion . R_PARENTHESIS SEMICOLON

    R_PARENTHESIS   shift and go to state 130


state 100

    (59) expresion -> relacional . apply_operation_expresion expresionp
    (63) apply_operation_expresion -> .

    AND             reduce using rule 63 (apply_operation_expresion -> .)
    OR              reduce using rule 63 (apply_operation_expresion -> .)
    R_PARENTHESIS   reduce using rule 63 (apply_operation_expresion -> .)
    COMMA           reduce using rule 63 (apply_operation_expresion -> .)
    SEMICOLON       reduce using rule 63 (apply_operation_expresion -> .)
    R_SQUARE_BRACKET reduce using rule 63 (apply_operation_expresion -> .)
    HASTA           reduce using rule 63 (apply_operation_expresion -> .)
    HACER           reduce using rule 63 (apply_operation_expresion -> .)

    apply_operation_expresion      shift and go to state 131

state 101

    (64) relacional -> aritmetica . apply_operation_relational relacionalp
    (72) apply_operation_relational -> .

    EQUALS          reduce using rule 72 (apply_operation_relational -> .)
    NOT_EQUAL       reduce using rule 72 (apply_operation_relational -> .)
    LESS_THAN       reduce using rule 72 (apply_operation_relational -> .)
    LESS_THAN_EQUAL reduce using rule 72 (apply_operation_relational -> .)
    GREATER_THAN    reduce using rule 72 (apply_operation_relational -> .)
    GREATER_THAN_EQUAL reduce using rule 72 (apply_operation_relational -> .)
    AND             reduce using rule 72 (apply_operation_relational -> .)
    OR              reduce using rule 72 (apply_operation_relational -> .)
    R_PARENTHESIS   reduce using rule 72 (apply_operation_relational -> .)
    COMMA           reduce using rule 72 (apply_operation_relational -> .)
    SEMICOLON       reduce using rule 72 (apply_operation_relational -> .)
    R_SQUARE_BRACKET reduce using rule 72 (apply_operation_relational -> .)
    HASTA           reduce using rule 72 (apply_operation_relational -> .)
    HACER           reduce using rule 72 (apply_operation_relational -> .)

    apply_operation_relational     shift and go to state 132

state 102

    (73) aritmetica -> factor . apply_operation_aritmetica aritmeticap
    (77) apply_operation_aritmetica -> .

    SUM             reduce using rule 77 (apply_operation_aritmetica -> .)
    SUBTRACT        reduce using rule 77 (apply_operation_aritmetica -> .)
    EQUALS          reduce using rule 77 (apply_operation_aritmetica -> .)
    NOT_EQUAL       reduce using rule 77 (apply_operation_aritmetica -> .)
    LESS_THAN       reduce using rule 77 (apply_operation_aritmetica -> .)
    LESS_THAN_EQUAL reduce using rule 77 (apply_operation_aritmetica -> .)
    GREATER_THAN    reduce using rule 77 (apply_operation_aritmetica -> .)
    GREATER_THAN_EQUAL reduce using rule 77 (apply_operation_aritmetica -> .)
    AND             reduce using rule 77 (apply_operation_aritmetica -> .)
    OR              reduce using rule 77 (apply_operation_aritmetica -> .)
    R_PARENTHESIS   reduce using rule 77 (apply_operation_aritmetica -> .)
    COMMA           reduce using rule 77 (apply_operation_aritmetica -> .)
    SEMICOLON       reduce using rule 77 (apply_operation_aritmetica -> .)
    R_SQUARE_BRACKET reduce using rule 77 (apply_operation_aritmetica -> .)
    HASTA           reduce using rule 77 (apply_operation_aritmetica -> .)
    HACER           reduce using rule 77 (apply_operation_aritmetica -> .)

    apply_operation_aritmetica     shift and go to state 133

state 103

    (78) factor -> matriz . apply_operation_factor factorp
    (82) apply_operation_factor -> .

    MULTIPLY        reduce using rule 82 (apply_operation_factor -> .)
    DIVIDE          reduce using rule 82 (apply_operation_factor -> .)
    SUM             reduce using rule 82 (apply_operation_factor -> .)
    SUBTRACT        reduce using rule 82 (apply_operation_factor -> .)
    EQUALS          reduce using rule 82 (apply_operation_factor -> .)
    NOT_EQUAL       reduce using rule 82 (apply_operation_factor -> .)
    LESS_THAN       reduce using rule 82 (apply_operation_factor -> .)
    LESS_THAN_EQUAL reduce using rule 82 (apply_operation_factor -> .)
    GREATER_THAN    reduce using rule 82 (apply_operation_factor -> .)
    GREATER_THAN_EQUAL reduce using rule 82 (apply_operation_factor -> .)
    AND             reduce using rule 82 (apply_operation_factor -> .)
    OR              reduce using rule 82 (apply_operation_factor -> .)
    R_PARENTHESIS   reduce using rule 82 (apply_operation_factor -> .)
    COMMA           reduce using rule 82 (apply_operation_factor -> .)
    SEMICOLON       reduce using rule 82 (apply_operation_factor -> .)
    R_SQUARE_BRACKET reduce using rule 82 (apply_operation_factor -> .)
    HASTA           reduce using rule 82 (apply_operation_factor -> .)
    HACER           reduce using rule 82 (apply_operation_factor -> .)

    apply_operation_factor         shift and go to state 134

state 104

    (84) matriz -> cte . matrizp
    (87) matrizp -> . DETERMINANT operation_seen apply_mat
    (88) matrizp -> . TRANSPOSED operation_seen apply_mat
    (89) matrizp -> . INVERSE operation_seen apply_mat
    (90) matrizp -> . empty
    (130) empty -> .

    DETERMINANT     shift and go to state 136
    TRANSPOSED      shift and go to state 137
    INVERSE         shift and go to state 138
    MULTIPLY        reduce using rule 130 (empty -> .)
    DIVIDE          reduce using rule 130 (empty -> .)
    SUM             reduce using rule 130 (empty -> .)
    SUBTRACT        reduce using rule 130 (empty -> .)
    EQUALS          reduce using rule 130 (empty -> .)
    NOT_EQUAL       reduce using rule 130 (empty -> .)
    LESS_THAN       reduce using rule 130 (empty -> .)
    LESS_THAN_EQUAL reduce using rule 130 (empty -> .)
    GREATER_THAN    reduce using rule 130 (empty -> .)
    GREATER_THAN_EQUAL reduce using rule 130 (empty -> .)
    AND             reduce using rule 130 (empty -> .)
    OR              reduce using rule 130 (empty -> .)
    R_PARENTHESIS   reduce using rule 130 (empty -> .)
    COMMA           reduce using rule 130 (empty -> .)
    SEMICOLON       reduce using rule 130 (empty -> .)
    R_SQUARE_BRACKET reduce using rule 130 (empty -> .)
    HASTA           reduce using rule 130 (empty -> .)
    HACER           reduce using rule 130 (empty -> .)

    matrizp                        shift and go to state 135
    empty                          shift and go to state 139

state 105

    (85) matriz -> NOT . operation_seen cte apply_not
    (83) operation_seen -> .

    CTE_INT         reduce using rule 83 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 83 (operation_seen -> .)
    CTE_CHAR        reduce using rule 83 (operation_seen -> .)
    ID              reduce using rule 83 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 83 (operation_seen -> .)

    operation_seen                 shift and go to state 140

state 106

    (92) cte -> CTE_INT .

    DETERMINANT     reduce using rule 92 (cte -> CTE_INT .)
    TRANSPOSED      reduce using rule 92 (cte -> CTE_INT .)
    INVERSE         reduce using rule 92 (cte -> CTE_INT .)
    MULTIPLY        reduce using rule 92 (cte -> CTE_INT .)
    DIVIDE          reduce using rule 92 (cte -> CTE_INT .)
    SUM             reduce using rule 92 (cte -> CTE_INT .)
    SUBTRACT        reduce using rule 92 (cte -> CTE_INT .)
    EQUALS          reduce using rule 92 (cte -> CTE_INT .)
    NOT_EQUAL       reduce using rule 92 (cte -> CTE_INT .)
    LESS_THAN       reduce using rule 92 (cte -> CTE_INT .)
    LESS_THAN_EQUAL reduce using rule 92 (cte -> CTE_INT .)
    GREATER_THAN    reduce using rule 92 (cte -> CTE_INT .)
    GREATER_THAN_EQUAL reduce using rule 92 (cte -> CTE_INT .)
    AND             reduce using rule 92 (cte -> CTE_INT .)
    OR              reduce using rule 92 (cte -> CTE_INT .)
    R_PARENTHESIS   reduce using rule 92 (cte -> CTE_INT .)
    COMMA           reduce using rule 92 (cte -> CTE_INT .)
    SEMICOLON       reduce using rule 92 (cte -> CTE_INT .)
    R_SQUARE_BRACKET reduce using rule 92 (cte -> CTE_INT .)
    HASTA           reduce using rule 92 (cte -> CTE_INT .)
    HACER           reduce using rule 92 (cte -> CTE_INT .)


state 107

    (93) cte -> CTE_FLOAT .

    DETERMINANT     reduce using rule 93 (cte -> CTE_FLOAT .)
    TRANSPOSED      reduce using rule 93 (cte -> CTE_FLOAT .)
    INVERSE         reduce using rule 93 (cte -> CTE_FLOAT .)
    MULTIPLY        reduce using rule 93 (cte -> CTE_FLOAT .)
    DIVIDE          reduce using rule 93 (cte -> CTE_FLOAT .)
    SUM             reduce using rule 93 (cte -> CTE_FLOAT .)
    SUBTRACT        reduce using rule 93 (cte -> CTE_FLOAT .)
    EQUALS          reduce using rule 93 (cte -> CTE_FLOAT .)
    NOT_EQUAL       reduce using rule 93 (cte -> CTE_FLOAT .)
    LESS_THAN       reduce using rule 93 (cte -> CTE_FLOAT .)
    LESS_THAN_EQUAL reduce using rule 93 (cte -> CTE_FLOAT .)
    GREATER_THAN    reduce using rule 93 (cte -> CTE_FLOAT .)
    GREATER_THAN_EQUAL reduce using rule 93 (cte -> CTE_FLOAT .)
    AND             reduce using rule 93 (cte -> CTE_FLOAT .)
    OR              reduce using rule 93 (cte -> CTE_FLOAT .)
    R_PARENTHESIS   reduce using rule 93 (cte -> CTE_FLOAT .)
    COMMA           reduce using rule 93 (cte -> CTE_FLOAT .)
    SEMICOLON       reduce using rule 93 (cte -> CTE_FLOAT .)
    R_SQUARE_BRACKET reduce using rule 93 (cte -> CTE_FLOAT .)
    HASTA           reduce using rule 93 (cte -> CTE_FLOAT .)
    HACER           reduce using rule 93 (cte -> CTE_FLOAT .)


state 108

    (94) cte -> CTE_CHAR .

    DETERMINANT     reduce using rule 94 (cte -> CTE_CHAR .)
    TRANSPOSED      reduce using rule 94 (cte -> CTE_CHAR .)
    INVERSE         reduce using rule 94 (cte -> CTE_CHAR .)
    MULTIPLY        reduce using rule 94 (cte -> CTE_CHAR .)
    DIVIDE          reduce using rule 94 (cte -> CTE_CHAR .)
    SUM             reduce using rule 94 (cte -> CTE_CHAR .)
    SUBTRACT        reduce using rule 94 (cte -> CTE_CHAR .)
    EQUALS          reduce using rule 94 (cte -> CTE_CHAR .)
    NOT_EQUAL       reduce using rule 94 (cte -> CTE_CHAR .)
    LESS_THAN       reduce using rule 94 (cte -> CTE_CHAR .)
    LESS_THAN_EQUAL reduce using rule 94 (cte -> CTE_CHAR .)
    GREATER_THAN    reduce using rule 94 (cte -> CTE_CHAR .)
    GREATER_THAN_EQUAL reduce using rule 94 (cte -> CTE_CHAR .)
    AND             reduce using rule 94 (cte -> CTE_CHAR .)
    OR              reduce using rule 94 (cte -> CTE_CHAR .)
    R_PARENTHESIS   reduce using rule 94 (cte -> CTE_CHAR .)
    COMMA           reduce using rule 94 (cte -> CTE_CHAR .)
    SEMICOLON       reduce using rule 94 (cte -> CTE_CHAR .)
    R_SQUARE_BRACKET reduce using rule 94 (cte -> CTE_CHAR .)
    HASTA           reduce using rule 94 (cte -> CTE_CHAR .)
    HACER           reduce using rule 94 (cte -> CTE_CHAR .)


state 109

    (95) cte -> llamadaFuncion .

    DETERMINANT     reduce using rule 95 (cte -> llamadaFuncion .)
    TRANSPOSED      reduce using rule 95 (cte -> llamadaFuncion .)
    INVERSE         reduce using rule 95 (cte -> llamadaFuncion .)
    MULTIPLY        reduce using rule 95 (cte -> llamadaFuncion .)
    DIVIDE          reduce using rule 95 (cte -> llamadaFuncion .)
    SUM             reduce using rule 95 (cte -> llamadaFuncion .)
    SUBTRACT        reduce using rule 95 (cte -> llamadaFuncion .)
    EQUALS          reduce using rule 95 (cte -> llamadaFuncion .)
    NOT_EQUAL       reduce using rule 95 (cte -> llamadaFuncion .)
    LESS_THAN       reduce using rule 95 (cte -> llamadaFuncion .)
    LESS_THAN_EQUAL reduce using rule 95 (cte -> llamadaFuncion .)
    GREATER_THAN    reduce using rule 95 (cte -> llamadaFuncion .)
    GREATER_THAN_EQUAL reduce using rule 95 (cte -> llamadaFuncion .)
    AND             reduce using rule 95 (cte -> llamadaFuncion .)
    OR              reduce using rule 95 (cte -> llamadaFuncion .)
    R_PARENTHESIS   reduce using rule 95 (cte -> llamadaFuncion .)
    COMMA           reduce using rule 95 (cte -> llamadaFuncion .)
    SEMICOLON       reduce using rule 95 (cte -> llamadaFuncion .)
    R_SQUARE_BRACKET reduce using rule 95 (cte -> llamadaFuncion .)
    HASTA           reduce using rule 95 (cte -> llamadaFuncion .)
    HACER           reduce using rule 95 (cte -> llamadaFuncion .)


state 110

    (96) cte -> ID . operand_seen dimId
    (98) llamadaFuncion -> ID . set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen
    (49) operand_seen -> .
    (105) set_func_scope -> .

    L_SQUARE_BRACKET reduce using rule 49 (operand_seen -> .)
    DETERMINANT     reduce using rule 49 (operand_seen -> .)
    TRANSPOSED      reduce using rule 49 (operand_seen -> .)
    INVERSE         reduce using rule 49 (operand_seen -> .)
    MULTIPLY        reduce using rule 49 (operand_seen -> .)
    DIVIDE          reduce using rule 49 (operand_seen -> .)
    SUM             reduce using rule 49 (operand_seen -> .)
    SUBTRACT        reduce using rule 49 (operand_seen -> .)
    EQUALS          reduce using rule 49 (operand_seen -> .)
    NOT_EQUAL       reduce using rule 49 (operand_seen -> .)
    LESS_THAN       reduce using rule 49 (operand_seen -> .)
    LESS_THAN_EQUAL reduce using rule 49 (operand_seen -> .)
    GREATER_THAN    reduce using rule 49 (operand_seen -> .)
    GREATER_THAN_EQUAL reduce using rule 49 (operand_seen -> .)
    AND             reduce using rule 49 (operand_seen -> .)
    OR              reduce using rule 49 (operand_seen -> .)
    R_PARENTHESIS   reduce using rule 49 (operand_seen -> .)
    COMMA           reduce using rule 49 (operand_seen -> .)
    SEMICOLON       reduce using rule 49 (operand_seen -> .)
    R_SQUARE_BRACKET reduce using rule 49 (operand_seen -> .)
    HASTA           reduce using rule 49 (operand_seen -> .)
    HACER           reduce using rule 49 (operand_seen -> .)
    L_PARENTHESIS   reduce using rule 105 (set_func_scope -> .)

    operand_seen                   shift and go to state 141
    set_func_scope                 shift and go to state 142

state 111

    (107) lectura -> LECTURA L_PARENTHESIS lecturap . R_PARENTHESIS SEMICOLON

    R_PARENTHESIS   shift and go to state 143


state 112

    (108) lecturap -> ID . dimId gen_input lecturapp
    (50) dimId -> . is_array create_dim dim pop_array
    (51) dimId -> . is_array create_dim dim dim pop_array
    (52) dimId -> . empty
    (54) is_array -> .
    (130) empty -> .

    L_SQUARE_BRACKET reduce using rule 54 (is_array -> .)
    COMMA           reduce using rule 130 (empty -> .)
    R_PARENTHESIS   reduce using rule 130 (empty -> .)

    dimId                          shift and go to state 144
    is_array                       shift and go to state 95
    empty                          shift and go to state 96

state 113

    (112) escritura -> ESCRIBE L_PARENTHESIS escriturap . R_PARENTHESIS SEMICOLON

    R_PARENTHESIS   shift and go to state 145


state 114

    (113) escriturap -> LETRERO . gen_print escriturapp
    (115) gen_print -> .

    COMMA           reduce using rule 115 (gen_print -> .)
    R_PARENTHESIS   reduce using rule 115 (gen_print -> .)

    gen_print                      shift and go to state 146

state 115

    (114) escriturap -> expresion . gen_print escriturapp
    (115) gen_print -> .

    COMMA           reduce using rule 115 (gen_print -> .)
    R_PARENTHESIS   reduce using rule 115 (gen_print -> .)

    gen_print                      shift and go to state 147

state 116

    (118) decision -> SI L_PARENTHESIS expresion . R_PARENTHESIS jump_false HAZ bloque decisionp

    R_PARENTHESIS   shift and go to state 148


state 117

    (124) cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS . expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle
    (59) expresion -> . relacional apply_operation_expresion expresionp
    (64) relacional -> . aritmetica apply_operation_relational relacionalp
    (73) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (78) factor -> . matriz apply_operation_factor factorp
    (84) matriz -> . cte matrizp
    (85) matriz -> . NOT operation_seen cte apply_not
    (92) cte -> . CTE_INT
    (93) cte -> . CTE_FLOAT
    (94) cte -> . CTE_CHAR
    (95) cte -> . llamadaFuncion
    (96) cte -> . ID operand_seen dimId
    (97) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (98) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    NOT             shift and go to state 105
    CTE_INT         shift and go to state 106
    CTE_FLOAT       shift and go to state 107
    CTE_CHAR        shift and go to state 108
    ID              shift and go to state 110
    L_PARENTHESIS   shift and go to state 98

    expresion                      shift and go to state 149
    relacional                     shift and go to state 100
    aritmetica                     shift and go to state 101
    factor                         shift and go to state 102
    matriz                         shift and go to state 103
    cte                            shift and go to state 104
    llamadaFuncion                 shift and go to state 109

state 118

    (127) cicloNoCondicional -> DESDE ID operand_seen . dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle
    (50) dimId -> . is_array create_dim dim pop_array
    (51) dimId -> . is_array create_dim dim dim pop_array
    (52) dimId -> . empty
    (54) is_array -> .
    (130) empty -> .

    L_SQUARE_BRACKET reduce using rule 54 (is_array -> .)
    ASSIGN          reduce using rule 130 (empty -> .)

    dimId                          shift and go to state 150
    is_array                       shift and go to state 95
    empty                          shift and go to state 96

state 119

    (27) funcionp -> tipoRetorno ID create_func_scope L_PARENTHESIS parametro R_PARENTHESIS var bloque end_func . funcion
    (24) funcion -> . FUNCION funcionp
    (25) funcion -> . FUNCION error
    (26) funcion -> . empty
    (130) empty -> .

    FUNCION         shift and go to state 11
    PRINCIPAL       reduce using rule 130 (empty -> .)

    funcion                        shift and go to state 151
    empty                          shift and go to state 12

state 120

    (33) parametrop -> COMMA tipo . ID save_param parametrop

    ID              shift and go to state 152


state 121

    (8) varp -> tipo tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON . varpppp
    (18) varpppp -> . varp
    (19) varpppp -> . empty
    (8) varp -> . tipo tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp
    (9) varp -> . tipo tipo_seen COLON ID error varppp varpp delete_type SEMICOLON varpppp
    (130) empty -> .
    (21) tipo -> . INT
    (22) tipo -> . FLOAT
    (23) tipo -> . CHAR

    FUNCION         reduce using rule 130 (empty -> .)
    PRINCIPAL       reduce using rule 130 (empty -> .)
    L_CURLY_BRACKET reduce using rule 130 (empty -> .)
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22

    tipo                           shift and go to state 24
    varpppp                        shift and go to state 153
    varp                           shift and go to state 154
    empty                          shift and go to state 155

state 122

    (13) varpp -> COMMA ID variable_seen . varppp varpp
    (15) varppp -> . dimDeclare
    (16) varppp -> . dimDeclare dimDeclare
    (17) varppp -> . empty
    (20) dimDeclare -> . L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET
    (130) empty -> .

    L_SQUARE_BRACKET shift and go to state 47
    COMMA           reduce using rule 130 (empty -> .)
    SEMICOLON       reduce using rule 130 (empty -> .)

    varppp                         shift and go to state 156
    dimDeclare                     shift and go to state 45
    empty                          shift and go to state 46

state 123

    (9) varp -> tipo tipo_seen COLON ID error varppp varpp delete_type SEMICOLON . varpppp
    (18) varpppp -> . varp
    (19) varpppp -> . empty
    (8) varp -> . tipo tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp
    (9) varp -> . tipo tipo_seen COLON ID error varppp varpp delete_type SEMICOLON varpppp
    (130) empty -> .
    (21) tipo -> . INT
    (22) tipo -> . FLOAT
    (23) tipo -> . CHAR

    FUNCION         reduce using rule 130 (empty -> .)
    PRINCIPAL       reduce using rule 130 (empty -> .)
    L_CURLY_BRACKET reduce using rule 130 (empty -> .)
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22

    tipo                           shift and go to state 24
    varpppp                        shift and go to state 157
    varp                           shift and go to state 154
    empty                          shift and go to state 155

state 124

    (48) asignacion -> ID operand_seen dimId ASSIGN . operation_seen expresion apply_operation_assign SEMICOLON
    (83) operation_seen -> .

    NOT             reduce using rule 83 (operation_seen -> .)
    CTE_INT         reduce using rule 83 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 83 (operation_seen -> .)
    CTE_CHAR        reduce using rule 83 (operation_seen -> .)
    ID              reduce using rule 83 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 83 (operation_seen -> .)

    operation_seen                 shift and go to state 158

state 125

    (50) dimId -> is_array create_dim . dim pop_array
    (51) dimId -> is_array create_dim . dim dim pop_array
    (55) dim -> . L_SQUARE_BRACKET bracket_seen expresion R_SQUARE_BRACKET bracket_seen

    L_SQUARE_BRACKET shift and go to state 160

    dim                            shift and go to state 159

state 126

    (104) funcionVacia -> ID set_func_scope L_PARENTHESIS llamadaFuncionp . R_PARENTHESIS SEMICOLON

    R_PARENTHESIS   shift and go to state 161


state 127

    (99) llamadaFuncionp -> expresion . verify_parameter llamadaFuncionpp
    (103) verify_parameter -> .

    COMMA           reduce using rule 103 (verify_parameter -> .)
    R_PARENTHESIS   reduce using rule 103 (verify_parameter -> .)

    verify_parameter               shift and go to state 162

state 128

    (100) llamadaFuncionp -> empty .

    R_PARENTHESIS   reduce using rule 100 (llamadaFuncionp -> empty .)


state 129

    (97) cte -> L_PARENTHESIS operation_seen . expresion R_PARENTHESIS operation_seen
    (59) expresion -> . relacional apply_operation_expresion expresionp
    (64) relacional -> . aritmetica apply_operation_relational relacionalp
    (73) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (78) factor -> . matriz apply_operation_factor factorp
    (84) matriz -> . cte matrizp
    (85) matriz -> . NOT operation_seen cte apply_not
    (92) cte -> . CTE_INT
    (93) cte -> . CTE_FLOAT
    (94) cte -> . CTE_CHAR
    (95) cte -> . llamadaFuncion
    (96) cte -> . ID operand_seen dimId
    (97) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (98) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    NOT             shift and go to state 105
    CTE_INT         shift and go to state 106
    CTE_FLOAT       shift and go to state 107
    CTE_CHAR        shift and go to state 108
    ID              shift and go to state 110
    L_PARENTHESIS   shift and go to state 98

    expresion                      shift and go to state 163
    relacional                     shift and go to state 100
    aritmetica                     shift and go to state 101
    factor                         shift and go to state 102
    matriz                         shift and go to state 103
    cte                            shift and go to state 104
    llamadaFuncion                 shift and go to state 109

state 130

    (106) regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 164


state 131

    (59) expresion -> relacional apply_operation_expresion . expresionp
    (60) expresionp -> . AND operation_seen expresion
    (61) expresionp -> . OR operation_seen expresion
    (62) expresionp -> . empty
    (130) empty -> .

    AND             shift and go to state 166
    OR              shift and go to state 167
    R_PARENTHESIS   reduce using rule 130 (empty -> .)
    COMMA           reduce using rule 130 (empty -> .)
    SEMICOLON       reduce using rule 130 (empty -> .)
    R_SQUARE_BRACKET reduce using rule 130 (empty -> .)
    HASTA           reduce using rule 130 (empty -> .)
    HACER           reduce using rule 130 (empty -> .)

    expresionp                     shift and go to state 165
    empty                          shift and go to state 168

state 132

    (64) relacional -> aritmetica apply_operation_relational . relacionalp
    (65) relacionalp -> . EQUALS operation_seen relacional
    (66) relacionalp -> . NOT_EQUAL operation_seen relacional
    (67) relacionalp -> . LESS_THAN operation_seen relacional
    (68) relacionalp -> . LESS_THAN_EQUAL operation_seen relacional
    (69) relacionalp -> . GREATER_THAN operation_seen relacional
    (70) relacionalp -> . GREATER_THAN_EQUAL operation_seen relacional
    (71) relacionalp -> . empty
    (130) empty -> .

    EQUALS          shift and go to state 170
    NOT_EQUAL       shift and go to state 171
    LESS_THAN       shift and go to state 172
    LESS_THAN_EQUAL shift and go to state 173
    GREATER_THAN    shift and go to state 174
    GREATER_THAN_EQUAL shift and go to state 175
    AND             reduce using rule 130 (empty -> .)
    OR              reduce using rule 130 (empty -> .)
    R_PARENTHESIS   reduce using rule 130 (empty -> .)
    COMMA           reduce using rule 130 (empty -> .)
    SEMICOLON       reduce using rule 130 (empty -> .)
    R_SQUARE_BRACKET reduce using rule 130 (empty -> .)
    HASTA           reduce using rule 130 (empty -> .)
    HACER           reduce using rule 130 (empty -> .)

    relacionalp                    shift and go to state 169
    empty                          shift and go to state 176

state 133

    (73) aritmetica -> factor apply_operation_aritmetica . aritmeticap
    (74) aritmeticap -> . SUM operation_seen aritmetica
    (75) aritmeticap -> . SUBTRACT operation_seen aritmetica
    (76) aritmeticap -> . empty
    (130) empty -> .

    SUM             shift and go to state 178
    SUBTRACT        shift and go to state 179
    EQUALS          reduce using rule 130 (empty -> .)
    NOT_EQUAL       reduce using rule 130 (empty -> .)
    LESS_THAN       reduce using rule 130 (empty -> .)
    LESS_THAN_EQUAL reduce using rule 130 (empty -> .)
    GREATER_THAN    reduce using rule 130 (empty -> .)
    GREATER_THAN_EQUAL reduce using rule 130 (empty -> .)
    AND             reduce using rule 130 (empty -> .)
    OR              reduce using rule 130 (empty -> .)
    R_PARENTHESIS   reduce using rule 130 (empty -> .)
    COMMA           reduce using rule 130 (empty -> .)
    SEMICOLON       reduce using rule 130 (empty -> .)
    R_SQUARE_BRACKET reduce using rule 130 (empty -> .)
    HASTA           reduce using rule 130 (empty -> .)
    HACER           reduce using rule 130 (empty -> .)

    aritmeticap                    shift and go to state 177
    empty                          shift and go to state 180

state 134

    (78) factor -> matriz apply_operation_factor . factorp
    (79) factorp -> . MULTIPLY operation_seen factor
    (80) factorp -> . DIVIDE operation_seen factor
    (81) factorp -> . empty
    (130) empty -> .

    MULTIPLY        shift and go to state 182
    DIVIDE          shift and go to state 183
    SUM             reduce using rule 130 (empty -> .)
    SUBTRACT        reduce using rule 130 (empty -> .)
    EQUALS          reduce using rule 130 (empty -> .)
    NOT_EQUAL       reduce using rule 130 (empty -> .)
    LESS_THAN       reduce using rule 130 (empty -> .)
    LESS_THAN_EQUAL reduce using rule 130 (empty -> .)
    GREATER_THAN    reduce using rule 130 (empty -> .)
    GREATER_THAN_EQUAL reduce using rule 130 (empty -> .)
    AND             reduce using rule 130 (empty -> .)
    OR              reduce using rule 130 (empty -> .)
    R_PARENTHESIS   reduce using rule 130 (empty -> .)
    COMMA           reduce using rule 130 (empty -> .)
    SEMICOLON       reduce using rule 130 (empty -> .)
    R_SQUARE_BRACKET reduce using rule 130 (empty -> .)
    HASTA           reduce using rule 130 (empty -> .)
    HACER           reduce using rule 130 (empty -> .)

    factorp                        shift and go to state 181
    empty                          shift and go to state 184

state 135

    (84) matriz -> cte matrizp .

    MULTIPLY        reduce using rule 84 (matriz -> cte matrizp .)
    DIVIDE          reduce using rule 84 (matriz -> cte matrizp .)
    SUM             reduce using rule 84 (matriz -> cte matrizp .)
    SUBTRACT        reduce using rule 84 (matriz -> cte matrizp .)
    EQUALS          reduce using rule 84 (matriz -> cte matrizp .)
    NOT_EQUAL       reduce using rule 84 (matriz -> cte matrizp .)
    LESS_THAN       reduce using rule 84 (matriz -> cte matrizp .)
    LESS_THAN_EQUAL reduce using rule 84 (matriz -> cte matrizp .)
    GREATER_THAN    reduce using rule 84 (matriz -> cte matrizp .)
    GREATER_THAN_EQUAL reduce using rule 84 (matriz -> cte matrizp .)
    AND             reduce using rule 84 (matriz -> cte matrizp .)
    OR              reduce using rule 84 (matriz -> cte matrizp .)
    R_PARENTHESIS   reduce using rule 84 (matriz -> cte matrizp .)
    COMMA           reduce using rule 84 (matriz -> cte matrizp .)
    SEMICOLON       reduce using rule 84 (matriz -> cte matrizp .)
    R_SQUARE_BRACKET reduce using rule 84 (matriz -> cte matrizp .)
    HASTA           reduce using rule 84 (matriz -> cte matrizp .)
    HACER           reduce using rule 84 (matriz -> cte matrizp .)


state 136

    (87) matrizp -> DETERMINANT . operation_seen apply_mat
    (83) operation_seen -> .

    MULTIPLY        reduce using rule 83 (operation_seen -> .)
    DIVIDE          reduce using rule 83 (operation_seen -> .)
    SUM             reduce using rule 83 (operation_seen -> .)
    SUBTRACT        reduce using rule 83 (operation_seen -> .)
    EQUALS          reduce using rule 83 (operation_seen -> .)
    NOT_EQUAL       reduce using rule 83 (operation_seen -> .)
    LESS_THAN       reduce using rule 83 (operation_seen -> .)
    LESS_THAN_EQUAL reduce using rule 83 (operation_seen -> .)
    GREATER_THAN    reduce using rule 83 (operation_seen -> .)
    GREATER_THAN_EQUAL reduce using rule 83 (operation_seen -> .)
    AND             reduce using rule 83 (operation_seen -> .)
    OR              reduce using rule 83 (operation_seen -> .)
    R_PARENTHESIS   reduce using rule 83 (operation_seen -> .)
    COMMA           reduce using rule 83 (operation_seen -> .)
    SEMICOLON       reduce using rule 83 (operation_seen -> .)
    R_SQUARE_BRACKET reduce using rule 83 (operation_seen -> .)
    HASTA           reduce using rule 83 (operation_seen -> .)
    HACER           reduce using rule 83 (operation_seen -> .)

    operation_seen                 shift and go to state 185

state 137

    (88) matrizp -> TRANSPOSED . operation_seen apply_mat
    (83) operation_seen -> .

    MULTIPLY        reduce using rule 83 (operation_seen -> .)
    DIVIDE          reduce using rule 83 (operation_seen -> .)
    SUM             reduce using rule 83 (operation_seen -> .)
    SUBTRACT        reduce using rule 83 (operation_seen -> .)
    EQUALS          reduce using rule 83 (operation_seen -> .)
    NOT_EQUAL       reduce using rule 83 (operation_seen -> .)
    LESS_THAN       reduce using rule 83 (operation_seen -> .)
    LESS_THAN_EQUAL reduce using rule 83 (operation_seen -> .)
    GREATER_THAN    reduce using rule 83 (operation_seen -> .)
    GREATER_THAN_EQUAL reduce using rule 83 (operation_seen -> .)
    AND             reduce using rule 83 (operation_seen -> .)
    OR              reduce using rule 83 (operation_seen -> .)
    R_PARENTHESIS   reduce using rule 83 (operation_seen -> .)
    COMMA           reduce using rule 83 (operation_seen -> .)
    SEMICOLON       reduce using rule 83 (operation_seen -> .)
    R_SQUARE_BRACKET reduce using rule 83 (operation_seen -> .)
    HASTA           reduce using rule 83 (operation_seen -> .)
    HACER           reduce using rule 83 (operation_seen -> .)

    operation_seen                 shift and go to state 186

state 138

    (89) matrizp -> INVERSE . operation_seen apply_mat
    (83) operation_seen -> .

    MULTIPLY        reduce using rule 83 (operation_seen -> .)
    DIVIDE          reduce using rule 83 (operation_seen -> .)
    SUM             reduce using rule 83 (operation_seen -> .)
    SUBTRACT        reduce using rule 83 (operation_seen -> .)
    EQUALS          reduce using rule 83 (operation_seen -> .)
    NOT_EQUAL       reduce using rule 83 (operation_seen -> .)
    LESS_THAN       reduce using rule 83 (operation_seen -> .)
    LESS_THAN_EQUAL reduce using rule 83 (operation_seen -> .)
    GREATER_THAN    reduce using rule 83 (operation_seen -> .)
    GREATER_THAN_EQUAL reduce using rule 83 (operation_seen -> .)
    AND             reduce using rule 83 (operation_seen -> .)
    OR              reduce using rule 83 (operation_seen -> .)
    R_PARENTHESIS   reduce using rule 83 (operation_seen -> .)
    COMMA           reduce using rule 83 (operation_seen -> .)
    SEMICOLON       reduce using rule 83 (operation_seen -> .)
    R_SQUARE_BRACKET reduce using rule 83 (operation_seen -> .)
    HASTA           reduce using rule 83 (operation_seen -> .)
    HACER           reduce using rule 83 (operation_seen -> .)

    operation_seen                 shift and go to state 187

state 139

    (90) matrizp -> empty .

    MULTIPLY        reduce using rule 90 (matrizp -> empty .)
    DIVIDE          reduce using rule 90 (matrizp -> empty .)
    SUM             reduce using rule 90 (matrizp -> empty .)
    SUBTRACT        reduce using rule 90 (matrizp -> empty .)
    EQUALS          reduce using rule 90 (matrizp -> empty .)
    NOT_EQUAL       reduce using rule 90 (matrizp -> empty .)
    LESS_THAN       reduce using rule 90 (matrizp -> empty .)
    LESS_THAN_EQUAL reduce using rule 90 (matrizp -> empty .)
    GREATER_THAN    reduce using rule 90 (matrizp -> empty .)
    GREATER_THAN_EQUAL reduce using rule 90 (matrizp -> empty .)
    AND             reduce using rule 90 (matrizp -> empty .)
    OR              reduce using rule 90 (matrizp -> empty .)
    R_PARENTHESIS   reduce using rule 90 (matrizp -> empty .)
    COMMA           reduce using rule 90 (matrizp -> empty .)
    SEMICOLON       reduce using rule 90 (matrizp -> empty .)
    R_SQUARE_BRACKET reduce using rule 90 (matrizp -> empty .)
    HASTA           reduce using rule 90 (matrizp -> empty .)
    HACER           reduce using rule 90 (matrizp -> empty .)


state 140

    (85) matriz -> NOT operation_seen . cte apply_not
    (92) cte -> . CTE_INT
    (93) cte -> . CTE_FLOAT
    (94) cte -> . CTE_CHAR
    (95) cte -> . llamadaFuncion
    (96) cte -> . ID operand_seen dimId
    (97) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (98) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    CTE_INT         shift and go to state 106
    CTE_FLOAT       shift and go to state 107
    CTE_CHAR        shift and go to state 108
    ID              shift and go to state 110
    L_PARENTHESIS   shift and go to state 98

    cte                            shift and go to state 188
    llamadaFuncion                 shift and go to state 109

state 141

    (96) cte -> ID operand_seen . dimId
    (50) dimId -> . is_array create_dim dim pop_array
    (51) dimId -> . is_array create_dim dim dim pop_array
    (52) dimId -> . empty
    (54) is_array -> .
    (130) empty -> .

    L_SQUARE_BRACKET reduce using rule 54 (is_array -> .)
    DETERMINANT     reduce using rule 130 (empty -> .)
    TRANSPOSED      reduce using rule 130 (empty -> .)
    INVERSE         reduce using rule 130 (empty -> .)
    MULTIPLY        reduce using rule 130 (empty -> .)
    DIVIDE          reduce using rule 130 (empty -> .)
    SUM             reduce using rule 130 (empty -> .)
    SUBTRACT        reduce using rule 130 (empty -> .)
    EQUALS          reduce using rule 130 (empty -> .)
    NOT_EQUAL       reduce using rule 130 (empty -> .)
    LESS_THAN       reduce using rule 130 (empty -> .)
    LESS_THAN_EQUAL reduce using rule 130 (empty -> .)
    GREATER_THAN    reduce using rule 130 (empty -> .)
    GREATER_THAN_EQUAL reduce using rule 130 (empty -> .)
    AND             reduce using rule 130 (empty -> .)
    OR              reduce using rule 130 (empty -> .)
    R_PARENTHESIS   reduce using rule 130 (empty -> .)
    COMMA           reduce using rule 130 (empty -> .)
    SEMICOLON       reduce using rule 130 (empty -> .)
    R_SQUARE_BRACKET reduce using rule 130 (empty -> .)
    HASTA           reduce using rule 130 (empty -> .)
    HACER           reduce using rule 130 (empty -> .)

    dimId                          shift and go to state 189
    is_array                       shift and go to state 95
    empty                          shift and go to state 96

state 142

    (98) llamadaFuncion -> ID set_func_scope . L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    L_PARENTHESIS   shift and go to state 190


state 143

    (107) lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 191


state 144

    (108) lecturap -> ID dimId . gen_input lecturapp
    (109) gen_input -> .

    COMMA           reduce using rule 109 (gen_input -> .)
    R_PARENTHESIS   reduce using rule 109 (gen_input -> .)

    gen_input                      shift and go to state 192

state 145

    (112) escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 193


state 146

    (113) escriturap -> LETRERO gen_print . escriturapp
    (116) escriturapp -> . COMMA escriturap
    (117) escriturapp -> . empty
    (130) empty -> .

    COMMA           shift and go to state 195
    R_PARENTHESIS   reduce using rule 130 (empty -> .)

    escriturapp                    shift and go to state 194
    empty                          shift and go to state 196

state 147

    (114) escriturap -> expresion gen_print . escriturapp
    (116) escriturapp -> . COMMA escriturap
    (117) escriturapp -> . empty
    (130) empty -> .

    COMMA           shift and go to state 195
    R_PARENTHESIS   reduce using rule 130 (empty -> .)

    escriturapp                    shift and go to state 197
    empty                          shift and go to state 196

state 148

    (118) decision -> SI L_PARENTHESIS expresion R_PARENTHESIS . jump_false HAZ bloque decisionp
    (119) jump_false -> .

    HAZ             reduce using rule 119 (jump_false -> .)

    jump_false                     shift and go to state 198

state 149

    (124) cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion . R_PARENTHESIS jump_false HAZ bloque update_jump_cycle

    R_PARENTHESIS   shift and go to state 199


state 150

    (127) cicloNoCondicional -> DESDE ID operand_seen dimId . ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle

    ASSIGN          shift and go to state 200


state 151

    (27) funcionp -> tipoRetorno ID create_func_scope L_PARENTHESIS parametro R_PARENTHESIS var bloque end_func funcion .

    PRINCIPAL       reduce using rule 27 (funcionp -> tipoRetorno ID create_func_scope L_PARENTHESIS parametro R_PARENTHESIS var bloque end_func funcion .)


state 152

    (33) parametrop -> COMMA tipo ID . save_param parametrop
    (32) save_param -> .

    COMMA           reduce using rule 32 (save_param -> .)
    R_PARENTHESIS   reduce using rule 32 (save_param -> .)

    save_param                     shift and go to state 201

state 153

    (8) varp -> tipo tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp .

    FUNCION         reduce using rule 8 (varp -> tipo tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp .)
    PRINCIPAL       reduce using rule 8 (varp -> tipo tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp .)
    L_CURLY_BRACKET reduce using rule 8 (varp -> tipo tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp .)


state 154

    (18) varpppp -> varp .

    FUNCION         reduce using rule 18 (varpppp -> varp .)
    PRINCIPAL       reduce using rule 18 (varpppp -> varp .)
    L_CURLY_BRACKET reduce using rule 18 (varpppp -> varp .)


state 155

    (19) varpppp -> empty .

    FUNCION         reduce using rule 19 (varpppp -> empty .)
    PRINCIPAL       reduce using rule 19 (varpppp -> empty .)
    L_CURLY_BRACKET reduce using rule 19 (varpppp -> empty .)


state 156

    (13) varpp -> COMMA ID variable_seen varppp . varpp
    (13) varpp -> . COMMA ID variable_seen varppp varpp
    (14) varpp -> . empty
    (130) empty -> .

    COMMA           shift and go to state 71
    SEMICOLON       reduce using rule 130 (empty -> .)

    varpp                          shift and go to state 202
    empty                          shift and go to state 72

state 157

    (9) varp -> tipo tipo_seen COLON ID error varppp varpp delete_type SEMICOLON varpppp .

    FUNCION         reduce using rule 9 (varp -> tipo tipo_seen COLON ID error varppp varpp delete_type SEMICOLON varpppp .)
    PRINCIPAL       reduce using rule 9 (varp -> tipo tipo_seen COLON ID error varppp varpp delete_type SEMICOLON varpppp .)
    L_CURLY_BRACKET reduce using rule 9 (varp -> tipo tipo_seen COLON ID error varppp varpp delete_type SEMICOLON varpppp .)


state 158

    (48) asignacion -> ID operand_seen dimId ASSIGN operation_seen . expresion apply_operation_assign SEMICOLON
    (59) expresion -> . relacional apply_operation_expresion expresionp
    (64) relacional -> . aritmetica apply_operation_relational relacionalp
    (73) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (78) factor -> . matriz apply_operation_factor factorp
    (84) matriz -> . cte matrizp
    (85) matriz -> . NOT operation_seen cte apply_not
    (92) cte -> . CTE_INT
    (93) cte -> . CTE_FLOAT
    (94) cte -> . CTE_CHAR
    (95) cte -> . llamadaFuncion
    (96) cte -> . ID operand_seen dimId
    (97) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (98) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    NOT             shift and go to state 105
    CTE_INT         shift and go to state 106
    CTE_FLOAT       shift and go to state 107
    CTE_CHAR        shift and go to state 108
    ID              shift and go to state 110
    L_PARENTHESIS   shift and go to state 98

    expresion                      shift and go to state 203
    relacional                     shift and go to state 100
    aritmetica                     shift and go to state 101
    factor                         shift and go to state 102
    matriz                         shift and go to state 103
    cte                            shift and go to state 104
    llamadaFuncion                 shift and go to state 109

state 159

    (50) dimId -> is_array create_dim dim . pop_array
    (51) dimId -> is_array create_dim dim . dim pop_array
    (53) pop_array -> .
    (55) dim -> . L_SQUARE_BRACKET bracket_seen expresion R_SQUARE_BRACKET bracket_seen

    ASSIGN          reduce using rule 53 (pop_array -> .)
    COMMA           reduce using rule 53 (pop_array -> .)
    R_PARENTHESIS   reduce using rule 53 (pop_array -> .)
    DETERMINANT     reduce using rule 53 (pop_array -> .)
    TRANSPOSED      reduce using rule 53 (pop_array -> .)
    INVERSE         reduce using rule 53 (pop_array -> .)
    MULTIPLY        reduce using rule 53 (pop_array -> .)
    DIVIDE          reduce using rule 53 (pop_array -> .)
    SUM             reduce using rule 53 (pop_array -> .)
    SUBTRACT        reduce using rule 53 (pop_array -> .)
    EQUALS          reduce using rule 53 (pop_array -> .)
    NOT_EQUAL       reduce using rule 53 (pop_array -> .)
    LESS_THAN       reduce using rule 53 (pop_array -> .)
    LESS_THAN_EQUAL reduce using rule 53 (pop_array -> .)
    GREATER_THAN    reduce using rule 53 (pop_array -> .)
    GREATER_THAN_EQUAL reduce using rule 53 (pop_array -> .)
    AND             reduce using rule 53 (pop_array -> .)
    OR              reduce using rule 53 (pop_array -> .)
    SEMICOLON       reduce using rule 53 (pop_array -> .)
    R_SQUARE_BRACKET reduce using rule 53 (pop_array -> .)
    HASTA           reduce using rule 53 (pop_array -> .)
    HACER           reduce using rule 53 (pop_array -> .)
    L_SQUARE_BRACKET shift and go to state 160

    dim                            shift and go to state 204
    pop_array                      shift and go to state 205

state 160

    (55) dim -> L_SQUARE_BRACKET . bracket_seen expresion R_SQUARE_BRACKET bracket_seen
    (57) bracket_seen -> .

    NOT             reduce using rule 57 (bracket_seen -> .)
    CTE_INT         reduce using rule 57 (bracket_seen -> .)
    CTE_FLOAT       reduce using rule 57 (bracket_seen -> .)
    CTE_CHAR        reduce using rule 57 (bracket_seen -> .)
    ID              reduce using rule 57 (bracket_seen -> .)
    L_PARENTHESIS   reduce using rule 57 (bracket_seen -> .)

    bracket_seen                   shift and go to state 206

state 161

    (104) funcionVacia -> ID set_func_scope L_PARENTHESIS llamadaFuncionp R_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 207


state 162

    (99) llamadaFuncionp -> expresion verify_parameter . llamadaFuncionpp
    (101) llamadaFuncionpp -> . COMMA llamadaFuncionp
    (102) llamadaFuncionpp -> . empty
    (130) empty -> .

    COMMA           shift and go to state 209
    R_PARENTHESIS   reduce using rule 130 (empty -> .)

    llamadaFuncionpp               shift and go to state 208
    empty                          shift and go to state 210

state 163

    (97) cte -> L_PARENTHESIS operation_seen expresion . R_PARENTHESIS operation_seen

    R_PARENTHESIS   shift and go to state 211


state 164

    (106) regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .

    ID              reduce using rule 106 (regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .)
    REGRESA         reduce using rule 106 (regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .)
    LECTURA         reduce using rule 106 (regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .)
    ESCRIBE         reduce using rule 106 (regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .)
    SI              reduce using rule 106 (regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .)
    MIENTRAS        reduce using rule 106 (regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .)
    DESDE           reduce using rule 106 (regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .)
    R_CURLY_BRACKET reduce using rule 106 (regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .)


state 165

    (59) expresion -> relacional apply_operation_expresion expresionp .

    R_PARENTHESIS   reduce using rule 59 (expresion -> relacional apply_operation_expresion expresionp .)
    COMMA           reduce using rule 59 (expresion -> relacional apply_operation_expresion expresionp .)
    SEMICOLON       reduce using rule 59 (expresion -> relacional apply_operation_expresion expresionp .)
    R_SQUARE_BRACKET reduce using rule 59 (expresion -> relacional apply_operation_expresion expresionp .)
    HASTA           reduce using rule 59 (expresion -> relacional apply_operation_expresion expresionp .)
    HACER           reduce using rule 59 (expresion -> relacional apply_operation_expresion expresionp .)


state 166

    (60) expresionp -> AND . operation_seen expresion
    (83) operation_seen -> .

    NOT             reduce using rule 83 (operation_seen -> .)
    CTE_INT         reduce using rule 83 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 83 (operation_seen -> .)
    CTE_CHAR        reduce using rule 83 (operation_seen -> .)
    ID              reduce using rule 83 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 83 (operation_seen -> .)

    operation_seen                 shift and go to state 212

state 167

    (61) expresionp -> OR . operation_seen expresion
    (83) operation_seen -> .

    NOT             reduce using rule 83 (operation_seen -> .)
    CTE_INT         reduce using rule 83 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 83 (operation_seen -> .)
    CTE_CHAR        reduce using rule 83 (operation_seen -> .)
    ID              reduce using rule 83 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 83 (operation_seen -> .)

    operation_seen                 shift and go to state 213

state 168

    (62) expresionp -> empty .

    R_PARENTHESIS   reduce using rule 62 (expresionp -> empty .)
    COMMA           reduce using rule 62 (expresionp -> empty .)
    SEMICOLON       reduce using rule 62 (expresionp -> empty .)
    R_SQUARE_BRACKET reduce using rule 62 (expresionp -> empty .)
    HASTA           reduce using rule 62 (expresionp -> empty .)
    HACER           reduce using rule 62 (expresionp -> empty .)


state 169

    (64) relacional -> aritmetica apply_operation_relational relacionalp .

    AND             reduce using rule 64 (relacional -> aritmetica apply_operation_relational relacionalp .)
    OR              reduce using rule 64 (relacional -> aritmetica apply_operation_relational relacionalp .)
    R_PARENTHESIS   reduce using rule 64 (relacional -> aritmetica apply_operation_relational relacionalp .)
    COMMA           reduce using rule 64 (relacional -> aritmetica apply_operation_relational relacionalp .)
    SEMICOLON       reduce using rule 64 (relacional -> aritmetica apply_operation_relational relacionalp .)
    R_SQUARE_BRACKET reduce using rule 64 (relacional -> aritmetica apply_operation_relational relacionalp .)
    HASTA           reduce using rule 64 (relacional -> aritmetica apply_operation_relational relacionalp .)
    HACER           reduce using rule 64 (relacional -> aritmetica apply_operation_relational relacionalp .)


state 170

    (65) relacionalp -> EQUALS . operation_seen relacional
    (83) operation_seen -> .

    NOT             reduce using rule 83 (operation_seen -> .)
    CTE_INT         reduce using rule 83 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 83 (operation_seen -> .)
    CTE_CHAR        reduce using rule 83 (operation_seen -> .)
    ID              reduce using rule 83 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 83 (operation_seen -> .)

    operation_seen                 shift and go to state 214

state 171

    (66) relacionalp -> NOT_EQUAL . operation_seen relacional
    (83) operation_seen -> .

    NOT             reduce using rule 83 (operation_seen -> .)
    CTE_INT         reduce using rule 83 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 83 (operation_seen -> .)
    CTE_CHAR        reduce using rule 83 (operation_seen -> .)
    ID              reduce using rule 83 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 83 (operation_seen -> .)

    operation_seen                 shift and go to state 215

state 172

    (67) relacionalp -> LESS_THAN . operation_seen relacional
    (83) operation_seen -> .

    NOT             reduce using rule 83 (operation_seen -> .)
    CTE_INT         reduce using rule 83 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 83 (operation_seen -> .)
    CTE_CHAR        reduce using rule 83 (operation_seen -> .)
    ID              reduce using rule 83 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 83 (operation_seen -> .)

    operation_seen                 shift and go to state 216

state 173

    (68) relacionalp -> LESS_THAN_EQUAL . operation_seen relacional
    (83) operation_seen -> .

    NOT             reduce using rule 83 (operation_seen -> .)
    CTE_INT         reduce using rule 83 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 83 (operation_seen -> .)
    CTE_CHAR        reduce using rule 83 (operation_seen -> .)
    ID              reduce using rule 83 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 83 (operation_seen -> .)

    operation_seen                 shift and go to state 217

state 174

    (69) relacionalp -> GREATER_THAN . operation_seen relacional
    (83) operation_seen -> .

    NOT             reduce using rule 83 (operation_seen -> .)
    CTE_INT         reduce using rule 83 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 83 (operation_seen -> .)
    CTE_CHAR        reduce using rule 83 (operation_seen -> .)
    ID              reduce using rule 83 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 83 (operation_seen -> .)

    operation_seen                 shift and go to state 218

state 175

    (70) relacionalp -> GREATER_THAN_EQUAL . operation_seen relacional
    (83) operation_seen -> .

    NOT             reduce using rule 83 (operation_seen -> .)
    CTE_INT         reduce using rule 83 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 83 (operation_seen -> .)
    CTE_CHAR        reduce using rule 83 (operation_seen -> .)
    ID              reduce using rule 83 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 83 (operation_seen -> .)

    operation_seen                 shift and go to state 219

state 176

    (71) relacionalp -> empty .

    AND             reduce using rule 71 (relacionalp -> empty .)
    OR              reduce using rule 71 (relacionalp -> empty .)
    R_PARENTHESIS   reduce using rule 71 (relacionalp -> empty .)
    COMMA           reduce using rule 71 (relacionalp -> empty .)
    SEMICOLON       reduce using rule 71 (relacionalp -> empty .)
    R_SQUARE_BRACKET reduce using rule 71 (relacionalp -> empty .)
    HASTA           reduce using rule 71 (relacionalp -> empty .)
    HACER           reduce using rule 71 (relacionalp -> empty .)


state 177

    (73) aritmetica -> factor apply_operation_aritmetica aritmeticap .

    EQUALS          reduce using rule 73 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    NOT_EQUAL       reduce using rule 73 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    LESS_THAN       reduce using rule 73 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    LESS_THAN_EQUAL reduce using rule 73 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    GREATER_THAN    reduce using rule 73 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    GREATER_THAN_EQUAL reduce using rule 73 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    AND             reduce using rule 73 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    OR              reduce using rule 73 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    R_PARENTHESIS   reduce using rule 73 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    COMMA           reduce using rule 73 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    SEMICOLON       reduce using rule 73 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    R_SQUARE_BRACKET reduce using rule 73 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    HASTA           reduce using rule 73 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    HACER           reduce using rule 73 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)


state 178

    (74) aritmeticap -> SUM . operation_seen aritmetica
    (83) operation_seen -> .

    NOT             reduce using rule 83 (operation_seen -> .)
    CTE_INT         reduce using rule 83 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 83 (operation_seen -> .)
    CTE_CHAR        reduce using rule 83 (operation_seen -> .)
    ID              reduce using rule 83 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 83 (operation_seen -> .)

    operation_seen                 shift and go to state 220

state 179

    (75) aritmeticap -> SUBTRACT . operation_seen aritmetica
    (83) operation_seen -> .

    NOT             reduce using rule 83 (operation_seen -> .)
    CTE_INT         reduce using rule 83 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 83 (operation_seen -> .)
    CTE_CHAR        reduce using rule 83 (operation_seen -> .)
    ID              reduce using rule 83 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 83 (operation_seen -> .)

    operation_seen                 shift and go to state 221

state 180

    (76) aritmeticap -> empty .

    EQUALS          reduce using rule 76 (aritmeticap -> empty .)
    NOT_EQUAL       reduce using rule 76 (aritmeticap -> empty .)
    LESS_THAN       reduce using rule 76 (aritmeticap -> empty .)
    LESS_THAN_EQUAL reduce using rule 76 (aritmeticap -> empty .)
    GREATER_THAN    reduce using rule 76 (aritmeticap -> empty .)
    GREATER_THAN_EQUAL reduce using rule 76 (aritmeticap -> empty .)
    AND             reduce using rule 76 (aritmeticap -> empty .)
    OR              reduce using rule 76 (aritmeticap -> empty .)
    R_PARENTHESIS   reduce using rule 76 (aritmeticap -> empty .)
    COMMA           reduce using rule 76 (aritmeticap -> empty .)
    SEMICOLON       reduce using rule 76 (aritmeticap -> empty .)
    R_SQUARE_BRACKET reduce using rule 76 (aritmeticap -> empty .)
    HASTA           reduce using rule 76 (aritmeticap -> empty .)
    HACER           reduce using rule 76 (aritmeticap -> empty .)


state 181

    (78) factor -> matriz apply_operation_factor factorp .

    SUM             reduce using rule 78 (factor -> matriz apply_operation_factor factorp .)
    SUBTRACT        reduce using rule 78 (factor -> matriz apply_operation_factor factorp .)
    EQUALS          reduce using rule 78 (factor -> matriz apply_operation_factor factorp .)
    NOT_EQUAL       reduce using rule 78 (factor -> matriz apply_operation_factor factorp .)
    LESS_THAN       reduce using rule 78 (factor -> matriz apply_operation_factor factorp .)
    LESS_THAN_EQUAL reduce using rule 78 (factor -> matriz apply_operation_factor factorp .)
    GREATER_THAN    reduce using rule 78 (factor -> matriz apply_operation_factor factorp .)
    GREATER_THAN_EQUAL reduce using rule 78 (factor -> matriz apply_operation_factor factorp .)
    AND             reduce using rule 78 (factor -> matriz apply_operation_factor factorp .)
    OR              reduce using rule 78 (factor -> matriz apply_operation_factor factorp .)
    R_PARENTHESIS   reduce using rule 78 (factor -> matriz apply_operation_factor factorp .)
    COMMA           reduce using rule 78 (factor -> matriz apply_operation_factor factorp .)
    SEMICOLON       reduce using rule 78 (factor -> matriz apply_operation_factor factorp .)
    R_SQUARE_BRACKET reduce using rule 78 (factor -> matriz apply_operation_factor factorp .)
    HASTA           reduce using rule 78 (factor -> matriz apply_operation_factor factorp .)
    HACER           reduce using rule 78 (factor -> matriz apply_operation_factor factorp .)


state 182

    (79) factorp -> MULTIPLY . operation_seen factor
    (83) operation_seen -> .

    NOT             reduce using rule 83 (operation_seen -> .)
    CTE_INT         reduce using rule 83 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 83 (operation_seen -> .)
    CTE_CHAR        reduce using rule 83 (operation_seen -> .)
    ID              reduce using rule 83 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 83 (operation_seen -> .)

    operation_seen                 shift and go to state 222

state 183

    (80) factorp -> DIVIDE . operation_seen factor
    (83) operation_seen -> .

    NOT             reduce using rule 83 (operation_seen -> .)
    CTE_INT         reduce using rule 83 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 83 (operation_seen -> .)
    CTE_CHAR        reduce using rule 83 (operation_seen -> .)
    ID              reduce using rule 83 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 83 (operation_seen -> .)

    operation_seen                 shift and go to state 223

state 184

    (81) factorp -> empty .

    SUM             reduce using rule 81 (factorp -> empty .)
    SUBTRACT        reduce using rule 81 (factorp -> empty .)
    EQUALS          reduce using rule 81 (factorp -> empty .)
    NOT_EQUAL       reduce using rule 81 (factorp -> empty .)
    LESS_THAN       reduce using rule 81 (factorp -> empty .)
    LESS_THAN_EQUAL reduce using rule 81 (factorp -> empty .)
    GREATER_THAN    reduce using rule 81 (factorp -> empty .)
    GREATER_THAN_EQUAL reduce using rule 81 (factorp -> empty .)
    AND             reduce using rule 81 (factorp -> empty .)
    OR              reduce using rule 81 (factorp -> empty .)
    R_PARENTHESIS   reduce using rule 81 (factorp -> empty .)
    COMMA           reduce using rule 81 (factorp -> empty .)
    SEMICOLON       reduce using rule 81 (factorp -> empty .)
    R_SQUARE_BRACKET reduce using rule 81 (factorp -> empty .)
    HASTA           reduce using rule 81 (factorp -> empty .)
    HACER           reduce using rule 81 (factorp -> empty .)


state 185

    (87) matrizp -> DETERMINANT operation_seen . apply_mat
    (91) apply_mat -> .

    MULTIPLY        reduce using rule 91 (apply_mat -> .)
    DIVIDE          reduce using rule 91 (apply_mat -> .)
    SUM             reduce using rule 91 (apply_mat -> .)
    SUBTRACT        reduce using rule 91 (apply_mat -> .)
    EQUALS          reduce using rule 91 (apply_mat -> .)
    NOT_EQUAL       reduce using rule 91 (apply_mat -> .)
    LESS_THAN       reduce using rule 91 (apply_mat -> .)
    LESS_THAN_EQUAL reduce using rule 91 (apply_mat -> .)
    GREATER_THAN    reduce using rule 91 (apply_mat -> .)
    GREATER_THAN_EQUAL reduce using rule 91 (apply_mat -> .)
    AND             reduce using rule 91 (apply_mat -> .)
    OR              reduce using rule 91 (apply_mat -> .)
    R_PARENTHESIS   reduce using rule 91 (apply_mat -> .)
    COMMA           reduce using rule 91 (apply_mat -> .)
    SEMICOLON       reduce using rule 91 (apply_mat -> .)
    R_SQUARE_BRACKET reduce using rule 91 (apply_mat -> .)
    HASTA           reduce using rule 91 (apply_mat -> .)
    HACER           reduce using rule 91 (apply_mat -> .)

    apply_mat                      shift and go to state 224

state 186

    (88) matrizp -> TRANSPOSED operation_seen . apply_mat
    (91) apply_mat -> .

    MULTIPLY        reduce using rule 91 (apply_mat -> .)
    DIVIDE          reduce using rule 91 (apply_mat -> .)
    SUM             reduce using rule 91 (apply_mat -> .)
    SUBTRACT        reduce using rule 91 (apply_mat -> .)
    EQUALS          reduce using rule 91 (apply_mat -> .)
    NOT_EQUAL       reduce using rule 91 (apply_mat -> .)
    LESS_THAN       reduce using rule 91 (apply_mat -> .)
    LESS_THAN_EQUAL reduce using rule 91 (apply_mat -> .)
    GREATER_THAN    reduce using rule 91 (apply_mat -> .)
    GREATER_THAN_EQUAL reduce using rule 91 (apply_mat -> .)
    AND             reduce using rule 91 (apply_mat -> .)
    OR              reduce using rule 91 (apply_mat -> .)
    R_PARENTHESIS   reduce using rule 91 (apply_mat -> .)
    COMMA           reduce using rule 91 (apply_mat -> .)
    SEMICOLON       reduce using rule 91 (apply_mat -> .)
    R_SQUARE_BRACKET reduce using rule 91 (apply_mat -> .)
    HASTA           reduce using rule 91 (apply_mat -> .)
    HACER           reduce using rule 91 (apply_mat -> .)

    apply_mat                      shift and go to state 225

state 187

    (89) matrizp -> INVERSE operation_seen . apply_mat
    (91) apply_mat -> .

    MULTIPLY        reduce using rule 91 (apply_mat -> .)
    DIVIDE          reduce using rule 91 (apply_mat -> .)
    SUM             reduce using rule 91 (apply_mat -> .)
    SUBTRACT        reduce using rule 91 (apply_mat -> .)
    EQUALS          reduce using rule 91 (apply_mat -> .)
    NOT_EQUAL       reduce using rule 91 (apply_mat -> .)
    LESS_THAN       reduce using rule 91 (apply_mat -> .)
    LESS_THAN_EQUAL reduce using rule 91 (apply_mat -> .)
    GREATER_THAN    reduce using rule 91 (apply_mat -> .)
    GREATER_THAN_EQUAL reduce using rule 91 (apply_mat -> .)
    AND             reduce using rule 91 (apply_mat -> .)
    OR              reduce using rule 91 (apply_mat -> .)
    R_PARENTHESIS   reduce using rule 91 (apply_mat -> .)
    COMMA           reduce using rule 91 (apply_mat -> .)
    SEMICOLON       reduce using rule 91 (apply_mat -> .)
    R_SQUARE_BRACKET reduce using rule 91 (apply_mat -> .)
    HASTA           reduce using rule 91 (apply_mat -> .)
    HACER           reduce using rule 91 (apply_mat -> .)

    apply_mat                      shift and go to state 226

state 188

    (85) matriz -> NOT operation_seen cte . apply_not
    (86) apply_not -> .

    MULTIPLY        reduce using rule 86 (apply_not -> .)
    DIVIDE          reduce using rule 86 (apply_not -> .)
    SUM             reduce using rule 86 (apply_not -> .)
    SUBTRACT        reduce using rule 86 (apply_not -> .)
    EQUALS          reduce using rule 86 (apply_not -> .)
    NOT_EQUAL       reduce using rule 86 (apply_not -> .)
    LESS_THAN       reduce using rule 86 (apply_not -> .)
    LESS_THAN_EQUAL reduce using rule 86 (apply_not -> .)
    GREATER_THAN    reduce using rule 86 (apply_not -> .)
    GREATER_THAN_EQUAL reduce using rule 86 (apply_not -> .)
    AND             reduce using rule 86 (apply_not -> .)
    OR              reduce using rule 86 (apply_not -> .)
    R_PARENTHESIS   reduce using rule 86 (apply_not -> .)
    COMMA           reduce using rule 86 (apply_not -> .)
    SEMICOLON       reduce using rule 86 (apply_not -> .)
    R_SQUARE_BRACKET reduce using rule 86 (apply_not -> .)
    HASTA           reduce using rule 86 (apply_not -> .)
    HACER           reduce using rule 86 (apply_not -> .)

    apply_not                      shift and go to state 227

state 189

    (96) cte -> ID operand_seen dimId .

    DETERMINANT     reduce using rule 96 (cte -> ID operand_seen dimId .)
    TRANSPOSED      reduce using rule 96 (cte -> ID operand_seen dimId .)
    INVERSE         reduce using rule 96 (cte -> ID operand_seen dimId .)
    MULTIPLY        reduce using rule 96 (cte -> ID operand_seen dimId .)
    DIVIDE          reduce using rule 96 (cte -> ID operand_seen dimId .)
    SUM             reduce using rule 96 (cte -> ID operand_seen dimId .)
    SUBTRACT        reduce using rule 96 (cte -> ID operand_seen dimId .)
    EQUALS          reduce using rule 96 (cte -> ID operand_seen dimId .)
    NOT_EQUAL       reduce using rule 96 (cte -> ID operand_seen dimId .)
    LESS_THAN       reduce using rule 96 (cte -> ID operand_seen dimId .)
    LESS_THAN_EQUAL reduce using rule 96 (cte -> ID operand_seen dimId .)
    GREATER_THAN    reduce using rule 96 (cte -> ID operand_seen dimId .)
    GREATER_THAN_EQUAL reduce using rule 96 (cte -> ID operand_seen dimId .)
    AND             reduce using rule 96 (cte -> ID operand_seen dimId .)
    OR              reduce using rule 96 (cte -> ID operand_seen dimId .)
    R_PARENTHESIS   reduce using rule 96 (cte -> ID operand_seen dimId .)
    COMMA           reduce using rule 96 (cte -> ID operand_seen dimId .)
    SEMICOLON       reduce using rule 96 (cte -> ID operand_seen dimId .)
    R_SQUARE_BRACKET reduce using rule 96 (cte -> ID operand_seen dimId .)
    HASTA           reduce using rule 96 (cte -> ID operand_seen dimId .)
    HACER           reduce using rule 96 (cte -> ID operand_seen dimId .)


state 190

    (98) llamadaFuncion -> ID set_func_scope L_PARENTHESIS . operation_seen llamadaFuncionp R_PARENTHESIS operation_seen
    (83) operation_seen -> .

    NOT             reduce using rule 83 (operation_seen -> .)
    CTE_INT         reduce using rule 83 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 83 (operation_seen -> .)
    CTE_CHAR        reduce using rule 83 (operation_seen -> .)
    ID              reduce using rule 83 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 83 (operation_seen -> .)
    R_PARENTHESIS   reduce using rule 83 (operation_seen -> .)

    operation_seen                 shift and go to state 228

state 191

    (107) lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .

    ID              reduce using rule 107 (lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .)
    REGRESA         reduce using rule 107 (lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .)
    LECTURA         reduce using rule 107 (lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .)
    ESCRIBE         reduce using rule 107 (lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .)
    SI              reduce using rule 107 (lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .)
    MIENTRAS        reduce using rule 107 (lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .)
    DESDE           reduce using rule 107 (lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .)
    R_CURLY_BRACKET reduce using rule 107 (lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .)


state 192

    (108) lecturap -> ID dimId gen_input . lecturapp
    (110) lecturapp -> . COMMA lecturap
    (111) lecturapp -> . empty
    (130) empty -> .

    COMMA           shift and go to state 230
    R_PARENTHESIS   reduce using rule 130 (empty -> .)

    lecturapp                      shift and go to state 229
    empty                          shift and go to state 231

state 193

    (112) escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .

    ID              reduce using rule 112 (escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .)
    REGRESA         reduce using rule 112 (escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .)
    LECTURA         reduce using rule 112 (escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .)
    ESCRIBE         reduce using rule 112 (escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .)
    SI              reduce using rule 112 (escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .)
    MIENTRAS        reduce using rule 112 (escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .)
    DESDE           reduce using rule 112 (escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .)
    R_CURLY_BRACKET reduce using rule 112 (escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .)


state 194

    (113) escriturap -> LETRERO gen_print escriturapp .

    R_PARENTHESIS   reduce using rule 113 (escriturap -> LETRERO gen_print escriturapp .)


state 195

    (116) escriturapp -> COMMA . escriturap
    (113) escriturap -> . LETRERO gen_print escriturapp
    (114) escriturap -> . expresion gen_print escriturapp
    (59) expresion -> . relacional apply_operation_expresion expresionp
    (64) relacional -> . aritmetica apply_operation_relational relacionalp
    (73) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (78) factor -> . matriz apply_operation_factor factorp
    (84) matriz -> . cte matrizp
    (85) matriz -> . NOT operation_seen cte apply_not
    (92) cte -> . CTE_INT
    (93) cte -> . CTE_FLOAT
    (94) cte -> . CTE_CHAR
    (95) cte -> . llamadaFuncion
    (96) cte -> . ID operand_seen dimId
    (97) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (98) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    LETRERO         shift and go to state 114
    NOT             shift and go to state 105
    CTE_INT         shift and go to state 106
    CTE_FLOAT       shift and go to state 107
    CTE_CHAR        shift and go to state 108
    ID              shift and go to state 110
    L_PARENTHESIS   shift and go to state 98

    escriturap                     shift and go to state 232
    expresion                      shift and go to state 115
    relacional                     shift and go to state 100
    aritmetica                     shift and go to state 101
    factor                         shift and go to state 102
    matriz                         shift and go to state 103
    cte                            shift and go to state 104
    llamadaFuncion                 shift and go to state 109

state 196

    (117) escriturapp -> empty .

    R_PARENTHESIS   reduce using rule 117 (escriturapp -> empty .)


state 197

    (114) escriturap -> expresion gen_print escriturapp .

    R_PARENTHESIS   reduce using rule 114 (escriturap -> expresion gen_print escriturapp .)


state 198

    (118) decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false . HAZ bloque decisionp

    HAZ             shift and go to state 233


state 199

    (124) cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS . jump_false HAZ bloque update_jump_cycle
    (119) jump_false -> .

    HAZ             reduce using rule 119 (jump_false -> .)

    jump_false                     shift and go to state 234

state 200

    (127) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN . operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle
    (83) operation_seen -> .

    NOT             reduce using rule 83 (operation_seen -> .)
    CTE_INT         reduce using rule 83 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 83 (operation_seen -> .)
    CTE_CHAR        reduce using rule 83 (operation_seen -> .)
    ID              reduce using rule 83 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 83 (operation_seen -> .)

    operation_seen                 shift and go to state 235

state 201

    (33) parametrop -> COMMA tipo ID save_param . parametrop
    (33) parametrop -> . COMMA tipo ID save_param parametrop
    (34) parametrop -> . empty
    (130) empty -> .

    COMMA           shift and go to state 88
    R_PARENTHESIS   reduce using rule 130 (empty -> .)

    parametrop                     shift and go to state 236
    empty                          shift and go to state 89

state 202

    (13) varpp -> COMMA ID variable_seen varppp varpp .

    SEMICOLON       reduce using rule 13 (varpp -> COMMA ID variable_seen varppp varpp .)


state 203

    (48) asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion . apply_operation_assign SEMICOLON
    (58) apply_operation_assign -> .

    SEMICOLON       reduce using rule 58 (apply_operation_assign -> .)

    apply_operation_assign         shift and go to state 237

state 204

    (51) dimId -> is_array create_dim dim dim . pop_array
    (53) pop_array -> .

    ASSIGN          reduce using rule 53 (pop_array -> .)
    COMMA           reduce using rule 53 (pop_array -> .)
    R_PARENTHESIS   reduce using rule 53 (pop_array -> .)
    DETERMINANT     reduce using rule 53 (pop_array -> .)
    TRANSPOSED      reduce using rule 53 (pop_array -> .)
    INVERSE         reduce using rule 53 (pop_array -> .)
    MULTIPLY        reduce using rule 53 (pop_array -> .)
    DIVIDE          reduce using rule 53 (pop_array -> .)
    SUM             reduce using rule 53 (pop_array -> .)
    SUBTRACT        reduce using rule 53 (pop_array -> .)
    EQUALS          reduce using rule 53 (pop_array -> .)
    NOT_EQUAL       reduce using rule 53 (pop_array -> .)
    LESS_THAN       reduce using rule 53 (pop_array -> .)
    LESS_THAN_EQUAL reduce using rule 53 (pop_array -> .)
    GREATER_THAN    reduce using rule 53 (pop_array -> .)
    GREATER_THAN_EQUAL reduce using rule 53 (pop_array -> .)
    AND             reduce using rule 53 (pop_array -> .)
    OR              reduce using rule 53 (pop_array -> .)
    SEMICOLON       reduce using rule 53 (pop_array -> .)
    R_SQUARE_BRACKET reduce using rule 53 (pop_array -> .)
    HASTA           reduce using rule 53 (pop_array -> .)
    HACER           reduce using rule 53 (pop_array -> .)

    pop_array                      shift and go to state 238

state 205

    (50) dimId -> is_array create_dim dim pop_array .

    ASSIGN          reduce using rule 50 (dimId -> is_array create_dim dim pop_array .)
    COMMA           reduce using rule 50 (dimId -> is_array create_dim dim pop_array .)
    R_PARENTHESIS   reduce using rule 50 (dimId -> is_array create_dim dim pop_array .)
    DETERMINANT     reduce using rule 50 (dimId -> is_array create_dim dim pop_array .)
    TRANSPOSED      reduce using rule 50 (dimId -> is_array create_dim dim pop_array .)
    INVERSE         reduce using rule 50 (dimId -> is_array create_dim dim pop_array .)
    MULTIPLY        reduce using rule 50 (dimId -> is_array create_dim dim pop_array .)
    DIVIDE          reduce using rule 50 (dimId -> is_array create_dim dim pop_array .)
    SUM             reduce using rule 50 (dimId -> is_array create_dim dim pop_array .)
    SUBTRACT        reduce using rule 50 (dimId -> is_array create_dim dim pop_array .)
    EQUALS          reduce using rule 50 (dimId -> is_array create_dim dim pop_array .)
    NOT_EQUAL       reduce using rule 50 (dimId -> is_array create_dim dim pop_array .)
    LESS_THAN       reduce using rule 50 (dimId -> is_array create_dim dim pop_array .)
    LESS_THAN_EQUAL reduce using rule 50 (dimId -> is_array create_dim dim pop_array .)
    GREATER_THAN    reduce using rule 50 (dimId -> is_array create_dim dim pop_array .)
    GREATER_THAN_EQUAL reduce using rule 50 (dimId -> is_array create_dim dim pop_array .)
    AND             reduce using rule 50 (dimId -> is_array create_dim dim pop_array .)
    OR              reduce using rule 50 (dimId -> is_array create_dim dim pop_array .)
    SEMICOLON       reduce using rule 50 (dimId -> is_array create_dim dim pop_array .)
    R_SQUARE_BRACKET reduce using rule 50 (dimId -> is_array create_dim dim pop_array .)
    HASTA           reduce using rule 50 (dimId -> is_array create_dim dim pop_array .)
    HACER           reduce using rule 50 (dimId -> is_array create_dim dim pop_array .)


state 206

    (55) dim -> L_SQUARE_BRACKET bracket_seen . expresion R_SQUARE_BRACKET bracket_seen
    (59) expresion -> . relacional apply_operation_expresion expresionp
    (64) relacional -> . aritmetica apply_operation_relational relacionalp
    (73) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (78) factor -> . matriz apply_operation_factor factorp
    (84) matriz -> . cte matrizp
    (85) matriz -> . NOT operation_seen cte apply_not
    (92) cte -> . CTE_INT
    (93) cte -> . CTE_FLOAT
    (94) cte -> . CTE_CHAR
    (95) cte -> . llamadaFuncion
    (96) cte -> . ID operand_seen dimId
    (97) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (98) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    NOT             shift and go to state 105
    CTE_INT         shift and go to state 106
    CTE_FLOAT       shift and go to state 107
    CTE_CHAR        shift and go to state 108
    ID              shift and go to state 110
    L_PARENTHESIS   shift and go to state 98

    expresion                      shift and go to state 239
    relacional                     shift and go to state 100
    aritmetica                     shift and go to state 101
    factor                         shift and go to state 102
    matriz                         shift and go to state 103
    cte                            shift and go to state 104
    llamadaFuncion                 shift and go to state 109

state 207

    (104) funcionVacia -> ID set_func_scope L_PARENTHESIS llamadaFuncionp R_PARENTHESIS SEMICOLON .

    ID              reduce using rule 104 (funcionVacia -> ID set_func_scope L_PARENTHESIS llamadaFuncionp R_PARENTHESIS SEMICOLON .)
    REGRESA         reduce using rule 104 (funcionVacia -> ID set_func_scope L_PARENTHESIS llamadaFuncionp R_PARENTHESIS SEMICOLON .)
    LECTURA         reduce using rule 104 (funcionVacia -> ID set_func_scope L_PARENTHESIS llamadaFuncionp R_PARENTHESIS SEMICOLON .)
    ESCRIBE         reduce using rule 104 (funcionVacia -> ID set_func_scope L_PARENTHESIS llamadaFuncionp R_PARENTHESIS SEMICOLON .)
    SI              reduce using rule 104 (funcionVacia -> ID set_func_scope L_PARENTHESIS llamadaFuncionp R_PARENTHESIS SEMICOLON .)
    MIENTRAS        reduce using rule 104 (funcionVacia -> ID set_func_scope L_PARENTHESIS llamadaFuncionp R_PARENTHESIS SEMICOLON .)
    DESDE           reduce using rule 104 (funcionVacia -> ID set_func_scope L_PARENTHESIS llamadaFuncionp R_PARENTHESIS SEMICOLON .)
    R_CURLY_BRACKET reduce using rule 104 (funcionVacia -> ID set_func_scope L_PARENTHESIS llamadaFuncionp R_PARENTHESIS SEMICOLON .)


state 208

    (99) llamadaFuncionp -> expresion verify_parameter llamadaFuncionpp .

    R_PARENTHESIS   reduce using rule 99 (llamadaFuncionp -> expresion verify_parameter llamadaFuncionpp .)


state 209

    (101) llamadaFuncionpp -> COMMA . llamadaFuncionp
    (99) llamadaFuncionp -> . expresion verify_parameter llamadaFuncionpp
    (100) llamadaFuncionp -> . empty
    (59) expresion -> . relacional apply_operation_expresion expresionp
    (130) empty -> .
    (64) relacional -> . aritmetica apply_operation_relational relacionalp
    (73) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (78) factor -> . matriz apply_operation_factor factorp
    (84) matriz -> . cte matrizp
    (85) matriz -> . NOT operation_seen cte apply_not
    (92) cte -> . CTE_INT
    (93) cte -> . CTE_FLOAT
    (94) cte -> . CTE_CHAR
    (95) cte -> . llamadaFuncion
    (96) cte -> . ID operand_seen dimId
    (97) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (98) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    R_PARENTHESIS   reduce using rule 130 (empty -> .)
    NOT             shift and go to state 105
    CTE_INT         shift and go to state 106
    CTE_FLOAT       shift and go to state 107
    CTE_CHAR        shift and go to state 108
    ID              shift and go to state 110
    L_PARENTHESIS   shift and go to state 98

    llamadaFuncionp                shift and go to state 240
    expresion                      shift and go to state 127
    empty                          shift and go to state 128
    relacional                     shift and go to state 100
    aritmetica                     shift and go to state 101
    factor                         shift and go to state 102
    matriz                         shift and go to state 103
    cte                            shift and go to state 104
    llamadaFuncion                 shift and go to state 109

state 210

    (102) llamadaFuncionpp -> empty .

    R_PARENTHESIS   reduce using rule 102 (llamadaFuncionpp -> empty .)


state 211

    (97) cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS . operation_seen
    (83) operation_seen -> .

    DETERMINANT     reduce using rule 83 (operation_seen -> .)
    TRANSPOSED      reduce using rule 83 (operation_seen -> .)
    INVERSE         reduce using rule 83 (operation_seen -> .)
    MULTIPLY        reduce using rule 83 (operation_seen -> .)
    DIVIDE          reduce using rule 83 (operation_seen -> .)
    SUM             reduce using rule 83 (operation_seen -> .)
    SUBTRACT        reduce using rule 83 (operation_seen -> .)
    EQUALS          reduce using rule 83 (operation_seen -> .)
    NOT_EQUAL       reduce using rule 83 (operation_seen -> .)
    LESS_THAN       reduce using rule 83 (operation_seen -> .)
    LESS_THAN_EQUAL reduce using rule 83 (operation_seen -> .)
    GREATER_THAN    reduce using rule 83 (operation_seen -> .)
    GREATER_THAN_EQUAL reduce using rule 83 (operation_seen -> .)
    AND             reduce using rule 83 (operation_seen -> .)
    OR              reduce using rule 83 (operation_seen -> .)
    R_PARENTHESIS   reduce using rule 83 (operation_seen -> .)
    COMMA           reduce using rule 83 (operation_seen -> .)
    SEMICOLON       reduce using rule 83 (operation_seen -> .)
    R_SQUARE_BRACKET reduce using rule 83 (operation_seen -> .)
    HASTA           reduce using rule 83 (operation_seen -> .)
    HACER           reduce using rule 83 (operation_seen -> .)

    operation_seen                 shift and go to state 241

state 212

    (60) expresionp -> AND operation_seen . expresion
    (59) expresion -> . relacional apply_operation_expresion expresionp
    (64) relacional -> . aritmetica apply_operation_relational relacionalp
    (73) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (78) factor -> . matriz apply_operation_factor factorp
    (84) matriz -> . cte matrizp
    (85) matriz -> . NOT operation_seen cte apply_not
    (92) cte -> . CTE_INT
    (93) cte -> . CTE_FLOAT
    (94) cte -> . CTE_CHAR
    (95) cte -> . llamadaFuncion
    (96) cte -> . ID operand_seen dimId
    (97) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (98) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    NOT             shift and go to state 105
    CTE_INT         shift and go to state 106
    CTE_FLOAT       shift and go to state 107
    CTE_CHAR        shift and go to state 108
    ID              shift and go to state 110
    L_PARENTHESIS   shift and go to state 98

    expresion                      shift and go to state 242
    relacional                     shift and go to state 100
    aritmetica                     shift and go to state 101
    factor                         shift and go to state 102
    matriz                         shift and go to state 103
    cte                            shift and go to state 104
    llamadaFuncion                 shift and go to state 109

state 213

    (61) expresionp -> OR operation_seen . expresion
    (59) expresion -> . relacional apply_operation_expresion expresionp
    (64) relacional -> . aritmetica apply_operation_relational relacionalp
    (73) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (78) factor -> . matriz apply_operation_factor factorp
    (84) matriz -> . cte matrizp
    (85) matriz -> . NOT operation_seen cte apply_not
    (92) cte -> . CTE_INT
    (93) cte -> . CTE_FLOAT
    (94) cte -> . CTE_CHAR
    (95) cte -> . llamadaFuncion
    (96) cte -> . ID operand_seen dimId
    (97) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (98) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    NOT             shift and go to state 105
    CTE_INT         shift and go to state 106
    CTE_FLOAT       shift and go to state 107
    CTE_CHAR        shift and go to state 108
    ID              shift and go to state 110
    L_PARENTHESIS   shift and go to state 98

    expresion                      shift and go to state 243
    relacional                     shift and go to state 100
    aritmetica                     shift and go to state 101
    factor                         shift and go to state 102
    matriz                         shift and go to state 103
    cte                            shift and go to state 104
    llamadaFuncion                 shift and go to state 109

state 214

    (65) relacionalp -> EQUALS operation_seen . relacional
    (64) relacional -> . aritmetica apply_operation_relational relacionalp
    (73) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (78) factor -> . matriz apply_operation_factor factorp
    (84) matriz -> . cte matrizp
    (85) matriz -> . NOT operation_seen cte apply_not
    (92) cte -> . CTE_INT
    (93) cte -> . CTE_FLOAT
    (94) cte -> . CTE_CHAR
    (95) cte -> . llamadaFuncion
    (96) cte -> . ID operand_seen dimId
    (97) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (98) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    NOT             shift and go to state 105
    CTE_INT         shift and go to state 106
    CTE_FLOAT       shift and go to state 107
    CTE_CHAR        shift and go to state 108
    ID              shift and go to state 110
    L_PARENTHESIS   shift and go to state 98

    relacional                     shift and go to state 244
    aritmetica                     shift and go to state 101
    factor                         shift and go to state 102
    matriz                         shift and go to state 103
    cte                            shift and go to state 104
    llamadaFuncion                 shift and go to state 109

state 215

    (66) relacionalp -> NOT_EQUAL operation_seen . relacional
    (64) relacional -> . aritmetica apply_operation_relational relacionalp
    (73) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (78) factor -> . matriz apply_operation_factor factorp
    (84) matriz -> . cte matrizp
    (85) matriz -> . NOT operation_seen cte apply_not
    (92) cte -> . CTE_INT
    (93) cte -> . CTE_FLOAT
    (94) cte -> . CTE_CHAR
    (95) cte -> . llamadaFuncion
    (96) cte -> . ID operand_seen dimId
    (97) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (98) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    NOT             shift and go to state 105
    CTE_INT         shift and go to state 106
    CTE_FLOAT       shift and go to state 107
    CTE_CHAR        shift and go to state 108
    ID              shift and go to state 110
    L_PARENTHESIS   shift and go to state 98

    relacional                     shift and go to state 245
    aritmetica                     shift and go to state 101
    factor                         shift and go to state 102
    matriz                         shift and go to state 103
    cte                            shift and go to state 104
    llamadaFuncion                 shift and go to state 109

state 216

    (67) relacionalp -> LESS_THAN operation_seen . relacional
    (64) relacional -> . aritmetica apply_operation_relational relacionalp
    (73) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (78) factor -> . matriz apply_operation_factor factorp
    (84) matriz -> . cte matrizp
    (85) matriz -> . NOT operation_seen cte apply_not
    (92) cte -> . CTE_INT
    (93) cte -> . CTE_FLOAT
    (94) cte -> . CTE_CHAR
    (95) cte -> . llamadaFuncion
    (96) cte -> . ID operand_seen dimId
    (97) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (98) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    NOT             shift and go to state 105
    CTE_INT         shift and go to state 106
    CTE_FLOAT       shift and go to state 107
    CTE_CHAR        shift and go to state 108
    ID              shift and go to state 110
    L_PARENTHESIS   shift and go to state 98

    relacional                     shift and go to state 246
    aritmetica                     shift and go to state 101
    factor                         shift and go to state 102
    matriz                         shift and go to state 103
    cte                            shift and go to state 104
    llamadaFuncion                 shift and go to state 109

state 217

    (68) relacionalp -> LESS_THAN_EQUAL operation_seen . relacional
    (64) relacional -> . aritmetica apply_operation_relational relacionalp
    (73) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (78) factor -> . matriz apply_operation_factor factorp
    (84) matriz -> . cte matrizp
    (85) matriz -> . NOT operation_seen cte apply_not
    (92) cte -> . CTE_INT
    (93) cte -> . CTE_FLOAT
    (94) cte -> . CTE_CHAR
    (95) cte -> . llamadaFuncion
    (96) cte -> . ID operand_seen dimId
    (97) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (98) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    NOT             shift and go to state 105
    CTE_INT         shift and go to state 106
    CTE_FLOAT       shift and go to state 107
    CTE_CHAR        shift and go to state 108
    ID              shift and go to state 110
    L_PARENTHESIS   shift and go to state 98

    relacional                     shift and go to state 247
    aritmetica                     shift and go to state 101
    factor                         shift and go to state 102
    matriz                         shift and go to state 103
    cte                            shift and go to state 104
    llamadaFuncion                 shift and go to state 109

state 218

    (69) relacionalp -> GREATER_THAN operation_seen . relacional
    (64) relacional -> . aritmetica apply_operation_relational relacionalp
    (73) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (78) factor -> . matriz apply_operation_factor factorp
    (84) matriz -> . cte matrizp
    (85) matriz -> . NOT operation_seen cte apply_not
    (92) cte -> . CTE_INT
    (93) cte -> . CTE_FLOAT
    (94) cte -> . CTE_CHAR
    (95) cte -> . llamadaFuncion
    (96) cte -> . ID operand_seen dimId
    (97) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (98) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    NOT             shift and go to state 105
    CTE_INT         shift and go to state 106
    CTE_FLOAT       shift and go to state 107
    CTE_CHAR        shift and go to state 108
    ID              shift and go to state 110
    L_PARENTHESIS   shift and go to state 98

    relacional                     shift and go to state 248
    aritmetica                     shift and go to state 101
    factor                         shift and go to state 102
    matriz                         shift and go to state 103
    cte                            shift and go to state 104
    llamadaFuncion                 shift and go to state 109

state 219

    (70) relacionalp -> GREATER_THAN_EQUAL operation_seen . relacional
    (64) relacional -> . aritmetica apply_operation_relational relacionalp
    (73) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (78) factor -> . matriz apply_operation_factor factorp
    (84) matriz -> . cte matrizp
    (85) matriz -> . NOT operation_seen cte apply_not
    (92) cte -> . CTE_INT
    (93) cte -> . CTE_FLOAT
    (94) cte -> . CTE_CHAR
    (95) cte -> . llamadaFuncion
    (96) cte -> . ID operand_seen dimId
    (97) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (98) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    NOT             shift and go to state 105
    CTE_INT         shift and go to state 106
    CTE_FLOAT       shift and go to state 107
    CTE_CHAR        shift and go to state 108
    ID              shift and go to state 110
    L_PARENTHESIS   shift and go to state 98

    relacional                     shift and go to state 249
    aritmetica                     shift and go to state 101
    factor                         shift and go to state 102
    matriz                         shift and go to state 103
    cte                            shift and go to state 104
    llamadaFuncion                 shift and go to state 109

state 220

    (74) aritmeticap -> SUM operation_seen . aritmetica
    (73) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (78) factor -> . matriz apply_operation_factor factorp
    (84) matriz -> . cte matrizp
    (85) matriz -> . NOT operation_seen cte apply_not
    (92) cte -> . CTE_INT
    (93) cte -> . CTE_FLOAT
    (94) cte -> . CTE_CHAR
    (95) cte -> . llamadaFuncion
    (96) cte -> . ID operand_seen dimId
    (97) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (98) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    NOT             shift and go to state 105
    CTE_INT         shift and go to state 106
    CTE_FLOAT       shift and go to state 107
    CTE_CHAR        shift and go to state 108
    ID              shift and go to state 110
    L_PARENTHESIS   shift and go to state 98

    aritmetica                     shift and go to state 250
    factor                         shift and go to state 102
    matriz                         shift and go to state 103
    cte                            shift and go to state 104
    llamadaFuncion                 shift and go to state 109

state 221

    (75) aritmeticap -> SUBTRACT operation_seen . aritmetica
    (73) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (78) factor -> . matriz apply_operation_factor factorp
    (84) matriz -> . cte matrizp
    (85) matriz -> . NOT operation_seen cte apply_not
    (92) cte -> . CTE_INT
    (93) cte -> . CTE_FLOAT
    (94) cte -> . CTE_CHAR
    (95) cte -> . llamadaFuncion
    (96) cte -> . ID operand_seen dimId
    (97) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (98) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    NOT             shift and go to state 105
    CTE_INT         shift and go to state 106
    CTE_FLOAT       shift and go to state 107
    CTE_CHAR        shift and go to state 108
    ID              shift and go to state 110
    L_PARENTHESIS   shift and go to state 98

    aritmetica                     shift and go to state 251
    factor                         shift and go to state 102
    matriz                         shift and go to state 103
    cte                            shift and go to state 104
    llamadaFuncion                 shift and go to state 109

state 222

    (79) factorp -> MULTIPLY operation_seen . factor
    (78) factor -> . matriz apply_operation_factor factorp
    (84) matriz -> . cte matrizp
    (85) matriz -> . NOT operation_seen cte apply_not
    (92) cte -> . CTE_INT
    (93) cte -> . CTE_FLOAT
    (94) cte -> . CTE_CHAR
    (95) cte -> . llamadaFuncion
    (96) cte -> . ID operand_seen dimId
    (97) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (98) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    NOT             shift and go to state 105
    CTE_INT         shift and go to state 106
    CTE_FLOAT       shift and go to state 107
    CTE_CHAR        shift and go to state 108
    ID              shift and go to state 110
    L_PARENTHESIS   shift and go to state 98

    factor                         shift and go to state 252
    matriz                         shift and go to state 103
    cte                            shift and go to state 104
    llamadaFuncion                 shift and go to state 109

state 223

    (80) factorp -> DIVIDE operation_seen . factor
    (78) factor -> . matriz apply_operation_factor factorp
    (84) matriz -> . cte matrizp
    (85) matriz -> . NOT operation_seen cte apply_not
    (92) cte -> . CTE_INT
    (93) cte -> . CTE_FLOAT
    (94) cte -> . CTE_CHAR
    (95) cte -> . llamadaFuncion
    (96) cte -> . ID operand_seen dimId
    (97) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (98) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    NOT             shift and go to state 105
    CTE_INT         shift and go to state 106
    CTE_FLOAT       shift and go to state 107
    CTE_CHAR        shift and go to state 108
    ID              shift and go to state 110
    L_PARENTHESIS   shift and go to state 98

    factor                         shift and go to state 253
    matriz                         shift and go to state 103
    cte                            shift and go to state 104
    llamadaFuncion                 shift and go to state 109

state 224

    (87) matrizp -> DETERMINANT operation_seen apply_mat .

    MULTIPLY        reduce using rule 87 (matrizp -> DETERMINANT operation_seen apply_mat .)
    DIVIDE          reduce using rule 87 (matrizp -> DETERMINANT operation_seen apply_mat .)
    SUM             reduce using rule 87 (matrizp -> DETERMINANT operation_seen apply_mat .)
    SUBTRACT        reduce using rule 87 (matrizp -> DETERMINANT operation_seen apply_mat .)
    EQUALS          reduce using rule 87 (matrizp -> DETERMINANT operation_seen apply_mat .)
    NOT_EQUAL       reduce using rule 87 (matrizp -> DETERMINANT operation_seen apply_mat .)
    LESS_THAN       reduce using rule 87 (matrizp -> DETERMINANT operation_seen apply_mat .)
    LESS_THAN_EQUAL reduce using rule 87 (matrizp -> DETERMINANT operation_seen apply_mat .)
    GREATER_THAN    reduce using rule 87 (matrizp -> DETERMINANT operation_seen apply_mat .)
    GREATER_THAN_EQUAL reduce using rule 87 (matrizp -> DETERMINANT operation_seen apply_mat .)
    AND             reduce using rule 87 (matrizp -> DETERMINANT operation_seen apply_mat .)
    OR              reduce using rule 87 (matrizp -> DETERMINANT operation_seen apply_mat .)
    R_PARENTHESIS   reduce using rule 87 (matrizp -> DETERMINANT operation_seen apply_mat .)
    COMMA           reduce using rule 87 (matrizp -> DETERMINANT operation_seen apply_mat .)
    SEMICOLON       reduce using rule 87 (matrizp -> DETERMINANT operation_seen apply_mat .)
    R_SQUARE_BRACKET reduce using rule 87 (matrizp -> DETERMINANT operation_seen apply_mat .)
    HASTA           reduce using rule 87 (matrizp -> DETERMINANT operation_seen apply_mat .)
    HACER           reduce using rule 87 (matrizp -> DETERMINANT operation_seen apply_mat .)


state 225

    (88) matrizp -> TRANSPOSED operation_seen apply_mat .

    MULTIPLY        reduce using rule 88 (matrizp -> TRANSPOSED operation_seen apply_mat .)
    DIVIDE          reduce using rule 88 (matrizp -> TRANSPOSED operation_seen apply_mat .)
    SUM             reduce using rule 88 (matrizp -> TRANSPOSED operation_seen apply_mat .)
    SUBTRACT        reduce using rule 88 (matrizp -> TRANSPOSED operation_seen apply_mat .)
    EQUALS          reduce using rule 88 (matrizp -> TRANSPOSED operation_seen apply_mat .)
    NOT_EQUAL       reduce using rule 88 (matrizp -> TRANSPOSED operation_seen apply_mat .)
    LESS_THAN       reduce using rule 88 (matrizp -> TRANSPOSED operation_seen apply_mat .)
    LESS_THAN_EQUAL reduce using rule 88 (matrizp -> TRANSPOSED operation_seen apply_mat .)
    GREATER_THAN    reduce using rule 88 (matrizp -> TRANSPOSED operation_seen apply_mat .)
    GREATER_THAN_EQUAL reduce using rule 88 (matrizp -> TRANSPOSED operation_seen apply_mat .)
    AND             reduce using rule 88 (matrizp -> TRANSPOSED operation_seen apply_mat .)
    OR              reduce using rule 88 (matrizp -> TRANSPOSED operation_seen apply_mat .)
    R_PARENTHESIS   reduce using rule 88 (matrizp -> TRANSPOSED operation_seen apply_mat .)
    COMMA           reduce using rule 88 (matrizp -> TRANSPOSED operation_seen apply_mat .)
    SEMICOLON       reduce using rule 88 (matrizp -> TRANSPOSED operation_seen apply_mat .)
    R_SQUARE_BRACKET reduce using rule 88 (matrizp -> TRANSPOSED operation_seen apply_mat .)
    HASTA           reduce using rule 88 (matrizp -> TRANSPOSED operation_seen apply_mat .)
    HACER           reduce using rule 88 (matrizp -> TRANSPOSED operation_seen apply_mat .)


state 226

    (89) matrizp -> INVERSE operation_seen apply_mat .

    MULTIPLY        reduce using rule 89 (matrizp -> INVERSE operation_seen apply_mat .)
    DIVIDE          reduce using rule 89 (matrizp -> INVERSE operation_seen apply_mat .)
    SUM             reduce using rule 89 (matrizp -> INVERSE operation_seen apply_mat .)
    SUBTRACT        reduce using rule 89 (matrizp -> INVERSE operation_seen apply_mat .)
    EQUALS          reduce using rule 89 (matrizp -> INVERSE operation_seen apply_mat .)
    NOT_EQUAL       reduce using rule 89 (matrizp -> INVERSE operation_seen apply_mat .)
    LESS_THAN       reduce using rule 89 (matrizp -> INVERSE operation_seen apply_mat .)
    LESS_THAN_EQUAL reduce using rule 89 (matrizp -> INVERSE operation_seen apply_mat .)
    GREATER_THAN    reduce using rule 89 (matrizp -> INVERSE operation_seen apply_mat .)
    GREATER_THAN_EQUAL reduce using rule 89 (matrizp -> INVERSE operation_seen apply_mat .)
    AND             reduce using rule 89 (matrizp -> INVERSE operation_seen apply_mat .)
    OR              reduce using rule 89 (matrizp -> INVERSE operation_seen apply_mat .)
    R_PARENTHESIS   reduce using rule 89 (matrizp -> INVERSE operation_seen apply_mat .)
    COMMA           reduce using rule 89 (matrizp -> INVERSE operation_seen apply_mat .)
    SEMICOLON       reduce using rule 89 (matrizp -> INVERSE operation_seen apply_mat .)
    R_SQUARE_BRACKET reduce using rule 89 (matrizp -> INVERSE operation_seen apply_mat .)
    HASTA           reduce using rule 89 (matrizp -> INVERSE operation_seen apply_mat .)
    HACER           reduce using rule 89 (matrizp -> INVERSE operation_seen apply_mat .)


state 227

    (85) matriz -> NOT operation_seen cte apply_not .

    MULTIPLY        reduce using rule 85 (matriz -> NOT operation_seen cte apply_not .)
    DIVIDE          reduce using rule 85 (matriz -> NOT operation_seen cte apply_not .)
    SUM             reduce using rule 85 (matriz -> NOT operation_seen cte apply_not .)
    SUBTRACT        reduce using rule 85 (matriz -> NOT operation_seen cte apply_not .)
    EQUALS          reduce using rule 85 (matriz -> NOT operation_seen cte apply_not .)
    NOT_EQUAL       reduce using rule 85 (matriz -> NOT operation_seen cte apply_not .)
    LESS_THAN       reduce using rule 85 (matriz -> NOT operation_seen cte apply_not .)
    LESS_THAN_EQUAL reduce using rule 85 (matriz -> NOT operation_seen cte apply_not .)
    GREATER_THAN    reduce using rule 85 (matriz -> NOT operation_seen cte apply_not .)
    GREATER_THAN_EQUAL reduce using rule 85 (matriz -> NOT operation_seen cte apply_not .)
    AND             reduce using rule 85 (matriz -> NOT operation_seen cte apply_not .)
    OR              reduce using rule 85 (matriz -> NOT operation_seen cte apply_not .)
    R_PARENTHESIS   reduce using rule 85 (matriz -> NOT operation_seen cte apply_not .)
    COMMA           reduce using rule 85 (matriz -> NOT operation_seen cte apply_not .)
    SEMICOLON       reduce using rule 85 (matriz -> NOT operation_seen cte apply_not .)
    R_SQUARE_BRACKET reduce using rule 85 (matriz -> NOT operation_seen cte apply_not .)
    HASTA           reduce using rule 85 (matriz -> NOT operation_seen cte apply_not .)
    HACER           reduce using rule 85 (matriz -> NOT operation_seen cte apply_not .)


state 228

    (98) llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen . llamadaFuncionp R_PARENTHESIS operation_seen
    (99) llamadaFuncionp -> . expresion verify_parameter llamadaFuncionpp
    (100) llamadaFuncionp -> . empty
    (59) expresion -> . relacional apply_operation_expresion expresionp
    (130) empty -> .
    (64) relacional -> . aritmetica apply_operation_relational relacionalp
    (73) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (78) factor -> . matriz apply_operation_factor factorp
    (84) matriz -> . cte matrizp
    (85) matriz -> . NOT operation_seen cte apply_not
    (92) cte -> . CTE_INT
    (93) cte -> . CTE_FLOAT
    (94) cte -> . CTE_CHAR
    (95) cte -> . llamadaFuncion
    (96) cte -> . ID operand_seen dimId
    (97) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (98) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    R_PARENTHESIS   reduce using rule 130 (empty -> .)
    NOT             shift and go to state 105
    CTE_INT         shift and go to state 106
    CTE_FLOAT       shift and go to state 107
    CTE_CHAR        shift and go to state 108
    ID              shift and go to state 110
    L_PARENTHESIS   shift and go to state 98

    llamadaFuncionp                shift and go to state 254
    expresion                      shift and go to state 127
    empty                          shift and go to state 128
    relacional                     shift and go to state 100
    aritmetica                     shift and go to state 101
    factor                         shift and go to state 102
    matriz                         shift and go to state 103
    cte                            shift and go to state 104
    llamadaFuncion                 shift and go to state 109

state 229

    (108) lecturap -> ID dimId gen_input lecturapp .

    R_PARENTHESIS   reduce using rule 108 (lecturap -> ID dimId gen_input lecturapp .)


state 230

    (110) lecturapp -> COMMA . lecturap
    (108) lecturap -> . ID dimId gen_input lecturapp

    ID              shift and go to state 112

    lecturap                       shift and go to state 255

state 231

    (111) lecturapp -> empty .

    R_PARENTHESIS   reduce using rule 111 (lecturapp -> empty .)


state 232

    (116) escriturapp -> COMMA escriturap .

    R_PARENTHESIS   reduce using rule 116 (escriturapp -> COMMA escriturap .)


state 233

    (118) decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ . bloque decisionp
    (37) bloque -> . L_CURLY_BRACKET bloquep R_CURLY_BRACKET

    L_CURLY_BRACKET shift and go to state 41

    bloque                         shift and go to state 256

state 234

    (124) cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false . HAZ bloque update_jump_cycle

    HAZ             shift and go to state 257


state 235

    (127) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen . expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle
    (59) expresion -> . relacional apply_operation_expresion expresionp
    (64) relacional -> . aritmetica apply_operation_relational relacionalp
    (73) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (78) factor -> . matriz apply_operation_factor factorp
    (84) matriz -> . cte matrizp
    (85) matriz -> . NOT operation_seen cte apply_not
    (92) cte -> . CTE_INT
    (93) cte -> . CTE_FLOAT
    (94) cte -> . CTE_CHAR
    (95) cte -> . llamadaFuncion
    (96) cte -> . ID operand_seen dimId
    (97) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (98) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    NOT             shift and go to state 105
    CTE_INT         shift and go to state 106
    CTE_FLOAT       shift and go to state 107
    CTE_CHAR        shift and go to state 108
    ID              shift and go to state 110
    L_PARENTHESIS   shift and go to state 98

    expresion                      shift and go to state 258
    relacional                     shift and go to state 100
    aritmetica                     shift and go to state 101
    factor                         shift and go to state 102
    matriz                         shift and go to state 103
    cte                            shift and go to state 104
    llamadaFuncion                 shift and go to state 109

state 236

    (33) parametrop -> COMMA tipo ID save_param parametrop .

    R_PARENTHESIS   reduce using rule 33 (parametrop -> COMMA tipo ID save_param parametrop .)


state 237

    (48) asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign . SEMICOLON

    SEMICOLON       shift and go to state 259


state 238

    (51) dimId -> is_array create_dim dim dim pop_array .

    ASSIGN          reduce using rule 51 (dimId -> is_array create_dim dim dim pop_array .)
    COMMA           reduce using rule 51 (dimId -> is_array create_dim dim dim pop_array .)
    R_PARENTHESIS   reduce using rule 51 (dimId -> is_array create_dim dim dim pop_array .)
    DETERMINANT     reduce using rule 51 (dimId -> is_array create_dim dim dim pop_array .)
    TRANSPOSED      reduce using rule 51 (dimId -> is_array create_dim dim dim pop_array .)
    INVERSE         reduce using rule 51 (dimId -> is_array create_dim dim dim pop_array .)
    MULTIPLY        reduce using rule 51 (dimId -> is_array create_dim dim dim pop_array .)
    DIVIDE          reduce using rule 51 (dimId -> is_array create_dim dim dim pop_array .)
    SUM             reduce using rule 51 (dimId -> is_array create_dim dim dim pop_array .)
    SUBTRACT        reduce using rule 51 (dimId -> is_array create_dim dim dim pop_array .)
    EQUALS          reduce using rule 51 (dimId -> is_array create_dim dim dim pop_array .)
    NOT_EQUAL       reduce using rule 51 (dimId -> is_array create_dim dim dim pop_array .)
    LESS_THAN       reduce using rule 51 (dimId -> is_array create_dim dim dim pop_array .)
    LESS_THAN_EQUAL reduce using rule 51 (dimId -> is_array create_dim dim dim pop_array .)
    GREATER_THAN    reduce using rule 51 (dimId -> is_array create_dim dim dim pop_array .)
    GREATER_THAN_EQUAL reduce using rule 51 (dimId -> is_array create_dim dim dim pop_array .)
    AND             reduce using rule 51 (dimId -> is_array create_dim dim dim pop_array .)
    OR              reduce using rule 51 (dimId -> is_array create_dim dim dim pop_array .)
    SEMICOLON       reduce using rule 51 (dimId -> is_array create_dim dim dim pop_array .)
    R_SQUARE_BRACKET reduce using rule 51 (dimId -> is_array create_dim dim dim pop_array .)
    HASTA           reduce using rule 51 (dimId -> is_array create_dim dim dim pop_array .)
    HACER           reduce using rule 51 (dimId -> is_array create_dim dim dim pop_array .)


state 239

    (55) dim -> L_SQUARE_BRACKET bracket_seen expresion . R_SQUARE_BRACKET bracket_seen

    R_SQUARE_BRACKET shift and go to state 260


state 240

    (101) llamadaFuncionpp -> COMMA llamadaFuncionp .

    R_PARENTHESIS   reduce using rule 101 (llamadaFuncionpp -> COMMA llamadaFuncionp .)


state 241

    (97) cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .

    DETERMINANT     reduce using rule 97 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    TRANSPOSED      reduce using rule 97 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    INVERSE         reduce using rule 97 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    MULTIPLY        reduce using rule 97 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    DIVIDE          reduce using rule 97 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    SUM             reduce using rule 97 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    SUBTRACT        reduce using rule 97 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    EQUALS          reduce using rule 97 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    NOT_EQUAL       reduce using rule 97 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    LESS_THAN       reduce using rule 97 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    LESS_THAN_EQUAL reduce using rule 97 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    GREATER_THAN    reduce using rule 97 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    GREATER_THAN_EQUAL reduce using rule 97 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    AND             reduce using rule 97 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    OR              reduce using rule 97 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    R_PARENTHESIS   reduce using rule 97 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    COMMA           reduce using rule 97 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    SEMICOLON       reduce using rule 97 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    R_SQUARE_BRACKET reduce using rule 97 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    HASTA           reduce using rule 97 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    HACER           reduce using rule 97 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)


state 242

    (60) expresionp -> AND operation_seen expresion .

    R_PARENTHESIS   reduce using rule 60 (expresionp -> AND operation_seen expresion .)
    COMMA           reduce using rule 60 (expresionp -> AND operation_seen expresion .)
    SEMICOLON       reduce using rule 60 (expresionp -> AND operation_seen expresion .)
    R_SQUARE_BRACKET reduce using rule 60 (expresionp -> AND operation_seen expresion .)
    HASTA           reduce using rule 60 (expresionp -> AND operation_seen expresion .)
    HACER           reduce using rule 60 (expresionp -> AND operation_seen expresion .)


state 243

    (61) expresionp -> OR operation_seen expresion .

    R_PARENTHESIS   reduce using rule 61 (expresionp -> OR operation_seen expresion .)
    COMMA           reduce using rule 61 (expresionp -> OR operation_seen expresion .)
    SEMICOLON       reduce using rule 61 (expresionp -> OR operation_seen expresion .)
    R_SQUARE_BRACKET reduce using rule 61 (expresionp -> OR operation_seen expresion .)
    HASTA           reduce using rule 61 (expresionp -> OR operation_seen expresion .)
    HACER           reduce using rule 61 (expresionp -> OR operation_seen expresion .)


state 244

    (65) relacionalp -> EQUALS operation_seen relacional .

    AND             reduce using rule 65 (relacionalp -> EQUALS operation_seen relacional .)
    OR              reduce using rule 65 (relacionalp -> EQUALS operation_seen relacional .)
    R_PARENTHESIS   reduce using rule 65 (relacionalp -> EQUALS operation_seen relacional .)
    COMMA           reduce using rule 65 (relacionalp -> EQUALS operation_seen relacional .)
    SEMICOLON       reduce using rule 65 (relacionalp -> EQUALS operation_seen relacional .)
    R_SQUARE_BRACKET reduce using rule 65 (relacionalp -> EQUALS operation_seen relacional .)
    HASTA           reduce using rule 65 (relacionalp -> EQUALS operation_seen relacional .)
    HACER           reduce using rule 65 (relacionalp -> EQUALS operation_seen relacional .)


state 245

    (66) relacionalp -> NOT_EQUAL operation_seen relacional .

    AND             reduce using rule 66 (relacionalp -> NOT_EQUAL operation_seen relacional .)
    OR              reduce using rule 66 (relacionalp -> NOT_EQUAL operation_seen relacional .)
    R_PARENTHESIS   reduce using rule 66 (relacionalp -> NOT_EQUAL operation_seen relacional .)
    COMMA           reduce using rule 66 (relacionalp -> NOT_EQUAL operation_seen relacional .)
    SEMICOLON       reduce using rule 66 (relacionalp -> NOT_EQUAL operation_seen relacional .)
    R_SQUARE_BRACKET reduce using rule 66 (relacionalp -> NOT_EQUAL operation_seen relacional .)
    HASTA           reduce using rule 66 (relacionalp -> NOT_EQUAL operation_seen relacional .)
    HACER           reduce using rule 66 (relacionalp -> NOT_EQUAL operation_seen relacional .)


state 246

    (67) relacionalp -> LESS_THAN operation_seen relacional .

    AND             reduce using rule 67 (relacionalp -> LESS_THAN operation_seen relacional .)
    OR              reduce using rule 67 (relacionalp -> LESS_THAN operation_seen relacional .)
    R_PARENTHESIS   reduce using rule 67 (relacionalp -> LESS_THAN operation_seen relacional .)
    COMMA           reduce using rule 67 (relacionalp -> LESS_THAN operation_seen relacional .)
    SEMICOLON       reduce using rule 67 (relacionalp -> LESS_THAN operation_seen relacional .)
    R_SQUARE_BRACKET reduce using rule 67 (relacionalp -> LESS_THAN operation_seen relacional .)
    HASTA           reduce using rule 67 (relacionalp -> LESS_THAN operation_seen relacional .)
    HACER           reduce using rule 67 (relacionalp -> LESS_THAN operation_seen relacional .)


state 247

    (68) relacionalp -> LESS_THAN_EQUAL operation_seen relacional .

    AND             reduce using rule 68 (relacionalp -> LESS_THAN_EQUAL operation_seen relacional .)
    OR              reduce using rule 68 (relacionalp -> LESS_THAN_EQUAL operation_seen relacional .)
    R_PARENTHESIS   reduce using rule 68 (relacionalp -> LESS_THAN_EQUAL operation_seen relacional .)
    COMMA           reduce using rule 68 (relacionalp -> LESS_THAN_EQUAL operation_seen relacional .)
    SEMICOLON       reduce using rule 68 (relacionalp -> LESS_THAN_EQUAL operation_seen relacional .)
    R_SQUARE_BRACKET reduce using rule 68 (relacionalp -> LESS_THAN_EQUAL operation_seen relacional .)
    HASTA           reduce using rule 68 (relacionalp -> LESS_THAN_EQUAL operation_seen relacional .)
    HACER           reduce using rule 68 (relacionalp -> LESS_THAN_EQUAL operation_seen relacional .)


state 248

    (69) relacionalp -> GREATER_THAN operation_seen relacional .

    AND             reduce using rule 69 (relacionalp -> GREATER_THAN operation_seen relacional .)
    OR              reduce using rule 69 (relacionalp -> GREATER_THAN operation_seen relacional .)
    R_PARENTHESIS   reduce using rule 69 (relacionalp -> GREATER_THAN operation_seen relacional .)
    COMMA           reduce using rule 69 (relacionalp -> GREATER_THAN operation_seen relacional .)
    SEMICOLON       reduce using rule 69 (relacionalp -> GREATER_THAN operation_seen relacional .)
    R_SQUARE_BRACKET reduce using rule 69 (relacionalp -> GREATER_THAN operation_seen relacional .)
    HASTA           reduce using rule 69 (relacionalp -> GREATER_THAN operation_seen relacional .)
    HACER           reduce using rule 69 (relacionalp -> GREATER_THAN operation_seen relacional .)


state 249

    (70) relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .

    AND             reduce using rule 70 (relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .)
    OR              reduce using rule 70 (relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .)
    R_PARENTHESIS   reduce using rule 70 (relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .)
    COMMA           reduce using rule 70 (relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .)
    SEMICOLON       reduce using rule 70 (relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .)
    R_SQUARE_BRACKET reduce using rule 70 (relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .)
    HASTA           reduce using rule 70 (relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .)
    HACER           reduce using rule 70 (relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .)


state 250

    (74) aritmeticap -> SUM operation_seen aritmetica .

    EQUALS          reduce using rule 74 (aritmeticap -> SUM operation_seen aritmetica .)
    NOT_EQUAL       reduce using rule 74 (aritmeticap -> SUM operation_seen aritmetica .)
    LESS_THAN       reduce using rule 74 (aritmeticap -> SUM operation_seen aritmetica .)
    LESS_THAN_EQUAL reduce using rule 74 (aritmeticap -> SUM operation_seen aritmetica .)
    GREATER_THAN    reduce using rule 74 (aritmeticap -> SUM operation_seen aritmetica .)
    GREATER_THAN_EQUAL reduce using rule 74 (aritmeticap -> SUM operation_seen aritmetica .)
    AND             reduce using rule 74 (aritmeticap -> SUM operation_seen aritmetica .)
    OR              reduce using rule 74 (aritmeticap -> SUM operation_seen aritmetica .)
    R_PARENTHESIS   reduce using rule 74 (aritmeticap -> SUM operation_seen aritmetica .)
    COMMA           reduce using rule 74 (aritmeticap -> SUM operation_seen aritmetica .)
    SEMICOLON       reduce using rule 74 (aritmeticap -> SUM operation_seen aritmetica .)
    R_SQUARE_BRACKET reduce using rule 74 (aritmeticap -> SUM operation_seen aritmetica .)
    HASTA           reduce using rule 74 (aritmeticap -> SUM operation_seen aritmetica .)
    HACER           reduce using rule 74 (aritmeticap -> SUM operation_seen aritmetica .)


state 251

    (75) aritmeticap -> SUBTRACT operation_seen aritmetica .

    EQUALS          reduce using rule 75 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    NOT_EQUAL       reduce using rule 75 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    LESS_THAN       reduce using rule 75 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    LESS_THAN_EQUAL reduce using rule 75 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    GREATER_THAN    reduce using rule 75 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    GREATER_THAN_EQUAL reduce using rule 75 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    AND             reduce using rule 75 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    OR              reduce using rule 75 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    R_PARENTHESIS   reduce using rule 75 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    COMMA           reduce using rule 75 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    SEMICOLON       reduce using rule 75 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    R_SQUARE_BRACKET reduce using rule 75 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    HASTA           reduce using rule 75 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    HACER           reduce using rule 75 (aritmeticap -> SUBTRACT operation_seen aritmetica .)


state 252

    (79) factorp -> MULTIPLY operation_seen factor .

    SUM             reduce using rule 79 (factorp -> MULTIPLY operation_seen factor .)
    SUBTRACT        reduce using rule 79 (factorp -> MULTIPLY operation_seen factor .)
    EQUALS          reduce using rule 79 (factorp -> MULTIPLY operation_seen factor .)
    NOT_EQUAL       reduce using rule 79 (factorp -> MULTIPLY operation_seen factor .)
    LESS_THAN       reduce using rule 79 (factorp -> MULTIPLY operation_seen factor .)
    LESS_THAN_EQUAL reduce using rule 79 (factorp -> MULTIPLY operation_seen factor .)
    GREATER_THAN    reduce using rule 79 (factorp -> MULTIPLY operation_seen factor .)
    GREATER_THAN_EQUAL reduce using rule 79 (factorp -> MULTIPLY operation_seen factor .)
    AND             reduce using rule 79 (factorp -> MULTIPLY operation_seen factor .)
    OR              reduce using rule 79 (factorp -> MULTIPLY operation_seen factor .)
    R_PARENTHESIS   reduce using rule 79 (factorp -> MULTIPLY operation_seen factor .)
    COMMA           reduce using rule 79 (factorp -> MULTIPLY operation_seen factor .)
    SEMICOLON       reduce using rule 79 (factorp -> MULTIPLY operation_seen factor .)
    R_SQUARE_BRACKET reduce using rule 79 (factorp -> MULTIPLY operation_seen factor .)
    HASTA           reduce using rule 79 (factorp -> MULTIPLY operation_seen factor .)
    HACER           reduce using rule 79 (factorp -> MULTIPLY operation_seen factor .)


state 253

    (80) factorp -> DIVIDE operation_seen factor .

    SUM             reduce using rule 80 (factorp -> DIVIDE operation_seen factor .)
    SUBTRACT        reduce using rule 80 (factorp -> DIVIDE operation_seen factor .)
    EQUALS          reduce using rule 80 (factorp -> DIVIDE operation_seen factor .)
    NOT_EQUAL       reduce using rule 80 (factorp -> DIVIDE operation_seen factor .)
    LESS_THAN       reduce using rule 80 (factorp -> DIVIDE operation_seen factor .)
    LESS_THAN_EQUAL reduce using rule 80 (factorp -> DIVIDE operation_seen factor .)
    GREATER_THAN    reduce using rule 80 (factorp -> DIVIDE operation_seen factor .)
    GREATER_THAN_EQUAL reduce using rule 80 (factorp -> DIVIDE operation_seen factor .)
    AND             reduce using rule 80 (factorp -> DIVIDE operation_seen factor .)
    OR              reduce using rule 80 (factorp -> DIVIDE operation_seen factor .)
    R_PARENTHESIS   reduce using rule 80 (factorp -> DIVIDE operation_seen factor .)
    COMMA           reduce using rule 80 (factorp -> DIVIDE operation_seen factor .)
    SEMICOLON       reduce using rule 80 (factorp -> DIVIDE operation_seen factor .)
    R_SQUARE_BRACKET reduce using rule 80 (factorp -> DIVIDE operation_seen factor .)
    HASTA           reduce using rule 80 (factorp -> DIVIDE operation_seen factor .)
    HACER           reduce using rule 80 (factorp -> DIVIDE operation_seen factor .)


state 254

    (98) llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp . R_PARENTHESIS operation_seen

    R_PARENTHESIS   shift and go to state 261


state 255

    (110) lecturapp -> COMMA lecturap .

    R_PARENTHESIS   reduce using rule 110 (lecturapp -> COMMA lecturap .)


state 256

    (118) decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque . decisionp
    (121) decisionp -> . SINO jump_else bloque update_jump
    (122) decisionp -> . empty update_jump
    (130) empty -> .

    SINO            shift and go to state 263
    ID              reduce using rule 130 (empty -> .)
    REGRESA         reduce using rule 130 (empty -> .)
    LECTURA         reduce using rule 130 (empty -> .)
    ESCRIBE         reduce using rule 130 (empty -> .)
    SI              reduce using rule 130 (empty -> .)
    MIENTRAS        reduce using rule 130 (empty -> .)
    DESDE           reduce using rule 130 (empty -> .)
    R_CURLY_BRACKET reduce using rule 130 (empty -> .)

    decisionp                      shift and go to state 262
    empty                          shift and go to state 264

state 257

    (124) cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ . bloque update_jump_cycle
    (37) bloque -> . L_CURLY_BRACKET bloquep R_CURLY_BRACKET

    L_CURLY_BRACKET shift and go to state 41

    bloque                         shift and go to state 265

state 258

    (127) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion . apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle
    (58) apply_operation_assign -> .

    HASTA           reduce using rule 58 (apply_operation_assign -> .)

    apply_operation_assign         shift and go to state 266

state 259

    (48) asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON .

    ID              reduce using rule 48 (asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON .)
    REGRESA         reduce using rule 48 (asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON .)
    LECTURA         reduce using rule 48 (asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON .)
    ESCRIBE         reduce using rule 48 (asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON .)
    SI              reduce using rule 48 (asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON .)
    MIENTRAS        reduce using rule 48 (asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON .)
    DESDE           reduce using rule 48 (asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON .)
    R_CURLY_BRACKET reduce using rule 48 (asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON .)


state 260

    (55) dim -> L_SQUARE_BRACKET bracket_seen expresion R_SQUARE_BRACKET . bracket_seen
    (57) bracket_seen -> .

    L_SQUARE_BRACKET reduce using rule 57 (bracket_seen -> .)
    ASSIGN          reduce using rule 57 (bracket_seen -> .)
    COMMA           reduce using rule 57 (bracket_seen -> .)
    R_PARENTHESIS   reduce using rule 57 (bracket_seen -> .)
    DETERMINANT     reduce using rule 57 (bracket_seen -> .)
    TRANSPOSED      reduce using rule 57 (bracket_seen -> .)
    INVERSE         reduce using rule 57 (bracket_seen -> .)
    MULTIPLY        reduce using rule 57 (bracket_seen -> .)
    DIVIDE          reduce using rule 57 (bracket_seen -> .)
    SUM             reduce using rule 57 (bracket_seen -> .)
    SUBTRACT        reduce using rule 57 (bracket_seen -> .)
    EQUALS          reduce using rule 57 (bracket_seen -> .)
    NOT_EQUAL       reduce using rule 57 (bracket_seen -> .)
    LESS_THAN       reduce using rule 57 (bracket_seen -> .)
    LESS_THAN_EQUAL reduce using rule 57 (bracket_seen -> .)
    GREATER_THAN    reduce using rule 57 (bracket_seen -> .)
    GREATER_THAN_EQUAL reduce using rule 57 (bracket_seen -> .)
    AND             reduce using rule 57 (bracket_seen -> .)
    OR              reduce using rule 57 (bracket_seen -> .)
    SEMICOLON       reduce using rule 57 (bracket_seen -> .)
    R_SQUARE_BRACKET reduce using rule 57 (bracket_seen -> .)
    HASTA           reduce using rule 57 (bracket_seen -> .)
    HACER           reduce using rule 57 (bracket_seen -> .)

    bracket_seen                   shift and go to state 267

state 261

    (98) llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS . operation_seen
    (83) operation_seen -> .

    DETERMINANT     reduce using rule 83 (operation_seen -> .)
    TRANSPOSED      reduce using rule 83 (operation_seen -> .)
    INVERSE         reduce using rule 83 (operation_seen -> .)
    MULTIPLY        reduce using rule 83 (operation_seen -> .)
    DIVIDE          reduce using rule 83 (operation_seen -> .)
    SUM             reduce using rule 83 (operation_seen -> .)
    SUBTRACT        reduce using rule 83 (operation_seen -> .)
    EQUALS          reduce using rule 83 (operation_seen -> .)
    NOT_EQUAL       reduce using rule 83 (operation_seen -> .)
    LESS_THAN       reduce using rule 83 (operation_seen -> .)
    LESS_THAN_EQUAL reduce using rule 83 (operation_seen -> .)
    GREATER_THAN    reduce using rule 83 (operation_seen -> .)
    GREATER_THAN_EQUAL reduce using rule 83 (operation_seen -> .)
    AND             reduce using rule 83 (operation_seen -> .)
    OR              reduce using rule 83 (operation_seen -> .)
    R_PARENTHESIS   reduce using rule 83 (operation_seen -> .)
    COMMA           reduce using rule 83 (operation_seen -> .)
    SEMICOLON       reduce using rule 83 (operation_seen -> .)
    R_SQUARE_BRACKET reduce using rule 83 (operation_seen -> .)
    HASTA           reduce using rule 83 (operation_seen -> .)
    HACER           reduce using rule 83 (operation_seen -> .)

    operation_seen                 shift and go to state 268

state 262

    (118) decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp .

    ID              reduce using rule 118 (decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp .)
    REGRESA         reduce using rule 118 (decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp .)
    LECTURA         reduce using rule 118 (decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp .)
    ESCRIBE         reduce using rule 118 (decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp .)
    SI              reduce using rule 118 (decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp .)
    MIENTRAS        reduce using rule 118 (decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp .)
    DESDE           reduce using rule 118 (decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp .)
    R_CURLY_BRACKET reduce using rule 118 (decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp .)


state 263

    (121) decisionp -> SINO . jump_else bloque update_jump
    (123) jump_else -> .

    L_CURLY_BRACKET reduce using rule 123 (jump_else -> .)

    jump_else                      shift and go to state 269

state 264

    (122) decisionp -> empty . update_jump
    (120) update_jump -> .

    ID              reduce using rule 120 (update_jump -> .)
    REGRESA         reduce using rule 120 (update_jump -> .)
    LECTURA         reduce using rule 120 (update_jump -> .)
    ESCRIBE         reduce using rule 120 (update_jump -> .)
    SI              reduce using rule 120 (update_jump -> .)
    MIENTRAS        reduce using rule 120 (update_jump -> .)
    DESDE           reduce using rule 120 (update_jump -> .)
    R_CURLY_BRACKET reduce using rule 120 (update_jump -> .)

    update_jump                    shift and go to state 270

state 265

    (124) cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque . update_jump_cycle
    (126) update_jump_cycle -> .

    ID              reduce using rule 126 (update_jump_cycle -> .)
    REGRESA         reduce using rule 126 (update_jump_cycle -> .)
    LECTURA         reduce using rule 126 (update_jump_cycle -> .)
    ESCRIBE         reduce using rule 126 (update_jump_cycle -> .)
    SI              reduce using rule 126 (update_jump_cycle -> .)
    MIENTRAS        reduce using rule 126 (update_jump_cycle -> .)
    DESDE           reduce using rule 126 (update_jump_cycle -> .)
    R_CURLY_BRACKET reduce using rule 126 (update_jump_cycle -> .)

    update_jump_cycle              shift and go to state 271

state 266

    (127) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign . HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle

    HASTA           shift and go to state 272


state 267

    (55) dim -> L_SQUARE_BRACKET bracket_seen expresion R_SQUARE_BRACKET bracket_seen .

    L_SQUARE_BRACKET reduce using rule 55 (dim -> L_SQUARE_BRACKET bracket_seen expresion R_SQUARE_BRACKET bracket_seen .)
    ASSIGN          reduce using rule 55 (dim -> L_SQUARE_BRACKET bracket_seen expresion R_SQUARE_BRACKET bracket_seen .)
    COMMA           reduce using rule 55 (dim -> L_SQUARE_BRACKET bracket_seen expresion R_SQUARE_BRACKET bracket_seen .)
    R_PARENTHESIS   reduce using rule 55 (dim -> L_SQUARE_BRACKET bracket_seen expresion R_SQUARE_BRACKET bracket_seen .)
    DETERMINANT     reduce using rule 55 (dim -> L_SQUARE_BRACKET bracket_seen expresion R_SQUARE_BRACKET bracket_seen .)
    TRANSPOSED      reduce using rule 55 (dim -> L_SQUARE_BRACKET bracket_seen expresion R_SQUARE_BRACKET bracket_seen .)
    INVERSE         reduce using rule 55 (dim -> L_SQUARE_BRACKET bracket_seen expresion R_SQUARE_BRACKET bracket_seen .)
    MULTIPLY        reduce using rule 55 (dim -> L_SQUARE_BRACKET bracket_seen expresion R_SQUARE_BRACKET bracket_seen .)
    DIVIDE          reduce using rule 55 (dim -> L_SQUARE_BRACKET bracket_seen expresion R_SQUARE_BRACKET bracket_seen .)
    SUM             reduce using rule 55 (dim -> L_SQUARE_BRACKET bracket_seen expresion R_SQUARE_BRACKET bracket_seen .)
    SUBTRACT        reduce using rule 55 (dim -> L_SQUARE_BRACKET bracket_seen expresion R_SQUARE_BRACKET bracket_seen .)
    EQUALS          reduce using rule 55 (dim -> L_SQUARE_BRACKET bracket_seen expresion R_SQUARE_BRACKET bracket_seen .)
    NOT_EQUAL       reduce using rule 55 (dim -> L_SQUARE_BRACKET bracket_seen expresion R_SQUARE_BRACKET bracket_seen .)
    LESS_THAN       reduce using rule 55 (dim -> L_SQUARE_BRACKET bracket_seen expresion R_SQUARE_BRACKET bracket_seen .)
    LESS_THAN_EQUAL reduce using rule 55 (dim -> L_SQUARE_BRACKET bracket_seen expresion R_SQUARE_BRACKET bracket_seen .)
    GREATER_THAN    reduce using rule 55 (dim -> L_SQUARE_BRACKET bracket_seen expresion R_SQUARE_BRACKET bracket_seen .)
    GREATER_THAN_EQUAL reduce using rule 55 (dim -> L_SQUARE_BRACKET bracket_seen expresion R_SQUARE_BRACKET bracket_seen .)
    AND             reduce using rule 55 (dim -> L_SQUARE_BRACKET bracket_seen expresion R_SQUARE_BRACKET bracket_seen .)
    OR              reduce using rule 55 (dim -> L_SQUARE_BRACKET bracket_seen expresion R_SQUARE_BRACKET bracket_seen .)
    SEMICOLON       reduce using rule 55 (dim -> L_SQUARE_BRACKET bracket_seen expresion R_SQUARE_BRACKET bracket_seen .)
    R_SQUARE_BRACKET reduce using rule 55 (dim -> L_SQUARE_BRACKET bracket_seen expresion R_SQUARE_BRACKET bracket_seen .)
    HASTA           reduce using rule 55 (dim -> L_SQUARE_BRACKET bracket_seen expresion R_SQUARE_BRACKET bracket_seen .)
    HACER           reduce using rule 55 (dim -> L_SQUARE_BRACKET bracket_seen expresion R_SQUARE_BRACKET bracket_seen .)


state 268

    (98) llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .

    DETERMINANT     reduce using rule 98 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    TRANSPOSED      reduce using rule 98 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    INVERSE         reduce using rule 98 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    MULTIPLY        reduce using rule 98 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    DIVIDE          reduce using rule 98 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    SUM             reduce using rule 98 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    SUBTRACT        reduce using rule 98 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    EQUALS          reduce using rule 98 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    NOT_EQUAL       reduce using rule 98 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    LESS_THAN       reduce using rule 98 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    LESS_THAN_EQUAL reduce using rule 98 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    GREATER_THAN    reduce using rule 98 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    GREATER_THAN_EQUAL reduce using rule 98 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    AND             reduce using rule 98 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    OR              reduce using rule 98 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    R_PARENTHESIS   reduce using rule 98 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    COMMA           reduce using rule 98 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    SEMICOLON       reduce using rule 98 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    R_SQUARE_BRACKET reduce using rule 98 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    HASTA           reduce using rule 98 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    HACER           reduce using rule 98 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)


state 269

    (121) decisionp -> SINO jump_else . bloque update_jump
    (37) bloque -> . L_CURLY_BRACKET bloquep R_CURLY_BRACKET

    L_CURLY_BRACKET shift and go to state 41

    bloque                         shift and go to state 273

state 270

    (122) decisionp -> empty update_jump .

    ID              reduce using rule 122 (decisionp -> empty update_jump .)
    REGRESA         reduce using rule 122 (decisionp -> empty update_jump .)
    LECTURA         reduce using rule 122 (decisionp -> empty update_jump .)
    ESCRIBE         reduce using rule 122 (decisionp -> empty update_jump .)
    SI              reduce using rule 122 (decisionp -> empty update_jump .)
    MIENTRAS        reduce using rule 122 (decisionp -> empty update_jump .)
    DESDE           reduce using rule 122 (decisionp -> empty update_jump .)
    R_CURLY_BRACKET reduce using rule 122 (decisionp -> empty update_jump .)


state 271

    (124) cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle .

    ID              reduce using rule 124 (cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle .)
    REGRESA         reduce using rule 124 (cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle .)
    LECTURA         reduce using rule 124 (cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle .)
    ESCRIBE         reduce using rule 124 (cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle .)
    SI              reduce using rule 124 (cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle .)
    MIENTRAS        reduce using rule 124 (cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle .)
    DESDE           reduce using rule 124 (cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle .)
    R_CURLY_BRACKET reduce using rule 124 (cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle .)


state 272

    (127) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA . expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle
    (59) expresion -> . relacional apply_operation_expresion expresionp
    (64) relacional -> . aritmetica apply_operation_relational relacionalp
    (73) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (78) factor -> . matriz apply_operation_factor factorp
    (84) matriz -> . cte matrizp
    (85) matriz -> . NOT operation_seen cte apply_not
    (92) cte -> . CTE_INT
    (93) cte -> . CTE_FLOAT
    (94) cte -> . CTE_CHAR
    (95) cte -> . llamadaFuncion
    (96) cte -> . ID operand_seen dimId
    (97) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (98) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    NOT             shift and go to state 105
    CTE_INT         shift and go to state 106
    CTE_FLOAT       shift and go to state 107
    CTE_CHAR        shift and go to state 108
    ID              shift and go to state 110
    L_PARENTHESIS   shift and go to state 98

    expresion                      shift and go to state 274
    relacional                     shift and go to state 100
    aritmetica                     shift and go to state 101
    factor                         shift and go to state 102
    matriz                         shift and go to state 103
    cte                            shift and go to state 104
    llamadaFuncion                 shift and go to state 109

state 273

    (121) decisionp -> SINO jump_else bloque . update_jump
    (120) update_jump -> .

    ID              reduce using rule 120 (update_jump -> .)
    REGRESA         reduce using rule 120 (update_jump -> .)
    LECTURA         reduce using rule 120 (update_jump -> .)
    ESCRIBE         reduce using rule 120 (update_jump -> .)
    SI              reduce using rule 120 (update_jump -> .)
    MIENTRAS        reduce using rule 120 (update_jump -> .)
    DESDE           reduce using rule 120 (update_jump -> .)
    R_CURLY_BRACKET reduce using rule 120 (update_jump -> .)

    update_jump                    shift and go to state 275

state 274

    (127) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion . jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle
    (125) jump_cycle -> .

    HACER           reduce using rule 125 (jump_cycle -> .)

    jump_cycle                     shift and go to state 276

state 275

    (121) decisionp -> SINO jump_else bloque update_jump .

    ID              reduce using rule 121 (decisionp -> SINO jump_else bloque update_jump .)
    REGRESA         reduce using rule 121 (decisionp -> SINO jump_else bloque update_jump .)
    LECTURA         reduce using rule 121 (decisionp -> SINO jump_else bloque update_jump .)
    ESCRIBE         reduce using rule 121 (decisionp -> SINO jump_else bloque update_jump .)
    SI              reduce using rule 121 (decisionp -> SINO jump_else bloque update_jump .)
    MIENTRAS        reduce using rule 121 (decisionp -> SINO jump_else bloque update_jump .)
    DESDE           reduce using rule 121 (decisionp -> SINO jump_else bloque update_jump .)
    R_CURLY_BRACKET reduce using rule 121 (decisionp -> SINO jump_else bloque update_jump .)


state 276

    (127) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle . add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle
    (128) add_gt -> .

    HACER           reduce using rule 128 (add_gt -> .)

    add_gt                         shift and go to state 277

state 277

    (127) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt . apply_operation_relational jump_false HACER bloque add_one update_jump_cycle
    (72) apply_operation_relational -> .

    HACER           reduce using rule 72 (apply_operation_relational -> .)

    apply_operation_relational     shift and go to state 278

state 278

    (127) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational . jump_false HACER bloque add_one update_jump_cycle
    (119) jump_false -> .

    HACER           reduce using rule 119 (jump_false -> .)

    jump_false                     shift and go to state 279

state 279

    (127) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false . HACER bloque add_one update_jump_cycle

    HACER           shift and go to state 280


state 280

    (127) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER . bloque add_one update_jump_cycle
    (37) bloque -> . L_CURLY_BRACKET bloquep R_CURLY_BRACKET

    L_CURLY_BRACKET shift and go to state 41

    bloque                         shift and go to state 281

state 281

    (127) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque . add_one update_jump_cycle
    (129) add_one -> .

    ID              reduce using rule 129 (add_one -> .)
    REGRESA         reduce using rule 129 (add_one -> .)
    LECTURA         reduce using rule 129 (add_one -> .)
    ESCRIBE         reduce using rule 129 (add_one -> .)
    SI              reduce using rule 129 (add_one -> .)
    MIENTRAS        reduce using rule 129 (add_one -> .)
    DESDE           reduce using rule 129 (add_one -> .)
    R_CURLY_BRACKET reduce using rule 129 (add_one -> .)

    add_one                        shift and go to state 282

state 282

    (127) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one . update_jump_cycle
    (126) update_jump_cycle -> .

    ID              reduce using rule 126 (update_jump_cycle -> .)
    REGRESA         reduce using rule 126 (update_jump_cycle -> .)
    LECTURA         reduce using rule 126 (update_jump_cycle -> .)
    ESCRIBE         reduce using rule 126 (update_jump_cycle -> .)
    SI              reduce using rule 126 (update_jump_cycle -> .)
    MIENTRAS        reduce using rule 126 (update_jump_cycle -> .)
    DESDE           reduce using rule 126 (update_jump_cycle -> .)
    R_CURLY_BRACKET reduce using rule 126 (update_jump_cycle -> .)

    update_jump_cycle              shift and go to state 283

state 283

    (127) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle .

    ID              reduce using rule 127 (cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle .)
    REGRESA         reduce using rule 127 (cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle .)
    LECTURA         reduce using rule 127 (cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle .)
    ESCRIBE         reduce using rule 127 (cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle .)
    SI              reduce using rule 127 (cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle .)
    MIENTRAS        reduce using rule 127 (cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle .)
    DESDE           reduce using rule 127 (cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle .)
    R_CURLY_BRACKET reduce using rule 127 (cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle .)

