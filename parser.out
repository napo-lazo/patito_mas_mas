Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> programa
Rule 2     programa -> PROGRAMA ID SEMICOLON var funcion PRINCIPAL L_PARENTHESIS R_PARENTHESIS bloque EOF
Rule 3     var -> VAR var_seen varp
Rule 4     var -> empty
Rule 5     var_seen -> <empty>
Rule 6     varp -> tipo tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp
Rule 7     tipo_seen -> <empty>
Rule 8     variable_seen -> <empty>
Rule 9     variable_seen -> error error
Rule 10    delete_type -> <empty>
Rule 11    varpp -> COMMA ID variable_seen varppp varpp
Rule 12    varpp -> empty
Rule 13    varppp -> dimDeclare
Rule 14    varppp -> dimDeclare dimDeclare
Rule 15    varppp -> empty
Rule 16    varpppp -> varp
Rule 17    varpppp -> empty
Rule 18    dimDeclare -> L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET
Rule 19    dimDeclare -> L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET error error
Rule 20    tipo -> INT
Rule 21    tipo -> FLOAT
Rule 22    tipo -> CHAR
Rule 23    funcion -> FUNCION funcionp
Rule 24    funcion -> empty
Rule 25    funcionp -> tipoRetorno ID L_PARENTHESIS parametro R_PARENTHESIS var bloque funcion
Rule 26    parametro -> tipo ID parametrop
Rule 27    parametro -> empty
Rule 28    parametrop -> COMMA tipo ID parametrop
Rule 29    parametrop -> empty
Rule 30    tipoRetorno -> tipo
Rule 31    tipoRetorno -> VOID
Rule 32    bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET
Rule 33    bloquep -> estatuto bloquep
Rule 34    bloquep -> empty
Rule 35    estatuto -> asignacion
Rule 36    estatuto -> funcionVacia
Rule 37    estatuto -> regresa
Rule 38    estatuto -> lectura
Rule 39    estatuto -> escritura
Rule 40    estatuto -> decision
Rule 41    estatuto -> cicloCondicional
Rule 42    estatuto -> cicloNoCondicional
Rule 43    asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON
Rule 44    operand_seen -> <empty>
Rule 45    apply_operation_assign -> <empty>
Rule 46    dimId -> dim
Rule 47    dimId -> dim dim
Rule 48    dimId -> empty
Rule 49    dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET
Rule 50    expresion -> relacional apply_operation_expresion expresionp
Rule 51    expresion -> NOT relacional expresionp
Rule 52    expresionp -> AND operation_seen expresion
Rule 53    expresionp -> OR operation_seen expresion
Rule 54    expresionp -> empty
Rule 55    apply_operation_expresion -> <empty>
Rule 56    relacional -> aritmetica apply_operation_relational relacionalp
Rule 57    relacionalp -> EQUALS operation_seen relacional
Rule 58    relacionalp -> NOT_EQUAL operation_seen relacional
Rule 59    relacionalp -> LESS_THAN operation_seen relacional
Rule 60    relacionalp -> LESS_THAN_EQUAL operation_seen relacional
Rule 61    relacionalp -> GREATER_THAN operation_seen relacional
Rule 62    relacionalp -> GREATER_THAN_EQUAL operation_seen relacional
Rule 63    relacionalp -> empty
Rule 64    apply_operation_relational -> <empty>
Rule 65    aritmetica -> factor apply_operation_aritmetica aritmeticap
Rule 66    aritmeticap -> SUM operation_seen aritmetica
Rule 67    aritmeticap -> SUBTRACT operation_seen aritmetica
Rule 68    aritmeticap -> empty
Rule 69    apply_operation_aritmetica -> <empty>
Rule 70    factor -> matriz apply_operation_factor factorp
Rule 71    factorp -> MULTIPLY operation_seen factor
Rule 72    factorp -> DIVIDE operation_seen factor
Rule 73    factorp -> empty
Rule 74    apply_operation_factor -> <empty>
Rule 75    operation_seen -> <empty>
Rule 76    matriz -> cte matrizp
Rule 77    matrizp -> DETERMINANT
Rule 78    matrizp -> TRANSPOSED
Rule 79    matrizp -> INVERSE
Rule 80    matrizp -> empty
Rule 81    cte -> CTE_INT
Rule 82    cte -> CTE_FLOAT
Rule 83    cte -> CTE_CHAR
Rule 84    cte -> llamadaFuncion
Rule 85    cte -> ID dimId
Rule 86    cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
Rule 87    llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS
Rule 88    llamadaFuncionp -> COMMA expresion
Rule 89    llamadaFuncionp -> empty
Rule 90    funcionVacia -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS SEMICOLON
Rule 91    regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON
Rule 92    lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON
Rule 93    lecturap -> ID dimId lecturapp
Rule 94    lecturapp -> COMMA lecturap
Rule 95    lecturapp -> empty
Rule 96    escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON
Rule 97    escriturap -> LETRERO escriturapp
Rule 98    escriturap -> expresion escriturapp
Rule 99    escriturapp -> COMMA escriturap
Rule 100   escriturapp -> empty
Rule 101   decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp
Rule 102   jump_false -> <empty>
Rule 103   update_jump -> <empty>
Rule 104   decisionp -> SINO jump bloque update_jump
Rule 105   decisionp -> empty update_jump
Rule 106   jump -> <empty>
Rule 107   cicloCondicional -> MIENTRAS L_PARENTHESIS expresion R_PARENTHESIS HAZ bloque
Rule 108   cicloNoCondicional -> DESDE ID dimId ASSIGN expresion HASTA expresion HACER bloque EOF
Rule 109   empty -> <empty>

Terminals, with rules where they appear

AND                  : 52
ASSIGN               : 43 108
CHAR                 : 22
COLON                : 6
COMMA                : 11 28 88 94 99
CTE_CHAR             : 83
CTE_FLOAT            : 82
CTE_INT              : 18 19 81
DESDE                : 108
DETERMINANT          : 77
DIVIDE               : 72
EOF                  : 2 108
EQUALS               : 57
ESCRIBE              : 96
FLOAT                : 21
FUNCION              : 23
GREATER_THAN         : 61
GREATER_THAN_EQUAL   : 62
HACER                : 108
HASTA                : 108
HAZ                  : 101 107
ID                   : 2 6 11 25 26 28 43 85 87 90 93 108
INT                  : 20
INVERSE              : 79
LECTURA              : 92
LESS_THAN            : 59
LESS_THAN_EQUAL      : 60
LETRERO              : 97
L_CURLY_BRACKET      : 32
L_PARENTHESIS        : 2 25 86 87 90 91 92 96 101 107
L_SQUARE_BRACKET     : 18 19 49
MIENTRAS             : 107
MULTIPLY             : 71
NOT                  : 51
NOT_EQUAL            : 58
OR                   : 53
PRINCIPAL            : 2
PROGRAMA             : 2
REGRESA              : 91
R_CURLY_BRACKET      : 32
R_PARENTHESIS        : 2 25 86 87 90 91 92 96 101 107
R_SQUARE_BRACKET     : 18 19 49
SEMICOLON            : 2 6 43 90 91 92 96
SI                   : 101
SINO                 : 104
SUBTRACT             : 67
SUM                  : 66
TRANSPOSED           : 78
VAR                  : 3
VOID                 : 31
error                : 9 9 19 19

Nonterminals, with rules where they appear

apply_operation_aritmetica : 65
apply_operation_assign : 43
apply_operation_expresion : 50
apply_operation_factor : 70
apply_operation_relational : 56
aritmetica           : 56 66 67
aritmeticap          : 65
asignacion           : 35
bloque               : 2 25 101 104 107 108
bloquep              : 32 33
cicloCondicional     : 41
cicloNoCondicional   : 42
cte                  : 76
decision             : 40
decisionp            : 101
delete_type          : 6
dim                  : 46 47 47
dimDeclare           : 13 14 14
dimId                : 43 85 93 108
empty                : 4 12 15 17 24 27 29 34 48 54 63 68 73 80 89 95 100 105
escritura            : 39
escriturap           : 96 99
escriturapp          : 97 98
estatuto             : 33
expresion            : 43 49 52 53 86 87 88 90 91 98 101 107 108 108
expresionp           : 50 51
factor               : 65 71 72
factorp              : 70
funcion              : 2 25
funcionVacia         : 36
funcionp             : 23
jump                 : 104
jump_false           : 101
lectura              : 38
lecturap             : 92 94
lecturapp            : 93
llamadaFuncion       : 84
llamadaFuncionp      : 87 90
matriz               : 70
matrizp              : 76
operand_seen         : 43
operation_seen       : 43 52 53 57 58 59 60 61 62 66 67 71 72 86 86
parametro            : 25
parametrop           : 26 28
programa             : 1
regresa              : 37
relacional           : 50 51 57 58 59 60 61 62
relacionalp          : 56
start                : 0
tipo                 : 6 26 28 30
tipoRetorno          : 25
tipo_seen            : 6
update_jump          : 104 105
var                  : 2 25
var_seen             : 3
variable_seen        : 6 11
varp                 : 3 16
varpp                : 6 11
varppp               : 6 11
varpppp              : 6

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . programa
    (2) programa -> . PROGRAMA ID SEMICOLON var funcion PRINCIPAL L_PARENTHESIS R_PARENTHESIS bloque EOF

    PROGRAMA        shift and go to state 3

    start                          shift and go to state 1
    programa                       shift and go to state 2

state 1

    (0) S' -> start .



state 2

    (1) start -> programa .

    $end            reduce using rule 1 (start -> programa .)


state 3

    (2) programa -> PROGRAMA . ID SEMICOLON var funcion PRINCIPAL L_PARENTHESIS R_PARENTHESIS bloque EOF

    ID              shift and go to state 4


state 4

    (2) programa -> PROGRAMA ID . SEMICOLON var funcion PRINCIPAL L_PARENTHESIS R_PARENTHESIS bloque EOF

    SEMICOLON       shift and go to state 5


state 5

    (2) programa -> PROGRAMA ID SEMICOLON . var funcion PRINCIPAL L_PARENTHESIS R_PARENTHESIS bloque EOF
    (3) var -> . VAR var_seen varp
    (4) var -> . empty
    (109) empty -> .

    VAR             shift and go to state 7
    FUNCION         reduce using rule 109 (empty -> .)
    PRINCIPAL       reduce using rule 109 (empty -> .)

    var                            shift and go to state 6
    empty                          shift and go to state 8

state 6

    (2) programa -> PROGRAMA ID SEMICOLON var . funcion PRINCIPAL L_PARENTHESIS R_PARENTHESIS bloque EOF
    (23) funcion -> . FUNCION funcionp
    (24) funcion -> . empty
    (109) empty -> .

    FUNCION         shift and go to state 10
    PRINCIPAL       reduce using rule 109 (empty -> .)

    funcion                        shift and go to state 9
    empty                          shift and go to state 11

state 7

    (3) var -> VAR . var_seen varp
    (5) var_seen -> .

    INT             reduce using rule 5 (var_seen -> .)
    FLOAT           reduce using rule 5 (var_seen -> .)
    CHAR            reduce using rule 5 (var_seen -> .)

    var_seen                       shift and go to state 12

state 8

    (4) var -> empty .

    FUNCION         reduce using rule 4 (var -> empty .)
    PRINCIPAL       reduce using rule 4 (var -> empty .)
    L_CURLY_BRACKET reduce using rule 4 (var -> empty .)


state 9

    (2) programa -> PROGRAMA ID SEMICOLON var funcion . PRINCIPAL L_PARENTHESIS R_PARENTHESIS bloque EOF

    PRINCIPAL       shift and go to state 13


state 10

    (23) funcion -> FUNCION . funcionp
    (25) funcionp -> . tipoRetorno ID L_PARENTHESIS parametro R_PARENTHESIS var bloque funcion
    (30) tipoRetorno -> . tipo
    (31) tipoRetorno -> . VOID
    (20) tipo -> . INT
    (21) tipo -> . FLOAT
    (22) tipo -> . CHAR

    VOID            shift and go to state 17
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20

    funcionp                       shift and go to state 14
    tipoRetorno                    shift and go to state 15
    tipo                           shift and go to state 16

state 11

    (24) funcion -> empty .

    PRINCIPAL       reduce using rule 24 (funcion -> empty .)


state 12

    (3) var -> VAR var_seen . varp
    (6) varp -> . tipo tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp
    (20) tipo -> . INT
    (21) tipo -> . FLOAT
    (22) tipo -> . CHAR

    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20

    varp                           shift and go to state 21
    tipo                           shift and go to state 22

state 13

    (2) programa -> PROGRAMA ID SEMICOLON var funcion PRINCIPAL . L_PARENTHESIS R_PARENTHESIS bloque EOF

    L_PARENTHESIS   shift and go to state 23


state 14

    (23) funcion -> FUNCION funcionp .

    PRINCIPAL       reduce using rule 23 (funcion -> FUNCION funcionp .)


state 15

    (25) funcionp -> tipoRetorno . ID L_PARENTHESIS parametro R_PARENTHESIS var bloque funcion

    ID              shift and go to state 24


state 16

    (30) tipoRetorno -> tipo .

    ID              reduce using rule 30 (tipoRetorno -> tipo .)


state 17

    (31) tipoRetorno -> VOID .

    ID              reduce using rule 31 (tipoRetorno -> VOID .)


state 18

    (20) tipo -> INT .

    ID              reduce using rule 20 (tipo -> INT .)
    COLON           reduce using rule 20 (tipo -> INT .)


state 19

    (21) tipo -> FLOAT .

    ID              reduce using rule 21 (tipo -> FLOAT .)
    COLON           reduce using rule 21 (tipo -> FLOAT .)


state 20

    (22) tipo -> CHAR .

    ID              reduce using rule 22 (tipo -> CHAR .)
    COLON           reduce using rule 22 (tipo -> CHAR .)


state 21

    (3) var -> VAR var_seen varp .

    FUNCION         reduce using rule 3 (var -> VAR var_seen varp .)
    PRINCIPAL       reduce using rule 3 (var -> VAR var_seen varp .)
    L_CURLY_BRACKET reduce using rule 3 (var -> VAR var_seen varp .)


state 22

    (6) varp -> tipo . tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp
    (7) tipo_seen -> .

    COLON           reduce using rule 7 (tipo_seen -> .)

    tipo_seen                      shift and go to state 25

state 23

    (2) programa -> PROGRAMA ID SEMICOLON var funcion PRINCIPAL L_PARENTHESIS . R_PARENTHESIS bloque EOF

    R_PARENTHESIS   shift and go to state 26


state 24

    (25) funcionp -> tipoRetorno ID . L_PARENTHESIS parametro R_PARENTHESIS var bloque funcion

    L_PARENTHESIS   shift and go to state 27


state 25

    (6) varp -> tipo tipo_seen . COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp

    COLON           shift and go to state 28


state 26

    (2) programa -> PROGRAMA ID SEMICOLON var funcion PRINCIPAL L_PARENTHESIS R_PARENTHESIS . bloque EOF
    (32) bloque -> . L_CURLY_BRACKET bloquep R_CURLY_BRACKET

    L_CURLY_BRACKET shift and go to state 30

    bloque                         shift and go to state 29

state 27

    (25) funcionp -> tipoRetorno ID L_PARENTHESIS . parametro R_PARENTHESIS var bloque funcion
    (26) parametro -> . tipo ID parametrop
    (27) parametro -> . empty
    (20) tipo -> . INT
    (21) tipo -> . FLOAT
    (22) tipo -> . CHAR
    (109) empty -> .

    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20
    R_PARENTHESIS   reduce using rule 109 (empty -> .)

    parametro                      shift and go to state 31
    tipo                           shift and go to state 32
    empty                          shift and go to state 33

state 28

    (6) varp -> tipo tipo_seen COLON . ID variable_seen varppp varpp delete_type SEMICOLON varpppp

    ID              shift and go to state 34


state 29

    (2) programa -> PROGRAMA ID SEMICOLON var funcion PRINCIPAL L_PARENTHESIS R_PARENTHESIS bloque . EOF

    EOF             shift and go to state 35


state 30

    (32) bloque -> L_CURLY_BRACKET . bloquep R_CURLY_BRACKET
    (33) bloquep -> . estatuto bloquep
    (34) bloquep -> . empty
    (35) estatuto -> . asignacion
    (36) estatuto -> . funcionVacia
    (37) estatuto -> . regresa
    (38) estatuto -> . lectura
    (39) estatuto -> . escritura
    (40) estatuto -> . decision
    (41) estatuto -> . cicloCondicional
    (42) estatuto -> . cicloNoCondicional
    (109) empty -> .
    (43) asignacion -> . ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON
    (90) funcionVacia -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS SEMICOLON
    (91) regresa -> . REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON
    (92) lectura -> . LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON
    (96) escritura -> . ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON
    (101) decision -> . SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp
    (107) cicloCondicional -> . MIENTRAS L_PARENTHESIS expresion R_PARENTHESIS HAZ bloque
    (108) cicloNoCondicional -> . DESDE ID dimId ASSIGN expresion HASTA expresion HACER bloque EOF

    R_CURLY_BRACKET reduce using rule 109 (empty -> .)
    ID              shift and go to state 47
    REGRESA         shift and go to state 48
    LECTURA         shift and go to state 49
    ESCRIBE         shift and go to state 50
    SI              shift and go to state 51
    MIENTRAS        shift and go to state 52
    DESDE           shift and go to state 53

    bloquep                        shift and go to state 36
    estatuto                       shift and go to state 37
    empty                          shift and go to state 38
    asignacion                     shift and go to state 39
    funcionVacia                   shift and go to state 40
    regresa                        shift and go to state 41
    lectura                        shift and go to state 42
    escritura                      shift and go to state 43
    decision                       shift and go to state 44
    cicloCondicional               shift and go to state 45
    cicloNoCondicional             shift and go to state 46

state 31

    (25) funcionp -> tipoRetorno ID L_PARENTHESIS parametro . R_PARENTHESIS var bloque funcion

    R_PARENTHESIS   shift and go to state 54


state 32

    (26) parametro -> tipo . ID parametrop

    ID              shift and go to state 55


state 33

    (27) parametro -> empty .

    R_PARENTHESIS   reduce using rule 27 (parametro -> empty .)


state 34

    (6) varp -> tipo tipo_seen COLON ID . variable_seen varppp varpp delete_type SEMICOLON varpppp
    (8) variable_seen -> .
    (9) variable_seen -> . error error

    L_SQUARE_BRACKET reduce using rule 8 (variable_seen -> .)
    COMMA           reduce using rule 8 (variable_seen -> .)
    SEMICOLON       reduce using rule 8 (variable_seen -> .)
    error           shift and go to state 57

    variable_seen                  shift and go to state 56

state 35

    (2) programa -> PROGRAMA ID SEMICOLON var funcion PRINCIPAL L_PARENTHESIS R_PARENTHESIS bloque EOF .

    $end            reduce using rule 2 (programa -> PROGRAMA ID SEMICOLON var funcion PRINCIPAL L_PARENTHESIS R_PARENTHESIS bloque EOF .)


state 36

    (32) bloque -> L_CURLY_BRACKET bloquep . R_CURLY_BRACKET

    R_CURLY_BRACKET shift and go to state 58


state 37

    (33) bloquep -> estatuto . bloquep
    (33) bloquep -> . estatuto bloquep
    (34) bloquep -> . empty
    (35) estatuto -> . asignacion
    (36) estatuto -> . funcionVacia
    (37) estatuto -> . regresa
    (38) estatuto -> . lectura
    (39) estatuto -> . escritura
    (40) estatuto -> . decision
    (41) estatuto -> . cicloCondicional
    (42) estatuto -> . cicloNoCondicional
    (109) empty -> .
    (43) asignacion -> . ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON
    (90) funcionVacia -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS SEMICOLON
    (91) regresa -> . REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON
    (92) lectura -> . LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON
    (96) escritura -> . ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON
    (101) decision -> . SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp
    (107) cicloCondicional -> . MIENTRAS L_PARENTHESIS expresion R_PARENTHESIS HAZ bloque
    (108) cicloNoCondicional -> . DESDE ID dimId ASSIGN expresion HASTA expresion HACER bloque EOF

    R_CURLY_BRACKET reduce using rule 109 (empty -> .)
    ID              shift and go to state 47
    REGRESA         shift and go to state 48
    LECTURA         shift and go to state 49
    ESCRIBE         shift and go to state 50
    SI              shift and go to state 51
    MIENTRAS        shift and go to state 52
    DESDE           shift and go to state 53

    estatuto                       shift and go to state 37
    bloquep                        shift and go to state 59
    empty                          shift and go to state 38
    asignacion                     shift and go to state 39
    funcionVacia                   shift and go to state 40
    regresa                        shift and go to state 41
    lectura                        shift and go to state 42
    escritura                      shift and go to state 43
    decision                       shift and go to state 44
    cicloCondicional               shift and go to state 45
    cicloNoCondicional             shift and go to state 46

state 38

    (34) bloquep -> empty .

    R_CURLY_BRACKET reduce using rule 34 (bloquep -> empty .)


state 39

    (35) estatuto -> asignacion .

    ID              reduce using rule 35 (estatuto -> asignacion .)
    REGRESA         reduce using rule 35 (estatuto -> asignacion .)
    LECTURA         reduce using rule 35 (estatuto -> asignacion .)
    ESCRIBE         reduce using rule 35 (estatuto -> asignacion .)
    SI              reduce using rule 35 (estatuto -> asignacion .)
    MIENTRAS        reduce using rule 35 (estatuto -> asignacion .)
    DESDE           reduce using rule 35 (estatuto -> asignacion .)
    R_CURLY_BRACKET reduce using rule 35 (estatuto -> asignacion .)


state 40

    (36) estatuto -> funcionVacia .

    ID              reduce using rule 36 (estatuto -> funcionVacia .)
    REGRESA         reduce using rule 36 (estatuto -> funcionVacia .)
    LECTURA         reduce using rule 36 (estatuto -> funcionVacia .)
    ESCRIBE         reduce using rule 36 (estatuto -> funcionVacia .)
    SI              reduce using rule 36 (estatuto -> funcionVacia .)
    MIENTRAS        reduce using rule 36 (estatuto -> funcionVacia .)
    DESDE           reduce using rule 36 (estatuto -> funcionVacia .)
    R_CURLY_BRACKET reduce using rule 36 (estatuto -> funcionVacia .)


state 41

    (37) estatuto -> regresa .

    ID              reduce using rule 37 (estatuto -> regresa .)
    REGRESA         reduce using rule 37 (estatuto -> regresa .)
    LECTURA         reduce using rule 37 (estatuto -> regresa .)
    ESCRIBE         reduce using rule 37 (estatuto -> regresa .)
    SI              reduce using rule 37 (estatuto -> regresa .)
    MIENTRAS        reduce using rule 37 (estatuto -> regresa .)
    DESDE           reduce using rule 37 (estatuto -> regresa .)
    R_CURLY_BRACKET reduce using rule 37 (estatuto -> regresa .)


state 42

    (38) estatuto -> lectura .

    ID              reduce using rule 38 (estatuto -> lectura .)
    REGRESA         reduce using rule 38 (estatuto -> lectura .)
    LECTURA         reduce using rule 38 (estatuto -> lectura .)
    ESCRIBE         reduce using rule 38 (estatuto -> lectura .)
    SI              reduce using rule 38 (estatuto -> lectura .)
    MIENTRAS        reduce using rule 38 (estatuto -> lectura .)
    DESDE           reduce using rule 38 (estatuto -> lectura .)
    R_CURLY_BRACKET reduce using rule 38 (estatuto -> lectura .)


state 43

    (39) estatuto -> escritura .

    ID              reduce using rule 39 (estatuto -> escritura .)
    REGRESA         reduce using rule 39 (estatuto -> escritura .)
    LECTURA         reduce using rule 39 (estatuto -> escritura .)
    ESCRIBE         reduce using rule 39 (estatuto -> escritura .)
    SI              reduce using rule 39 (estatuto -> escritura .)
    MIENTRAS        reduce using rule 39 (estatuto -> escritura .)
    DESDE           reduce using rule 39 (estatuto -> escritura .)
    R_CURLY_BRACKET reduce using rule 39 (estatuto -> escritura .)


state 44

    (40) estatuto -> decision .

    ID              reduce using rule 40 (estatuto -> decision .)
    REGRESA         reduce using rule 40 (estatuto -> decision .)
    LECTURA         reduce using rule 40 (estatuto -> decision .)
    ESCRIBE         reduce using rule 40 (estatuto -> decision .)
    SI              reduce using rule 40 (estatuto -> decision .)
    MIENTRAS        reduce using rule 40 (estatuto -> decision .)
    DESDE           reduce using rule 40 (estatuto -> decision .)
    R_CURLY_BRACKET reduce using rule 40 (estatuto -> decision .)


state 45

    (41) estatuto -> cicloCondicional .

    ID              reduce using rule 41 (estatuto -> cicloCondicional .)
    REGRESA         reduce using rule 41 (estatuto -> cicloCondicional .)
    LECTURA         reduce using rule 41 (estatuto -> cicloCondicional .)
    ESCRIBE         reduce using rule 41 (estatuto -> cicloCondicional .)
    SI              reduce using rule 41 (estatuto -> cicloCondicional .)
    MIENTRAS        reduce using rule 41 (estatuto -> cicloCondicional .)
    DESDE           reduce using rule 41 (estatuto -> cicloCondicional .)
    R_CURLY_BRACKET reduce using rule 41 (estatuto -> cicloCondicional .)


state 46

    (42) estatuto -> cicloNoCondicional .

    ID              reduce using rule 42 (estatuto -> cicloNoCondicional .)
    REGRESA         reduce using rule 42 (estatuto -> cicloNoCondicional .)
    LECTURA         reduce using rule 42 (estatuto -> cicloNoCondicional .)
    ESCRIBE         reduce using rule 42 (estatuto -> cicloNoCondicional .)
    SI              reduce using rule 42 (estatuto -> cicloNoCondicional .)
    MIENTRAS        reduce using rule 42 (estatuto -> cicloNoCondicional .)
    DESDE           reduce using rule 42 (estatuto -> cicloNoCondicional .)
    R_CURLY_BRACKET reduce using rule 42 (estatuto -> cicloNoCondicional .)


state 47

    (43) asignacion -> ID . operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON
    (90) funcionVacia -> ID . L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS SEMICOLON
    (44) operand_seen -> .

    L_PARENTHESIS   shift and go to state 61
    L_SQUARE_BRACKET reduce using rule 44 (operand_seen -> .)
    ASSIGN          reduce using rule 44 (operand_seen -> .)

    operand_seen                   shift and go to state 60

state 48

    (91) regresa -> REGRESA . L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON

    L_PARENTHESIS   shift and go to state 62


state 49

    (92) lectura -> LECTURA . L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON

    L_PARENTHESIS   shift and go to state 63


state 50

    (96) escritura -> ESCRIBE . L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON

    L_PARENTHESIS   shift and go to state 64


state 51

    (101) decision -> SI . L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp

    L_PARENTHESIS   shift and go to state 65


state 52

    (107) cicloCondicional -> MIENTRAS . L_PARENTHESIS expresion R_PARENTHESIS HAZ bloque

    L_PARENTHESIS   shift and go to state 66


state 53

    (108) cicloNoCondicional -> DESDE . ID dimId ASSIGN expresion HASTA expresion HACER bloque EOF

    ID              shift and go to state 67


state 54

    (25) funcionp -> tipoRetorno ID L_PARENTHESIS parametro R_PARENTHESIS . var bloque funcion
    (3) var -> . VAR var_seen varp
    (4) var -> . empty
    (109) empty -> .

    VAR             shift and go to state 7
    L_CURLY_BRACKET reduce using rule 109 (empty -> .)

    var                            shift and go to state 68
    empty                          shift and go to state 8

state 55

    (26) parametro -> tipo ID . parametrop
    (28) parametrop -> . COMMA tipo ID parametrop
    (29) parametrop -> . empty
    (109) empty -> .

    COMMA           shift and go to state 70
    R_PARENTHESIS   reduce using rule 109 (empty -> .)

    parametrop                     shift and go to state 69
    empty                          shift and go to state 71

state 56

    (6) varp -> tipo tipo_seen COLON ID variable_seen . varppp varpp delete_type SEMICOLON varpppp
    (13) varppp -> . dimDeclare
    (14) varppp -> . dimDeclare dimDeclare
    (15) varppp -> . empty
    (18) dimDeclare -> . L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET
    (19) dimDeclare -> . L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET error error
    (109) empty -> .

    L_SQUARE_BRACKET shift and go to state 75
    COMMA           reduce using rule 109 (empty -> .)
    SEMICOLON       reduce using rule 109 (empty -> .)

    varppp                         shift and go to state 72
    dimDeclare                     shift and go to state 73
    empty                          shift and go to state 74

state 57

    (9) variable_seen -> error . error

    error           shift and go to state 76


state 58

    (32) bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .

    EOF             reduce using rule 32 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    FUNCION         reduce using rule 32 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    PRINCIPAL       reduce using rule 32 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    ID              reduce using rule 32 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    REGRESA         reduce using rule 32 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    LECTURA         reduce using rule 32 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    ESCRIBE         reduce using rule 32 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    SI              reduce using rule 32 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    MIENTRAS        reduce using rule 32 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    DESDE           reduce using rule 32 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    R_CURLY_BRACKET reduce using rule 32 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    SINO            reduce using rule 32 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)


state 59

    (33) bloquep -> estatuto bloquep .

    R_CURLY_BRACKET reduce using rule 33 (bloquep -> estatuto bloquep .)


state 60

    (43) asignacion -> ID operand_seen . dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON
    (46) dimId -> . dim
    (47) dimId -> . dim dim
    (48) dimId -> . empty
    (49) dim -> . L_SQUARE_BRACKET expresion R_SQUARE_BRACKET
    (109) empty -> .

    L_SQUARE_BRACKET shift and go to state 80
    ASSIGN          reduce using rule 109 (empty -> .)

    dimId                          shift and go to state 77
    dim                            shift and go to state 78
    empty                          shift and go to state 79

state 61

    (90) funcionVacia -> ID L_PARENTHESIS . expresion llamadaFuncionp R_PARENTHESIS SEMICOLON
    (50) expresion -> . relacional apply_operation_expresion expresionp
    (51) expresion -> . NOT relacional expresionp
    (56) relacional -> . aritmetica apply_operation_relational relacionalp
    (65) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (70) factor -> . matriz apply_operation_factor factorp
    (76) matriz -> . cte matrizp
    (81) cte -> . CTE_INT
    (82) cte -> . CTE_FLOAT
    (83) cte -> . CTE_CHAR
    (84) cte -> . llamadaFuncion
    (85) cte -> . ID dimId
    (86) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (87) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    NOT             shift and go to state 85
    CTE_INT         shift and go to state 90
    CTE_FLOAT       shift and go to state 91
    CTE_CHAR        shift and go to state 92
    ID              shift and go to state 81
    L_PARENTHESIS   shift and go to state 82

    expresion                      shift and go to state 83
    relacional                     shift and go to state 84
    aritmetica                     shift and go to state 86
    factor                         shift and go to state 87
    matriz                         shift and go to state 88
    cte                            shift and go to state 89
    llamadaFuncion                 shift and go to state 93

state 62

    (91) regresa -> REGRESA L_PARENTHESIS . expresion R_PARENTHESIS SEMICOLON
    (50) expresion -> . relacional apply_operation_expresion expresionp
    (51) expresion -> . NOT relacional expresionp
    (56) relacional -> . aritmetica apply_operation_relational relacionalp
    (65) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (70) factor -> . matriz apply_operation_factor factorp
    (76) matriz -> . cte matrizp
    (81) cte -> . CTE_INT
    (82) cte -> . CTE_FLOAT
    (83) cte -> . CTE_CHAR
    (84) cte -> . llamadaFuncion
    (85) cte -> . ID dimId
    (86) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (87) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    NOT             shift and go to state 85
    CTE_INT         shift and go to state 90
    CTE_FLOAT       shift and go to state 91
    CTE_CHAR        shift and go to state 92
    ID              shift and go to state 81
    L_PARENTHESIS   shift and go to state 82

    expresion                      shift and go to state 94
    relacional                     shift and go to state 84
    aritmetica                     shift and go to state 86
    factor                         shift and go to state 87
    matriz                         shift and go to state 88
    cte                            shift and go to state 89
    llamadaFuncion                 shift and go to state 93

state 63

    (92) lectura -> LECTURA L_PARENTHESIS . lecturap R_PARENTHESIS SEMICOLON
    (93) lecturap -> . ID dimId lecturapp

    ID              shift and go to state 96

    lecturap                       shift and go to state 95

state 64

    (96) escritura -> ESCRIBE L_PARENTHESIS . escriturap R_PARENTHESIS SEMICOLON
    (97) escriturap -> . LETRERO escriturapp
    (98) escriturap -> . expresion escriturapp
    (50) expresion -> . relacional apply_operation_expresion expresionp
    (51) expresion -> . NOT relacional expresionp
    (56) relacional -> . aritmetica apply_operation_relational relacionalp
    (65) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (70) factor -> . matriz apply_operation_factor factorp
    (76) matriz -> . cte matrizp
    (81) cte -> . CTE_INT
    (82) cte -> . CTE_FLOAT
    (83) cte -> . CTE_CHAR
    (84) cte -> . llamadaFuncion
    (85) cte -> . ID dimId
    (86) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (87) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    LETRERO         shift and go to state 98
    NOT             shift and go to state 85
    CTE_INT         shift and go to state 90
    CTE_FLOAT       shift and go to state 91
    CTE_CHAR        shift and go to state 92
    ID              shift and go to state 81
    L_PARENTHESIS   shift and go to state 82

    escriturap                     shift and go to state 97
    expresion                      shift and go to state 99
    relacional                     shift and go to state 84
    aritmetica                     shift and go to state 86
    factor                         shift and go to state 87
    matriz                         shift and go to state 88
    cte                            shift and go to state 89
    llamadaFuncion                 shift and go to state 93

state 65

    (101) decision -> SI L_PARENTHESIS . expresion R_PARENTHESIS jump_false HAZ bloque decisionp
    (50) expresion -> . relacional apply_operation_expresion expresionp
    (51) expresion -> . NOT relacional expresionp
    (56) relacional -> . aritmetica apply_operation_relational relacionalp
    (65) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (70) factor -> . matriz apply_operation_factor factorp
    (76) matriz -> . cte matrizp
    (81) cte -> . CTE_INT
    (82) cte -> . CTE_FLOAT
    (83) cte -> . CTE_CHAR
    (84) cte -> . llamadaFuncion
    (85) cte -> . ID dimId
    (86) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (87) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    NOT             shift and go to state 85
    CTE_INT         shift and go to state 90
    CTE_FLOAT       shift and go to state 91
    CTE_CHAR        shift and go to state 92
    ID              shift and go to state 81
    L_PARENTHESIS   shift and go to state 82

    expresion                      shift and go to state 100
    relacional                     shift and go to state 84
    aritmetica                     shift and go to state 86
    factor                         shift and go to state 87
    matriz                         shift and go to state 88
    cte                            shift and go to state 89
    llamadaFuncion                 shift and go to state 93

state 66

    (107) cicloCondicional -> MIENTRAS L_PARENTHESIS . expresion R_PARENTHESIS HAZ bloque
    (50) expresion -> . relacional apply_operation_expresion expresionp
    (51) expresion -> . NOT relacional expresionp
    (56) relacional -> . aritmetica apply_operation_relational relacionalp
    (65) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (70) factor -> . matriz apply_operation_factor factorp
    (76) matriz -> . cte matrizp
    (81) cte -> . CTE_INT
    (82) cte -> . CTE_FLOAT
    (83) cte -> . CTE_CHAR
    (84) cte -> . llamadaFuncion
    (85) cte -> . ID dimId
    (86) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (87) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    NOT             shift and go to state 85
    CTE_INT         shift and go to state 90
    CTE_FLOAT       shift and go to state 91
    CTE_CHAR        shift and go to state 92
    ID              shift and go to state 81
    L_PARENTHESIS   shift and go to state 82

    expresion                      shift and go to state 101
    relacional                     shift and go to state 84
    aritmetica                     shift and go to state 86
    factor                         shift and go to state 87
    matriz                         shift and go to state 88
    cte                            shift and go to state 89
    llamadaFuncion                 shift and go to state 93

state 67

    (108) cicloNoCondicional -> DESDE ID . dimId ASSIGN expresion HASTA expresion HACER bloque EOF
    (46) dimId -> . dim
    (47) dimId -> . dim dim
    (48) dimId -> . empty
    (49) dim -> . L_SQUARE_BRACKET expresion R_SQUARE_BRACKET
    (109) empty -> .

    L_SQUARE_BRACKET shift and go to state 80
    ASSIGN          reduce using rule 109 (empty -> .)

    dimId                          shift and go to state 102
    dim                            shift and go to state 78
    empty                          shift and go to state 79

state 68

    (25) funcionp -> tipoRetorno ID L_PARENTHESIS parametro R_PARENTHESIS var . bloque funcion
    (32) bloque -> . L_CURLY_BRACKET bloquep R_CURLY_BRACKET

    L_CURLY_BRACKET shift and go to state 30

    bloque                         shift and go to state 103

state 69

    (26) parametro -> tipo ID parametrop .

    R_PARENTHESIS   reduce using rule 26 (parametro -> tipo ID parametrop .)


state 70

    (28) parametrop -> COMMA . tipo ID parametrop
    (20) tipo -> . INT
    (21) tipo -> . FLOAT
    (22) tipo -> . CHAR

    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20

    tipo                           shift and go to state 104

state 71

    (29) parametrop -> empty .

    R_PARENTHESIS   reduce using rule 29 (parametrop -> empty .)


state 72

    (6) varp -> tipo tipo_seen COLON ID variable_seen varppp . varpp delete_type SEMICOLON varpppp
    (11) varpp -> . COMMA ID variable_seen varppp varpp
    (12) varpp -> . empty
    (109) empty -> .

    COMMA           shift and go to state 106
    SEMICOLON       reduce using rule 109 (empty -> .)

    varpp                          shift and go to state 105
    empty                          shift and go to state 107

state 73

    (13) varppp -> dimDeclare .
    (14) varppp -> dimDeclare . dimDeclare
    (18) dimDeclare -> . L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET
    (19) dimDeclare -> . L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET error error

    COMMA           reduce using rule 13 (varppp -> dimDeclare .)
    SEMICOLON       reduce using rule 13 (varppp -> dimDeclare .)
    L_SQUARE_BRACKET shift and go to state 75

    dimDeclare                     shift and go to state 108

state 74

    (15) varppp -> empty .

    COMMA           reduce using rule 15 (varppp -> empty .)
    SEMICOLON       reduce using rule 15 (varppp -> empty .)


state 75

    (18) dimDeclare -> L_SQUARE_BRACKET . CTE_INT R_SQUARE_BRACKET
    (19) dimDeclare -> L_SQUARE_BRACKET . CTE_INT R_SQUARE_BRACKET error error

    CTE_INT         shift and go to state 109


state 76

    (9) variable_seen -> error error .

    L_SQUARE_BRACKET reduce using rule 9 (variable_seen -> error error .)
    COMMA           reduce using rule 9 (variable_seen -> error error .)
    SEMICOLON       reduce using rule 9 (variable_seen -> error error .)


state 77

    (43) asignacion -> ID operand_seen dimId . ASSIGN operation_seen expresion apply_operation_assign SEMICOLON

    ASSIGN          shift and go to state 110


state 78

    (46) dimId -> dim .
    (47) dimId -> dim . dim
    (49) dim -> . L_SQUARE_BRACKET expresion R_SQUARE_BRACKET

    ASSIGN          reduce using rule 46 (dimId -> dim .)
    DETERMINANT     reduce using rule 46 (dimId -> dim .)
    TRANSPOSED      reduce using rule 46 (dimId -> dim .)
    INVERSE         reduce using rule 46 (dimId -> dim .)
    MULTIPLY        reduce using rule 46 (dimId -> dim .)
    DIVIDE          reduce using rule 46 (dimId -> dim .)
    SUM             reduce using rule 46 (dimId -> dim .)
    SUBTRACT        reduce using rule 46 (dimId -> dim .)
    EQUALS          reduce using rule 46 (dimId -> dim .)
    NOT_EQUAL       reduce using rule 46 (dimId -> dim .)
    LESS_THAN       reduce using rule 46 (dimId -> dim .)
    LESS_THAN_EQUAL reduce using rule 46 (dimId -> dim .)
    GREATER_THAN    reduce using rule 46 (dimId -> dim .)
    GREATER_THAN_EQUAL reduce using rule 46 (dimId -> dim .)
    AND             reduce using rule 46 (dimId -> dim .)
    OR              reduce using rule 46 (dimId -> dim .)
    COMMA           reduce using rule 46 (dimId -> dim .)
    R_PARENTHESIS   reduce using rule 46 (dimId -> dim .)
    R_SQUARE_BRACKET reduce using rule 46 (dimId -> dim .)
    HASTA           reduce using rule 46 (dimId -> dim .)
    SEMICOLON       reduce using rule 46 (dimId -> dim .)
    HACER           reduce using rule 46 (dimId -> dim .)
    L_SQUARE_BRACKET shift and go to state 80

    dim                            shift and go to state 111

state 79

    (48) dimId -> empty .

    ASSIGN          reduce using rule 48 (dimId -> empty .)
    DETERMINANT     reduce using rule 48 (dimId -> empty .)
    TRANSPOSED      reduce using rule 48 (dimId -> empty .)
    INVERSE         reduce using rule 48 (dimId -> empty .)
    MULTIPLY        reduce using rule 48 (dimId -> empty .)
    DIVIDE          reduce using rule 48 (dimId -> empty .)
    SUM             reduce using rule 48 (dimId -> empty .)
    SUBTRACT        reduce using rule 48 (dimId -> empty .)
    EQUALS          reduce using rule 48 (dimId -> empty .)
    NOT_EQUAL       reduce using rule 48 (dimId -> empty .)
    LESS_THAN       reduce using rule 48 (dimId -> empty .)
    LESS_THAN_EQUAL reduce using rule 48 (dimId -> empty .)
    GREATER_THAN    reduce using rule 48 (dimId -> empty .)
    GREATER_THAN_EQUAL reduce using rule 48 (dimId -> empty .)
    AND             reduce using rule 48 (dimId -> empty .)
    OR              reduce using rule 48 (dimId -> empty .)
    COMMA           reduce using rule 48 (dimId -> empty .)
    R_PARENTHESIS   reduce using rule 48 (dimId -> empty .)
    R_SQUARE_BRACKET reduce using rule 48 (dimId -> empty .)
    HASTA           reduce using rule 48 (dimId -> empty .)
    SEMICOLON       reduce using rule 48 (dimId -> empty .)
    HACER           reduce using rule 48 (dimId -> empty .)


state 80

    (49) dim -> L_SQUARE_BRACKET . expresion R_SQUARE_BRACKET
    (50) expresion -> . relacional apply_operation_expresion expresionp
    (51) expresion -> . NOT relacional expresionp
    (56) relacional -> . aritmetica apply_operation_relational relacionalp
    (65) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (70) factor -> . matriz apply_operation_factor factorp
    (76) matriz -> . cte matrizp
    (81) cte -> . CTE_INT
    (82) cte -> . CTE_FLOAT
    (83) cte -> . CTE_CHAR
    (84) cte -> . llamadaFuncion
    (85) cte -> . ID dimId
    (86) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (87) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    NOT             shift and go to state 85
    CTE_INT         shift and go to state 90
    CTE_FLOAT       shift and go to state 91
    CTE_CHAR        shift and go to state 92
    ID              shift and go to state 81
    L_PARENTHESIS   shift and go to state 82

    expresion                      shift and go to state 112
    relacional                     shift and go to state 84
    aritmetica                     shift and go to state 86
    factor                         shift and go to state 87
    matriz                         shift and go to state 88
    cte                            shift and go to state 89
    llamadaFuncion                 shift and go to state 93

state 81

    (85) cte -> ID . dimId
    (87) llamadaFuncion -> ID . L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS
    (46) dimId -> . dim
    (47) dimId -> . dim dim
    (48) dimId -> . empty
    (49) dim -> . L_SQUARE_BRACKET expresion R_SQUARE_BRACKET
    (109) empty -> .

    L_PARENTHESIS   shift and go to state 114
    L_SQUARE_BRACKET shift and go to state 80
    DETERMINANT     reduce using rule 109 (empty -> .)
    TRANSPOSED      reduce using rule 109 (empty -> .)
    INVERSE         reduce using rule 109 (empty -> .)
    MULTIPLY        reduce using rule 109 (empty -> .)
    DIVIDE          reduce using rule 109 (empty -> .)
    SUM             reduce using rule 109 (empty -> .)
    SUBTRACT        reduce using rule 109 (empty -> .)
    EQUALS          reduce using rule 109 (empty -> .)
    NOT_EQUAL       reduce using rule 109 (empty -> .)
    LESS_THAN       reduce using rule 109 (empty -> .)
    LESS_THAN_EQUAL reduce using rule 109 (empty -> .)
    GREATER_THAN    reduce using rule 109 (empty -> .)
    GREATER_THAN_EQUAL reduce using rule 109 (empty -> .)
    AND             reduce using rule 109 (empty -> .)
    OR              reduce using rule 109 (empty -> .)
    COMMA           reduce using rule 109 (empty -> .)
    R_PARENTHESIS   reduce using rule 109 (empty -> .)
    R_SQUARE_BRACKET reduce using rule 109 (empty -> .)
    HASTA           reduce using rule 109 (empty -> .)
    SEMICOLON       reduce using rule 109 (empty -> .)
    HACER           reduce using rule 109 (empty -> .)

    dimId                          shift and go to state 113
    dim                            shift and go to state 78
    empty                          shift and go to state 79

state 82

    (86) cte -> L_PARENTHESIS . operation_seen expresion R_PARENTHESIS operation_seen
    (75) operation_seen -> .

    NOT             reduce using rule 75 (operation_seen -> .)
    CTE_INT         reduce using rule 75 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 75 (operation_seen -> .)
    CTE_CHAR        reduce using rule 75 (operation_seen -> .)
    ID              reduce using rule 75 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 75 (operation_seen -> .)

    operation_seen                 shift and go to state 115

state 83

    (90) funcionVacia -> ID L_PARENTHESIS expresion . llamadaFuncionp R_PARENTHESIS SEMICOLON
    (88) llamadaFuncionp -> . COMMA expresion
    (89) llamadaFuncionp -> . empty
    (109) empty -> .

    COMMA           shift and go to state 117
    R_PARENTHESIS   reduce using rule 109 (empty -> .)

    llamadaFuncionp                shift and go to state 116
    empty                          shift and go to state 118

state 84

    (50) expresion -> relacional . apply_operation_expresion expresionp
    (55) apply_operation_expresion -> .

    AND             reduce using rule 55 (apply_operation_expresion -> .)
    OR              reduce using rule 55 (apply_operation_expresion -> .)
    COMMA           reduce using rule 55 (apply_operation_expresion -> .)
    R_PARENTHESIS   reduce using rule 55 (apply_operation_expresion -> .)
    R_SQUARE_BRACKET reduce using rule 55 (apply_operation_expresion -> .)
    HASTA           reduce using rule 55 (apply_operation_expresion -> .)
    SEMICOLON       reduce using rule 55 (apply_operation_expresion -> .)
    HACER           reduce using rule 55 (apply_operation_expresion -> .)

    apply_operation_expresion      shift and go to state 119

state 85

    (51) expresion -> NOT . relacional expresionp
    (56) relacional -> . aritmetica apply_operation_relational relacionalp
    (65) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (70) factor -> . matriz apply_operation_factor factorp
    (76) matriz -> . cte matrizp
    (81) cte -> . CTE_INT
    (82) cte -> . CTE_FLOAT
    (83) cte -> . CTE_CHAR
    (84) cte -> . llamadaFuncion
    (85) cte -> . ID dimId
    (86) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (87) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    CTE_INT         shift and go to state 90
    CTE_FLOAT       shift and go to state 91
    CTE_CHAR        shift and go to state 92
    ID              shift and go to state 81
    L_PARENTHESIS   shift and go to state 82

    relacional                     shift and go to state 120
    aritmetica                     shift and go to state 86
    factor                         shift and go to state 87
    matriz                         shift and go to state 88
    cte                            shift and go to state 89
    llamadaFuncion                 shift and go to state 93

state 86

    (56) relacional -> aritmetica . apply_operation_relational relacionalp
    (64) apply_operation_relational -> .

    EQUALS          reduce using rule 64 (apply_operation_relational -> .)
    NOT_EQUAL       reduce using rule 64 (apply_operation_relational -> .)
    LESS_THAN       reduce using rule 64 (apply_operation_relational -> .)
    LESS_THAN_EQUAL reduce using rule 64 (apply_operation_relational -> .)
    GREATER_THAN    reduce using rule 64 (apply_operation_relational -> .)
    GREATER_THAN_EQUAL reduce using rule 64 (apply_operation_relational -> .)
    AND             reduce using rule 64 (apply_operation_relational -> .)
    OR              reduce using rule 64 (apply_operation_relational -> .)
    COMMA           reduce using rule 64 (apply_operation_relational -> .)
    R_PARENTHESIS   reduce using rule 64 (apply_operation_relational -> .)
    R_SQUARE_BRACKET reduce using rule 64 (apply_operation_relational -> .)
    HASTA           reduce using rule 64 (apply_operation_relational -> .)
    SEMICOLON       reduce using rule 64 (apply_operation_relational -> .)
    HACER           reduce using rule 64 (apply_operation_relational -> .)

    apply_operation_relational     shift and go to state 121

state 87

    (65) aritmetica -> factor . apply_operation_aritmetica aritmeticap
    (69) apply_operation_aritmetica -> .

    SUM             reduce using rule 69 (apply_operation_aritmetica -> .)
    SUBTRACT        reduce using rule 69 (apply_operation_aritmetica -> .)
    EQUALS          reduce using rule 69 (apply_operation_aritmetica -> .)
    NOT_EQUAL       reduce using rule 69 (apply_operation_aritmetica -> .)
    LESS_THAN       reduce using rule 69 (apply_operation_aritmetica -> .)
    LESS_THAN_EQUAL reduce using rule 69 (apply_operation_aritmetica -> .)
    GREATER_THAN    reduce using rule 69 (apply_operation_aritmetica -> .)
    GREATER_THAN_EQUAL reduce using rule 69 (apply_operation_aritmetica -> .)
    AND             reduce using rule 69 (apply_operation_aritmetica -> .)
    OR              reduce using rule 69 (apply_operation_aritmetica -> .)
    COMMA           reduce using rule 69 (apply_operation_aritmetica -> .)
    R_PARENTHESIS   reduce using rule 69 (apply_operation_aritmetica -> .)
    R_SQUARE_BRACKET reduce using rule 69 (apply_operation_aritmetica -> .)
    HASTA           reduce using rule 69 (apply_operation_aritmetica -> .)
    SEMICOLON       reduce using rule 69 (apply_operation_aritmetica -> .)
    HACER           reduce using rule 69 (apply_operation_aritmetica -> .)

    apply_operation_aritmetica     shift and go to state 122

state 88

    (70) factor -> matriz . apply_operation_factor factorp
    (74) apply_operation_factor -> .

    MULTIPLY        reduce using rule 74 (apply_operation_factor -> .)
    DIVIDE          reduce using rule 74 (apply_operation_factor -> .)
    SUM             reduce using rule 74 (apply_operation_factor -> .)
    SUBTRACT        reduce using rule 74 (apply_operation_factor -> .)
    EQUALS          reduce using rule 74 (apply_operation_factor -> .)
    NOT_EQUAL       reduce using rule 74 (apply_operation_factor -> .)
    LESS_THAN       reduce using rule 74 (apply_operation_factor -> .)
    LESS_THAN_EQUAL reduce using rule 74 (apply_operation_factor -> .)
    GREATER_THAN    reduce using rule 74 (apply_operation_factor -> .)
    GREATER_THAN_EQUAL reduce using rule 74 (apply_operation_factor -> .)
    AND             reduce using rule 74 (apply_operation_factor -> .)
    OR              reduce using rule 74 (apply_operation_factor -> .)
    COMMA           reduce using rule 74 (apply_operation_factor -> .)
    R_PARENTHESIS   reduce using rule 74 (apply_operation_factor -> .)
    R_SQUARE_BRACKET reduce using rule 74 (apply_operation_factor -> .)
    HASTA           reduce using rule 74 (apply_operation_factor -> .)
    SEMICOLON       reduce using rule 74 (apply_operation_factor -> .)
    HACER           reduce using rule 74 (apply_operation_factor -> .)

    apply_operation_factor         shift and go to state 123

state 89

    (76) matriz -> cte . matrizp
    (77) matrizp -> . DETERMINANT
    (78) matrizp -> . TRANSPOSED
    (79) matrizp -> . INVERSE
    (80) matrizp -> . empty
    (109) empty -> .

    DETERMINANT     shift and go to state 125
    TRANSPOSED      shift and go to state 126
    INVERSE         shift and go to state 127
    MULTIPLY        reduce using rule 109 (empty -> .)
    DIVIDE          reduce using rule 109 (empty -> .)
    SUM             reduce using rule 109 (empty -> .)
    SUBTRACT        reduce using rule 109 (empty -> .)
    EQUALS          reduce using rule 109 (empty -> .)
    NOT_EQUAL       reduce using rule 109 (empty -> .)
    LESS_THAN       reduce using rule 109 (empty -> .)
    LESS_THAN_EQUAL reduce using rule 109 (empty -> .)
    GREATER_THAN    reduce using rule 109 (empty -> .)
    GREATER_THAN_EQUAL reduce using rule 109 (empty -> .)
    AND             reduce using rule 109 (empty -> .)
    OR              reduce using rule 109 (empty -> .)
    COMMA           reduce using rule 109 (empty -> .)
    R_PARENTHESIS   reduce using rule 109 (empty -> .)
    R_SQUARE_BRACKET reduce using rule 109 (empty -> .)
    HASTA           reduce using rule 109 (empty -> .)
    SEMICOLON       reduce using rule 109 (empty -> .)
    HACER           reduce using rule 109 (empty -> .)

    matrizp                        shift and go to state 124
    empty                          shift and go to state 128

state 90

    (81) cte -> CTE_INT .

    DETERMINANT     reduce using rule 81 (cte -> CTE_INT .)
    TRANSPOSED      reduce using rule 81 (cte -> CTE_INT .)
    INVERSE         reduce using rule 81 (cte -> CTE_INT .)
    MULTIPLY        reduce using rule 81 (cte -> CTE_INT .)
    DIVIDE          reduce using rule 81 (cte -> CTE_INT .)
    SUM             reduce using rule 81 (cte -> CTE_INT .)
    SUBTRACT        reduce using rule 81 (cte -> CTE_INT .)
    EQUALS          reduce using rule 81 (cte -> CTE_INT .)
    NOT_EQUAL       reduce using rule 81 (cte -> CTE_INT .)
    LESS_THAN       reduce using rule 81 (cte -> CTE_INT .)
    LESS_THAN_EQUAL reduce using rule 81 (cte -> CTE_INT .)
    GREATER_THAN    reduce using rule 81 (cte -> CTE_INT .)
    GREATER_THAN_EQUAL reduce using rule 81 (cte -> CTE_INT .)
    AND             reduce using rule 81 (cte -> CTE_INT .)
    OR              reduce using rule 81 (cte -> CTE_INT .)
    COMMA           reduce using rule 81 (cte -> CTE_INT .)
    R_PARENTHESIS   reduce using rule 81 (cte -> CTE_INT .)
    R_SQUARE_BRACKET reduce using rule 81 (cte -> CTE_INT .)
    HASTA           reduce using rule 81 (cte -> CTE_INT .)
    SEMICOLON       reduce using rule 81 (cte -> CTE_INT .)
    HACER           reduce using rule 81 (cte -> CTE_INT .)


state 91

    (82) cte -> CTE_FLOAT .

    DETERMINANT     reduce using rule 82 (cte -> CTE_FLOAT .)
    TRANSPOSED      reduce using rule 82 (cte -> CTE_FLOAT .)
    INVERSE         reduce using rule 82 (cte -> CTE_FLOAT .)
    MULTIPLY        reduce using rule 82 (cte -> CTE_FLOAT .)
    DIVIDE          reduce using rule 82 (cte -> CTE_FLOAT .)
    SUM             reduce using rule 82 (cte -> CTE_FLOAT .)
    SUBTRACT        reduce using rule 82 (cte -> CTE_FLOAT .)
    EQUALS          reduce using rule 82 (cte -> CTE_FLOAT .)
    NOT_EQUAL       reduce using rule 82 (cte -> CTE_FLOAT .)
    LESS_THAN       reduce using rule 82 (cte -> CTE_FLOAT .)
    LESS_THAN_EQUAL reduce using rule 82 (cte -> CTE_FLOAT .)
    GREATER_THAN    reduce using rule 82 (cte -> CTE_FLOAT .)
    GREATER_THAN_EQUAL reduce using rule 82 (cte -> CTE_FLOAT .)
    AND             reduce using rule 82 (cte -> CTE_FLOAT .)
    OR              reduce using rule 82 (cte -> CTE_FLOAT .)
    COMMA           reduce using rule 82 (cte -> CTE_FLOAT .)
    R_PARENTHESIS   reduce using rule 82 (cte -> CTE_FLOAT .)
    R_SQUARE_BRACKET reduce using rule 82 (cte -> CTE_FLOAT .)
    HASTA           reduce using rule 82 (cte -> CTE_FLOAT .)
    SEMICOLON       reduce using rule 82 (cte -> CTE_FLOAT .)
    HACER           reduce using rule 82 (cte -> CTE_FLOAT .)


state 92

    (83) cte -> CTE_CHAR .

    DETERMINANT     reduce using rule 83 (cte -> CTE_CHAR .)
    TRANSPOSED      reduce using rule 83 (cte -> CTE_CHAR .)
    INVERSE         reduce using rule 83 (cte -> CTE_CHAR .)
    MULTIPLY        reduce using rule 83 (cte -> CTE_CHAR .)
    DIVIDE          reduce using rule 83 (cte -> CTE_CHAR .)
    SUM             reduce using rule 83 (cte -> CTE_CHAR .)
    SUBTRACT        reduce using rule 83 (cte -> CTE_CHAR .)
    EQUALS          reduce using rule 83 (cte -> CTE_CHAR .)
    NOT_EQUAL       reduce using rule 83 (cte -> CTE_CHAR .)
    LESS_THAN       reduce using rule 83 (cte -> CTE_CHAR .)
    LESS_THAN_EQUAL reduce using rule 83 (cte -> CTE_CHAR .)
    GREATER_THAN    reduce using rule 83 (cte -> CTE_CHAR .)
    GREATER_THAN_EQUAL reduce using rule 83 (cte -> CTE_CHAR .)
    AND             reduce using rule 83 (cte -> CTE_CHAR .)
    OR              reduce using rule 83 (cte -> CTE_CHAR .)
    COMMA           reduce using rule 83 (cte -> CTE_CHAR .)
    R_PARENTHESIS   reduce using rule 83 (cte -> CTE_CHAR .)
    R_SQUARE_BRACKET reduce using rule 83 (cte -> CTE_CHAR .)
    HASTA           reduce using rule 83 (cte -> CTE_CHAR .)
    SEMICOLON       reduce using rule 83 (cte -> CTE_CHAR .)
    HACER           reduce using rule 83 (cte -> CTE_CHAR .)


state 93

    (84) cte -> llamadaFuncion .

    DETERMINANT     reduce using rule 84 (cte -> llamadaFuncion .)
    TRANSPOSED      reduce using rule 84 (cte -> llamadaFuncion .)
    INVERSE         reduce using rule 84 (cte -> llamadaFuncion .)
    MULTIPLY        reduce using rule 84 (cte -> llamadaFuncion .)
    DIVIDE          reduce using rule 84 (cte -> llamadaFuncion .)
    SUM             reduce using rule 84 (cte -> llamadaFuncion .)
    SUBTRACT        reduce using rule 84 (cte -> llamadaFuncion .)
    EQUALS          reduce using rule 84 (cte -> llamadaFuncion .)
    NOT_EQUAL       reduce using rule 84 (cte -> llamadaFuncion .)
    LESS_THAN       reduce using rule 84 (cte -> llamadaFuncion .)
    LESS_THAN_EQUAL reduce using rule 84 (cte -> llamadaFuncion .)
    GREATER_THAN    reduce using rule 84 (cte -> llamadaFuncion .)
    GREATER_THAN_EQUAL reduce using rule 84 (cte -> llamadaFuncion .)
    AND             reduce using rule 84 (cte -> llamadaFuncion .)
    OR              reduce using rule 84 (cte -> llamadaFuncion .)
    COMMA           reduce using rule 84 (cte -> llamadaFuncion .)
    R_PARENTHESIS   reduce using rule 84 (cte -> llamadaFuncion .)
    R_SQUARE_BRACKET reduce using rule 84 (cte -> llamadaFuncion .)
    HASTA           reduce using rule 84 (cte -> llamadaFuncion .)
    SEMICOLON       reduce using rule 84 (cte -> llamadaFuncion .)
    HACER           reduce using rule 84 (cte -> llamadaFuncion .)


state 94

    (91) regresa -> REGRESA L_PARENTHESIS expresion . R_PARENTHESIS SEMICOLON

    R_PARENTHESIS   shift and go to state 129


state 95

    (92) lectura -> LECTURA L_PARENTHESIS lecturap . R_PARENTHESIS SEMICOLON

    R_PARENTHESIS   shift and go to state 130


state 96

    (93) lecturap -> ID . dimId lecturapp
    (46) dimId -> . dim
    (47) dimId -> . dim dim
    (48) dimId -> . empty
    (49) dim -> . L_SQUARE_BRACKET expresion R_SQUARE_BRACKET
    (109) empty -> .

    L_SQUARE_BRACKET shift and go to state 80
    COMMA           reduce using rule 109 (empty -> .)
    R_PARENTHESIS   reduce using rule 109 (empty -> .)

    dimId                          shift and go to state 131
    dim                            shift and go to state 78
    empty                          shift and go to state 79

state 97

    (96) escritura -> ESCRIBE L_PARENTHESIS escriturap . R_PARENTHESIS SEMICOLON

    R_PARENTHESIS   shift and go to state 132


state 98

    (97) escriturap -> LETRERO . escriturapp
    (99) escriturapp -> . COMMA escriturap
    (100) escriturapp -> . empty
    (109) empty -> .

    COMMA           shift and go to state 134
    R_PARENTHESIS   reduce using rule 109 (empty -> .)

    escriturapp                    shift and go to state 133
    empty                          shift and go to state 135

state 99

    (98) escriturap -> expresion . escriturapp
    (99) escriturapp -> . COMMA escriturap
    (100) escriturapp -> . empty
    (109) empty -> .

    COMMA           shift and go to state 134
    R_PARENTHESIS   reduce using rule 109 (empty -> .)

    escriturapp                    shift and go to state 136
    empty                          shift and go to state 135

state 100

    (101) decision -> SI L_PARENTHESIS expresion . R_PARENTHESIS jump_false HAZ bloque decisionp

    R_PARENTHESIS   shift and go to state 137


state 101

    (107) cicloCondicional -> MIENTRAS L_PARENTHESIS expresion . R_PARENTHESIS HAZ bloque

    R_PARENTHESIS   shift and go to state 138


state 102

    (108) cicloNoCondicional -> DESDE ID dimId . ASSIGN expresion HASTA expresion HACER bloque EOF

    ASSIGN          shift and go to state 139


state 103

    (25) funcionp -> tipoRetorno ID L_PARENTHESIS parametro R_PARENTHESIS var bloque . funcion
    (23) funcion -> . FUNCION funcionp
    (24) funcion -> . empty
    (109) empty -> .

    FUNCION         shift and go to state 10
    PRINCIPAL       reduce using rule 109 (empty -> .)

    funcion                        shift and go to state 140
    empty                          shift and go to state 11

state 104

    (28) parametrop -> COMMA tipo . ID parametrop

    ID              shift and go to state 141


state 105

    (6) varp -> tipo tipo_seen COLON ID variable_seen varppp varpp . delete_type SEMICOLON varpppp
    (10) delete_type -> .

    SEMICOLON       reduce using rule 10 (delete_type -> .)

    delete_type                    shift and go to state 142

state 106

    (11) varpp -> COMMA . ID variable_seen varppp varpp

    ID              shift and go to state 143


state 107

    (12) varpp -> empty .

    SEMICOLON       reduce using rule 12 (varpp -> empty .)


state 108

    (14) varppp -> dimDeclare dimDeclare .

    COMMA           reduce using rule 14 (varppp -> dimDeclare dimDeclare .)
    SEMICOLON       reduce using rule 14 (varppp -> dimDeclare dimDeclare .)


state 109

    (18) dimDeclare -> L_SQUARE_BRACKET CTE_INT . R_SQUARE_BRACKET
    (19) dimDeclare -> L_SQUARE_BRACKET CTE_INT . R_SQUARE_BRACKET error error

    R_SQUARE_BRACKET shift and go to state 144


state 110

    (43) asignacion -> ID operand_seen dimId ASSIGN . operation_seen expresion apply_operation_assign SEMICOLON
    (75) operation_seen -> .

    NOT             reduce using rule 75 (operation_seen -> .)
    CTE_INT         reduce using rule 75 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 75 (operation_seen -> .)
    CTE_CHAR        reduce using rule 75 (operation_seen -> .)
    ID              reduce using rule 75 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 75 (operation_seen -> .)

    operation_seen                 shift and go to state 145

state 111

    (47) dimId -> dim dim .

    ASSIGN          reduce using rule 47 (dimId -> dim dim .)
    DETERMINANT     reduce using rule 47 (dimId -> dim dim .)
    TRANSPOSED      reduce using rule 47 (dimId -> dim dim .)
    INVERSE         reduce using rule 47 (dimId -> dim dim .)
    MULTIPLY        reduce using rule 47 (dimId -> dim dim .)
    DIVIDE          reduce using rule 47 (dimId -> dim dim .)
    SUM             reduce using rule 47 (dimId -> dim dim .)
    SUBTRACT        reduce using rule 47 (dimId -> dim dim .)
    EQUALS          reduce using rule 47 (dimId -> dim dim .)
    NOT_EQUAL       reduce using rule 47 (dimId -> dim dim .)
    LESS_THAN       reduce using rule 47 (dimId -> dim dim .)
    LESS_THAN_EQUAL reduce using rule 47 (dimId -> dim dim .)
    GREATER_THAN    reduce using rule 47 (dimId -> dim dim .)
    GREATER_THAN_EQUAL reduce using rule 47 (dimId -> dim dim .)
    AND             reduce using rule 47 (dimId -> dim dim .)
    OR              reduce using rule 47 (dimId -> dim dim .)
    COMMA           reduce using rule 47 (dimId -> dim dim .)
    R_PARENTHESIS   reduce using rule 47 (dimId -> dim dim .)
    R_SQUARE_BRACKET reduce using rule 47 (dimId -> dim dim .)
    HASTA           reduce using rule 47 (dimId -> dim dim .)
    SEMICOLON       reduce using rule 47 (dimId -> dim dim .)
    HACER           reduce using rule 47 (dimId -> dim dim .)


state 112

    (49) dim -> L_SQUARE_BRACKET expresion . R_SQUARE_BRACKET

    R_SQUARE_BRACKET shift and go to state 146


state 113

    (85) cte -> ID dimId .

    DETERMINANT     reduce using rule 85 (cte -> ID dimId .)
    TRANSPOSED      reduce using rule 85 (cte -> ID dimId .)
    INVERSE         reduce using rule 85 (cte -> ID dimId .)
    MULTIPLY        reduce using rule 85 (cte -> ID dimId .)
    DIVIDE          reduce using rule 85 (cte -> ID dimId .)
    SUM             reduce using rule 85 (cte -> ID dimId .)
    SUBTRACT        reduce using rule 85 (cte -> ID dimId .)
    EQUALS          reduce using rule 85 (cte -> ID dimId .)
    NOT_EQUAL       reduce using rule 85 (cte -> ID dimId .)
    LESS_THAN       reduce using rule 85 (cte -> ID dimId .)
    LESS_THAN_EQUAL reduce using rule 85 (cte -> ID dimId .)
    GREATER_THAN    reduce using rule 85 (cte -> ID dimId .)
    GREATER_THAN_EQUAL reduce using rule 85 (cte -> ID dimId .)
    AND             reduce using rule 85 (cte -> ID dimId .)
    OR              reduce using rule 85 (cte -> ID dimId .)
    COMMA           reduce using rule 85 (cte -> ID dimId .)
    R_PARENTHESIS   reduce using rule 85 (cte -> ID dimId .)
    R_SQUARE_BRACKET reduce using rule 85 (cte -> ID dimId .)
    HASTA           reduce using rule 85 (cte -> ID dimId .)
    SEMICOLON       reduce using rule 85 (cte -> ID dimId .)
    HACER           reduce using rule 85 (cte -> ID dimId .)


state 114

    (87) llamadaFuncion -> ID L_PARENTHESIS . expresion llamadaFuncionp R_PARENTHESIS
    (50) expresion -> . relacional apply_operation_expresion expresionp
    (51) expresion -> . NOT relacional expresionp
    (56) relacional -> . aritmetica apply_operation_relational relacionalp
    (65) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (70) factor -> . matriz apply_operation_factor factorp
    (76) matriz -> . cte matrizp
    (81) cte -> . CTE_INT
    (82) cte -> . CTE_FLOAT
    (83) cte -> . CTE_CHAR
    (84) cte -> . llamadaFuncion
    (85) cte -> . ID dimId
    (86) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (87) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    NOT             shift and go to state 85
    CTE_INT         shift and go to state 90
    CTE_FLOAT       shift and go to state 91
    CTE_CHAR        shift and go to state 92
    ID              shift and go to state 81
    L_PARENTHESIS   shift and go to state 82

    expresion                      shift and go to state 147
    relacional                     shift and go to state 84
    aritmetica                     shift and go to state 86
    factor                         shift and go to state 87
    matriz                         shift and go to state 88
    cte                            shift and go to state 89
    llamadaFuncion                 shift and go to state 93

state 115

    (86) cte -> L_PARENTHESIS operation_seen . expresion R_PARENTHESIS operation_seen
    (50) expresion -> . relacional apply_operation_expresion expresionp
    (51) expresion -> . NOT relacional expresionp
    (56) relacional -> . aritmetica apply_operation_relational relacionalp
    (65) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (70) factor -> . matriz apply_operation_factor factorp
    (76) matriz -> . cte matrizp
    (81) cte -> . CTE_INT
    (82) cte -> . CTE_FLOAT
    (83) cte -> . CTE_CHAR
    (84) cte -> . llamadaFuncion
    (85) cte -> . ID dimId
    (86) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (87) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    NOT             shift and go to state 85
    CTE_INT         shift and go to state 90
    CTE_FLOAT       shift and go to state 91
    CTE_CHAR        shift and go to state 92
    ID              shift and go to state 81
    L_PARENTHESIS   shift and go to state 82

    expresion                      shift and go to state 148
    relacional                     shift and go to state 84
    aritmetica                     shift and go to state 86
    factor                         shift and go to state 87
    matriz                         shift and go to state 88
    cte                            shift and go to state 89
    llamadaFuncion                 shift and go to state 93

state 116

    (90) funcionVacia -> ID L_PARENTHESIS expresion llamadaFuncionp . R_PARENTHESIS SEMICOLON

    R_PARENTHESIS   shift and go to state 149


state 117

    (88) llamadaFuncionp -> COMMA . expresion
    (50) expresion -> . relacional apply_operation_expresion expresionp
    (51) expresion -> . NOT relacional expresionp
    (56) relacional -> . aritmetica apply_operation_relational relacionalp
    (65) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (70) factor -> . matriz apply_operation_factor factorp
    (76) matriz -> . cte matrizp
    (81) cte -> . CTE_INT
    (82) cte -> . CTE_FLOAT
    (83) cte -> . CTE_CHAR
    (84) cte -> . llamadaFuncion
    (85) cte -> . ID dimId
    (86) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (87) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    NOT             shift and go to state 85
    CTE_INT         shift and go to state 90
    CTE_FLOAT       shift and go to state 91
    CTE_CHAR        shift and go to state 92
    ID              shift and go to state 81
    L_PARENTHESIS   shift and go to state 82

    expresion                      shift and go to state 150
    relacional                     shift and go to state 84
    aritmetica                     shift and go to state 86
    factor                         shift and go to state 87
    matriz                         shift and go to state 88
    cte                            shift and go to state 89
    llamadaFuncion                 shift and go to state 93

state 118

    (89) llamadaFuncionp -> empty .

    R_PARENTHESIS   reduce using rule 89 (llamadaFuncionp -> empty .)


state 119

    (50) expresion -> relacional apply_operation_expresion . expresionp
    (52) expresionp -> . AND operation_seen expresion
    (53) expresionp -> . OR operation_seen expresion
    (54) expresionp -> . empty
    (109) empty -> .

    AND             shift and go to state 152
    OR              shift and go to state 153
    COMMA           reduce using rule 109 (empty -> .)
    R_PARENTHESIS   reduce using rule 109 (empty -> .)
    R_SQUARE_BRACKET reduce using rule 109 (empty -> .)
    HASTA           reduce using rule 109 (empty -> .)
    SEMICOLON       reduce using rule 109 (empty -> .)
    HACER           reduce using rule 109 (empty -> .)

    expresionp                     shift and go to state 151
    empty                          shift and go to state 154

state 120

    (51) expresion -> NOT relacional . expresionp
    (52) expresionp -> . AND operation_seen expresion
    (53) expresionp -> . OR operation_seen expresion
    (54) expresionp -> . empty
    (109) empty -> .

    AND             shift and go to state 152
    OR              shift and go to state 153
    COMMA           reduce using rule 109 (empty -> .)
    R_PARENTHESIS   reduce using rule 109 (empty -> .)
    R_SQUARE_BRACKET reduce using rule 109 (empty -> .)
    HASTA           reduce using rule 109 (empty -> .)
    SEMICOLON       reduce using rule 109 (empty -> .)
    HACER           reduce using rule 109 (empty -> .)

    expresionp                     shift and go to state 155
    empty                          shift and go to state 154

state 121

    (56) relacional -> aritmetica apply_operation_relational . relacionalp
    (57) relacionalp -> . EQUALS operation_seen relacional
    (58) relacionalp -> . NOT_EQUAL operation_seen relacional
    (59) relacionalp -> . LESS_THAN operation_seen relacional
    (60) relacionalp -> . LESS_THAN_EQUAL operation_seen relacional
    (61) relacionalp -> . GREATER_THAN operation_seen relacional
    (62) relacionalp -> . GREATER_THAN_EQUAL operation_seen relacional
    (63) relacionalp -> . empty
    (109) empty -> .

    EQUALS          shift and go to state 157
    NOT_EQUAL       shift and go to state 158
    LESS_THAN       shift and go to state 159
    LESS_THAN_EQUAL shift and go to state 160
    GREATER_THAN    shift and go to state 161
    GREATER_THAN_EQUAL shift and go to state 162
    AND             reduce using rule 109 (empty -> .)
    OR              reduce using rule 109 (empty -> .)
    COMMA           reduce using rule 109 (empty -> .)
    R_PARENTHESIS   reduce using rule 109 (empty -> .)
    R_SQUARE_BRACKET reduce using rule 109 (empty -> .)
    HASTA           reduce using rule 109 (empty -> .)
    SEMICOLON       reduce using rule 109 (empty -> .)
    HACER           reduce using rule 109 (empty -> .)

    relacionalp                    shift and go to state 156
    empty                          shift and go to state 163

state 122

    (65) aritmetica -> factor apply_operation_aritmetica . aritmeticap
    (66) aritmeticap -> . SUM operation_seen aritmetica
    (67) aritmeticap -> . SUBTRACT operation_seen aritmetica
    (68) aritmeticap -> . empty
    (109) empty -> .

    SUM             shift and go to state 165
    SUBTRACT        shift and go to state 166
    EQUALS          reduce using rule 109 (empty -> .)
    NOT_EQUAL       reduce using rule 109 (empty -> .)
    LESS_THAN       reduce using rule 109 (empty -> .)
    LESS_THAN_EQUAL reduce using rule 109 (empty -> .)
    GREATER_THAN    reduce using rule 109 (empty -> .)
    GREATER_THAN_EQUAL reduce using rule 109 (empty -> .)
    AND             reduce using rule 109 (empty -> .)
    OR              reduce using rule 109 (empty -> .)
    COMMA           reduce using rule 109 (empty -> .)
    R_PARENTHESIS   reduce using rule 109 (empty -> .)
    R_SQUARE_BRACKET reduce using rule 109 (empty -> .)
    HASTA           reduce using rule 109 (empty -> .)
    SEMICOLON       reduce using rule 109 (empty -> .)
    HACER           reduce using rule 109 (empty -> .)

    aritmeticap                    shift and go to state 164
    empty                          shift and go to state 167

state 123

    (70) factor -> matriz apply_operation_factor . factorp
    (71) factorp -> . MULTIPLY operation_seen factor
    (72) factorp -> . DIVIDE operation_seen factor
    (73) factorp -> . empty
    (109) empty -> .

    MULTIPLY        shift and go to state 169
    DIVIDE          shift and go to state 170
    SUM             reduce using rule 109 (empty -> .)
    SUBTRACT        reduce using rule 109 (empty -> .)
    EQUALS          reduce using rule 109 (empty -> .)
    NOT_EQUAL       reduce using rule 109 (empty -> .)
    LESS_THAN       reduce using rule 109 (empty -> .)
    LESS_THAN_EQUAL reduce using rule 109 (empty -> .)
    GREATER_THAN    reduce using rule 109 (empty -> .)
    GREATER_THAN_EQUAL reduce using rule 109 (empty -> .)
    AND             reduce using rule 109 (empty -> .)
    OR              reduce using rule 109 (empty -> .)
    COMMA           reduce using rule 109 (empty -> .)
    R_PARENTHESIS   reduce using rule 109 (empty -> .)
    R_SQUARE_BRACKET reduce using rule 109 (empty -> .)
    HASTA           reduce using rule 109 (empty -> .)
    SEMICOLON       reduce using rule 109 (empty -> .)
    HACER           reduce using rule 109 (empty -> .)

    factorp                        shift and go to state 168
    empty                          shift and go to state 171

state 124

    (76) matriz -> cte matrizp .

    MULTIPLY        reduce using rule 76 (matriz -> cte matrizp .)
    DIVIDE          reduce using rule 76 (matriz -> cte matrizp .)
    SUM             reduce using rule 76 (matriz -> cte matrizp .)
    SUBTRACT        reduce using rule 76 (matriz -> cte matrizp .)
    EQUALS          reduce using rule 76 (matriz -> cte matrizp .)
    NOT_EQUAL       reduce using rule 76 (matriz -> cte matrizp .)
    LESS_THAN       reduce using rule 76 (matriz -> cte matrizp .)
    LESS_THAN_EQUAL reduce using rule 76 (matriz -> cte matrizp .)
    GREATER_THAN    reduce using rule 76 (matriz -> cte matrizp .)
    GREATER_THAN_EQUAL reduce using rule 76 (matriz -> cte matrizp .)
    AND             reduce using rule 76 (matriz -> cte matrizp .)
    OR              reduce using rule 76 (matriz -> cte matrizp .)
    COMMA           reduce using rule 76 (matriz -> cte matrizp .)
    R_PARENTHESIS   reduce using rule 76 (matriz -> cte matrizp .)
    R_SQUARE_BRACKET reduce using rule 76 (matriz -> cte matrizp .)
    HASTA           reduce using rule 76 (matriz -> cte matrizp .)
    SEMICOLON       reduce using rule 76 (matriz -> cte matrizp .)
    HACER           reduce using rule 76 (matriz -> cte matrizp .)


state 125

    (77) matrizp -> DETERMINANT .

    MULTIPLY        reduce using rule 77 (matrizp -> DETERMINANT .)
    DIVIDE          reduce using rule 77 (matrizp -> DETERMINANT .)
    SUM             reduce using rule 77 (matrizp -> DETERMINANT .)
    SUBTRACT        reduce using rule 77 (matrizp -> DETERMINANT .)
    EQUALS          reduce using rule 77 (matrizp -> DETERMINANT .)
    NOT_EQUAL       reduce using rule 77 (matrizp -> DETERMINANT .)
    LESS_THAN       reduce using rule 77 (matrizp -> DETERMINANT .)
    LESS_THAN_EQUAL reduce using rule 77 (matrizp -> DETERMINANT .)
    GREATER_THAN    reduce using rule 77 (matrizp -> DETERMINANT .)
    GREATER_THAN_EQUAL reduce using rule 77 (matrizp -> DETERMINANT .)
    AND             reduce using rule 77 (matrizp -> DETERMINANT .)
    OR              reduce using rule 77 (matrizp -> DETERMINANT .)
    COMMA           reduce using rule 77 (matrizp -> DETERMINANT .)
    R_PARENTHESIS   reduce using rule 77 (matrizp -> DETERMINANT .)
    R_SQUARE_BRACKET reduce using rule 77 (matrizp -> DETERMINANT .)
    HASTA           reduce using rule 77 (matrizp -> DETERMINANT .)
    SEMICOLON       reduce using rule 77 (matrizp -> DETERMINANT .)
    HACER           reduce using rule 77 (matrizp -> DETERMINANT .)


state 126

    (78) matrizp -> TRANSPOSED .

    MULTIPLY        reduce using rule 78 (matrizp -> TRANSPOSED .)
    DIVIDE          reduce using rule 78 (matrizp -> TRANSPOSED .)
    SUM             reduce using rule 78 (matrizp -> TRANSPOSED .)
    SUBTRACT        reduce using rule 78 (matrizp -> TRANSPOSED .)
    EQUALS          reduce using rule 78 (matrizp -> TRANSPOSED .)
    NOT_EQUAL       reduce using rule 78 (matrizp -> TRANSPOSED .)
    LESS_THAN       reduce using rule 78 (matrizp -> TRANSPOSED .)
    LESS_THAN_EQUAL reduce using rule 78 (matrizp -> TRANSPOSED .)
    GREATER_THAN    reduce using rule 78 (matrizp -> TRANSPOSED .)
    GREATER_THAN_EQUAL reduce using rule 78 (matrizp -> TRANSPOSED .)
    AND             reduce using rule 78 (matrizp -> TRANSPOSED .)
    OR              reduce using rule 78 (matrizp -> TRANSPOSED .)
    COMMA           reduce using rule 78 (matrizp -> TRANSPOSED .)
    R_PARENTHESIS   reduce using rule 78 (matrizp -> TRANSPOSED .)
    R_SQUARE_BRACKET reduce using rule 78 (matrizp -> TRANSPOSED .)
    HASTA           reduce using rule 78 (matrizp -> TRANSPOSED .)
    SEMICOLON       reduce using rule 78 (matrizp -> TRANSPOSED .)
    HACER           reduce using rule 78 (matrizp -> TRANSPOSED .)


state 127

    (79) matrizp -> INVERSE .

    MULTIPLY        reduce using rule 79 (matrizp -> INVERSE .)
    DIVIDE          reduce using rule 79 (matrizp -> INVERSE .)
    SUM             reduce using rule 79 (matrizp -> INVERSE .)
    SUBTRACT        reduce using rule 79 (matrizp -> INVERSE .)
    EQUALS          reduce using rule 79 (matrizp -> INVERSE .)
    NOT_EQUAL       reduce using rule 79 (matrizp -> INVERSE .)
    LESS_THAN       reduce using rule 79 (matrizp -> INVERSE .)
    LESS_THAN_EQUAL reduce using rule 79 (matrizp -> INVERSE .)
    GREATER_THAN    reduce using rule 79 (matrizp -> INVERSE .)
    GREATER_THAN_EQUAL reduce using rule 79 (matrizp -> INVERSE .)
    AND             reduce using rule 79 (matrizp -> INVERSE .)
    OR              reduce using rule 79 (matrizp -> INVERSE .)
    COMMA           reduce using rule 79 (matrizp -> INVERSE .)
    R_PARENTHESIS   reduce using rule 79 (matrizp -> INVERSE .)
    R_SQUARE_BRACKET reduce using rule 79 (matrizp -> INVERSE .)
    HASTA           reduce using rule 79 (matrizp -> INVERSE .)
    SEMICOLON       reduce using rule 79 (matrizp -> INVERSE .)
    HACER           reduce using rule 79 (matrizp -> INVERSE .)


state 128

    (80) matrizp -> empty .

    MULTIPLY        reduce using rule 80 (matrizp -> empty .)
    DIVIDE          reduce using rule 80 (matrizp -> empty .)
    SUM             reduce using rule 80 (matrizp -> empty .)
    SUBTRACT        reduce using rule 80 (matrizp -> empty .)
    EQUALS          reduce using rule 80 (matrizp -> empty .)
    NOT_EQUAL       reduce using rule 80 (matrizp -> empty .)
    LESS_THAN       reduce using rule 80 (matrizp -> empty .)
    LESS_THAN_EQUAL reduce using rule 80 (matrizp -> empty .)
    GREATER_THAN    reduce using rule 80 (matrizp -> empty .)
    GREATER_THAN_EQUAL reduce using rule 80 (matrizp -> empty .)
    AND             reduce using rule 80 (matrizp -> empty .)
    OR              reduce using rule 80 (matrizp -> empty .)
    COMMA           reduce using rule 80 (matrizp -> empty .)
    R_PARENTHESIS   reduce using rule 80 (matrizp -> empty .)
    R_SQUARE_BRACKET reduce using rule 80 (matrizp -> empty .)
    HASTA           reduce using rule 80 (matrizp -> empty .)
    SEMICOLON       reduce using rule 80 (matrizp -> empty .)
    HACER           reduce using rule 80 (matrizp -> empty .)


state 129

    (91) regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 172


state 130

    (92) lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 173


state 131

    (93) lecturap -> ID dimId . lecturapp
    (94) lecturapp -> . COMMA lecturap
    (95) lecturapp -> . empty
    (109) empty -> .

    COMMA           shift and go to state 175
    R_PARENTHESIS   reduce using rule 109 (empty -> .)

    lecturapp                      shift and go to state 174
    empty                          shift and go to state 176

state 132

    (96) escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 177


state 133

    (97) escriturap -> LETRERO escriturapp .

    R_PARENTHESIS   reduce using rule 97 (escriturap -> LETRERO escriturapp .)


state 134

    (99) escriturapp -> COMMA . escriturap
    (97) escriturap -> . LETRERO escriturapp
    (98) escriturap -> . expresion escriturapp
    (50) expresion -> . relacional apply_operation_expresion expresionp
    (51) expresion -> . NOT relacional expresionp
    (56) relacional -> . aritmetica apply_operation_relational relacionalp
    (65) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (70) factor -> . matriz apply_operation_factor factorp
    (76) matriz -> . cte matrizp
    (81) cte -> . CTE_INT
    (82) cte -> . CTE_FLOAT
    (83) cte -> . CTE_CHAR
    (84) cte -> . llamadaFuncion
    (85) cte -> . ID dimId
    (86) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (87) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    LETRERO         shift and go to state 98
    NOT             shift and go to state 85
    CTE_INT         shift and go to state 90
    CTE_FLOAT       shift and go to state 91
    CTE_CHAR        shift and go to state 92
    ID              shift and go to state 81
    L_PARENTHESIS   shift and go to state 82

    escriturap                     shift and go to state 178
    expresion                      shift and go to state 99
    relacional                     shift and go to state 84
    aritmetica                     shift and go to state 86
    factor                         shift and go to state 87
    matriz                         shift and go to state 88
    cte                            shift and go to state 89
    llamadaFuncion                 shift and go to state 93

state 135

    (100) escriturapp -> empty .

    R_PARENTHESIS   reduce using rule 100 (escriturapp -> empty .)


state 136

    (98) escriturap -> expresion escriturapp .

    R_PARENTHESIS   reduce using rule 98 (escriturap -> expresion escriturapp .)


state 137

    (101) decision -> SI L_PARENTHESIS expresion R_PARENTHESIS . jump_false HAZ bloque decisionp
    (102) jump_false -> .

    HAZ             reduce using rule 102 (jump_false -> .)

    jump_false                     shift and go to state 179

state 138

    (107) cicloCondicional -> MIENTRAS L_PARENTHESIS expresion R_PARENTHESIS . HAZ bloque

    HAZ             shift and go to state 180


state 139

    (108) cicloNoCondicional -> DESDE ID dimId ASSIGN . expresion HASTA expresion HACER bloque EOF
    (50) expresion -> . relacional apply_operation_expresion expresionp
    (51) expresion -> . NOT relacional expresionp
    (56) relacional -> . aritmetica apply_operation_relational relacionalp
    (65) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (70) factor -> . matriz apply_operation_factor factorp
    (76) matriz -> . cte matrizp
    (81) cte -> . CTE_INT
    (82) cte -> . CTE_FLOAT
    (83) cte -> . CTE_CHAR
    (84) cte -> . llamadaFuncion
    (85) cte -> . ID dimId
    (86) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (87) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    NOT             shift and go to state 85
    CTE_INT         shift and go to state 90
    CTE_FLOAT       shift and go to state 91
    CTE_CHAR        shift and go to state 92
    ID              shift and go to state 81
    L_PARENTHESIS   shift and go to state 82

    expresion                      shift and go to state 181
    relacional                     shift and go to state 84
    aritmetica                     shift and go to state 86
    factor                         shift and go to state 87
    matriz                         shift and go to state 88
    cte                            shift and go to state 89
    llamadaFuncion                 shift and go to state 93

state 140

    (25) funcionp -> tipoRetorno ID L_PARENTHESIS parametro R_PARENTHESIS var bloque funcion .

    PRINCIPAL       reduce using rule 25 (funcionp -> tipoRetorno ID L_PARENTHESIS parametro R_PARENTHESIS var bloque funcion .)


state 141

    (28) parametrop -> COMMA tipo ID . parametrop
    (28) parametrop -> . COMMA tipo ID parametrop
    (29) parametrop -> . empty
    (109) empty -> .

    COMMA           shift and go to state 70
    R_PARENTHESIS   reduce using rule 109 (empty -> .)

    parametrop                     shift and go to state 182
    empty                          shift and go to state 71

state 142

    (6) varp -> tipo tipo_seen COLON ID variable_seen varppp varpp delete_type . SEMICOLON varpppp

    SEMICOLON       shift and go to state 183


state 143

    (11) varpp -> COMMA ID . variable_seen varppp varpp
    (8) variable_seen -> .
    (9) variable_seen -> . error error

    L_SQUARE_BRACKET reduce using rule 8 (variable_seen -> .)
    COMMA           reduce using rule 8 (variable_seen -> .)
    SEMICOLON       reduce using rule 8 (variable_seen -> .)
    error           shift and go to state 57

    variable_seen                  shift and go to state 184

state 144

    (18) dimDeclare -> L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET .
    (19) dimDeclare -> L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET . error error

    L_SQUARE_BRACKET reduce using rule 18 (dimDeclare -> L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET .)
    COMMA           reduce using rule 18 (dimDeclare -> L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET .)
    SEMICOLON       reduce using rule 18 (dimDeclare -> L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET .)
    error           shift and go to state 185


state 145

    (43) asignacion -> ID operand_seen dimId ASSIGN operation_seen . expresion apply_operation_assign SEMICOLON
    (50) expresion -> . relacional apply_operation_expresion expresionp
    (51) expresion -> . NOT relacional expresionp
    (56) relacional -> . aritmetica apply_operation_relational relacionalp
    (65) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (70) factor -> . matriz apply_operation_factor factorp
    (76) matriz -> . cte matrizp
    (81) cte -> . CTE_INT
    (82) cte -> . CTE_FLOAT
    (83) cte -> . CTE_CHAR
    (84) cte -> . llamadaFuncion
    (85) cte -> . ID dimId
    (86) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (87) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    NOT             shift and go to state 85
    CTE_INT         shift and go to state 90
    CTE_FLOAT       shift and go to state 91
    CTE_CHAR        shift and go to state 92
    ID              shift and go to state 81
    L_PARENTHESIS   shift and go to state 82

    expresion                      shift and go to state 186
    relacional                     shift and go to state 84
    aritmetica                     shift and go to state 86
    factor                         shift and go to state 87
    matriz                         shift and go to state 88
    cte                            shift and go to state 89
    llamadaFuncion                 shift and go to state 93

state 146

    (49) dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .

    L_SQUARE_BRACKET reduce using rule 49 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    ASSIGN          reduce using rule 49 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    DETERMINANT     reduce using rule 49 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    TRANSPOSED      reduce using rule 49 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    INVERSE         reduce using rule 49 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    MULTIPLY        reduce using rule 49 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    DIVIDE          reduce using rule 49 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    SUM             reduce using rule 49 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    SUBTRACT        reduce using rule 49 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    EQUALS          reduce using rule 49 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    NOT_EQUAL       reduce using rule 49 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    LESS_THAN       reduce using rule 49 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    LESS_THAN_EQUAL reduce using rule 49 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    GREATER_THAN    reduce using rule 49 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    GREATER_THAN_EQUAL reduce using rule 49 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    AND             reduce using rule 49 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    OR              reduce using rule 49 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    COMMA           reduce using rule 49 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    R_PARENTHESIS   reduce using rule 49 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    R_SQUARE_BRACKET reduce using rule 49 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    HASTA           reduce using rule 49 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    SEMICOLON       reduce using rule 49 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    HACER           reduce using rule 49 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)


state 147

    (87) llamadaFuncion -> ID L_PARENTHESIS expresion . llamadaFuncionp R_PARENTHESIS
    (88) llamadaFuncionp -> . COMMA expresion
    (89) llamadaFuncionp -> . empty
    (109) empty -> .

    COMMA           shift and go to state 117
    R_PARENTHESIS   reduce using rule 109 (empty -> .)

    llamadaFuncionp                shift and go to state 187
    empty                          shift and go to state 118

state 148

    (86) cte -> L_PARENTHESIS operation_seen expresion . R_PARENTHESIS operation_seen

    R_PARENTHESIS   shift and go to state 188


state 149

    (90) funcionVacia -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 189


state 150

    (88) llamadaFuncionp -> COMMA expresion .

    R_PARENTHESIS   reduce using rule 88 (llamadaFuncionp -> COMMA expresion .)


state 151

    (50) expresion -> relacional apply_operation_expresion expresionp .

    COMMA           reduce using rule 50 (expresion -> relacional apply_operation_expresion expresionp .)
    R_PARENTHESIS   reduce using rule 50 (expresion -> relacional apply_operation_expresion expresionp .)
    R_SQUARE_BRACKET reduce using rule 50 (expresion -> relacional apply_operation_expresion expresionp .)
    HASTA           reduce using rule 50 (expresion -> relacional apply_operation_expresion expresionp .)
    SEMICOLON       reduce using rule 50 (expresion -> relacional apply_operation_expresion expresionp .)
    HACER           reduce using rule 50 (expresion -> relacional apply_operation_expresion expresionp .)


state 152

    (52) expresionp -> AND . operation_seen expresion
    (75) operation_seen -> .

    NOT             reduce using rule 75 (operation_seen -> .)
    CTE_INT         reduce using rule 75 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 75 (operation_seen -> .)
    CTE_CHAR        reduce using rule 75 (operation_seen -> .)
    ID              reduce using rule 75 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 75 (operation_seen -> .)

    operation_seen                 shift and go to state 190

state 153

    (53) expresionp -> OR . operation_seen expresion
    (75) operation_seen -> .

    NOT             reduce using rule 75 (operation_seen -> .)
    CTE_INT         reduce using rule 75 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 75 (operation_seen -> .)
    CTE_CHAR        reduce using rule 75 (operation_seen -> .)
    ID              reduce using rule 75 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 75 (operation_seen -> .)

    operation_seen                 shift and go to state 191

state 154

    (54) expresionp -> empty .

    COMMA           reduce using rule 54 (expresionp -> empty .)
    R_PARENTHESIS   reduce using rule 54 (expresionp -> empty .)
    R_SQUARE_BRACKET reduce using rule 54 (expresionp -> empty .)
    HASTA           reduce using rule 54 (expresionp -> empty .)
    SEMICOLON       reduce using rule 54 (expresionp -> empty .)
    HACER           reduce using rule 54 (expresionp -> empty .)


state 155

    (51) expresion -> NOT relacional expresionp .

    COMMA           reduce using rule 51 (expresion -> NOT relacional expresionp .)
    R_PARENTHESIS   reduce using rule 51 (expresion -> NOT relacional expresionp .)
    R_SQUARE_BRACKET reduce using rule 51 (expresion -> NOT relacional expresionp .)
    HASTA           reduce using rule 51 (expresion -> NOT relacional expresionp .)
    SEMICOLON       reduce using rule 51 (expresion -> NOT relacional expresionp .)
    HACER           reduce using rule 51 (expresion -> NOT relacional expresionp .)


state 156

    (56) relacional -> aritmetica apply_operation_relational relacionalp .

    AND             reduce using rule 56 (relacional -> aritmetica apply_operation_relational relacionalp .)
    OR              reduce using rule 56 (relacional -> aritmetica apply_operation_relational relacionalp .)
    COMMA           reduce using rule 56 (relacional -> aritmetica apply_operation_relational relacionalp .)
    R_PARENTHESIS   reduce using rule 56 (relacional -> aritmetica apply_operation_relational relacionalp .)
    R_SQUARE_BRACKET reduce using rule 56 (relacional -> aritmetica apply_operation_relational relacionalp .)
    HASTA           reduce using rule 56 (relacional -> aritmetica apply_operation_relational relacionalp .)
    SEMICOLON       reduce using rule 56 (relacional -> aritmetica apply_operation_relational relacionalp .)
    HACER           reduce using rule 56 (relacional -> aritmetica apply_operation_relational relacionalp .)


state 157

    (57) relacionalp -> EQUALS . operation_seen relacional
    (75) operation_seen -> .

    CTE_INT         reduce using rule 75 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 75 (operation_seen -> .)
    CTE_CHAR        reduce using rule 75 (operation_seen -> .)
    ID              reduce using rule 75 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 75 (operation_seen -> .)

    operation_seen                 shift and go to state 192

state 158

    (58) relacionalp -> NOT_EQUAL . operation_seen relacional
    (75) operation_seen -> .

    CTE_INT         reduce using rule 75 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 75 (operation_seen -> .)
    CTE_CHAR        reduce using rule 75 (operation_seen -> .)
    ID              reduce using rule 75 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 75 (operation_seen -> .)

    operation_seen                 shift and go to state 193

state 159

    (59) relacionalp -> LESS_THAN . operation_seen relacional
    (75) operation_seen -> .

    CTE_INT         reduce using rule 75 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 75 (operation_seen -> .)
    CTE_CHAR        reduce using rule 75 (operation_seen -> .)
    ID              reduce using rule 75 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 75 (operation_seen -> .)

    operation_seen                 shift and go to state 194

state 160

    (60) relacionalp -> LESS_THAN_EQUAL . operation_seen relacional
    (75) operation_seen -> .

    CTE_INT         reduce using rule 75 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 75 (operation_seen -> .)
    CTE_CHAR        reduce using rule 75 (operation_seen -> .)
    ID              reduce using rule 75 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 75 (operation_seen -> .)

    operation_seen                 shift and go to state 195

state 161

    (61) relacionalp -> GREATER_THAN . operation_seen relacional
    (75) operation_seen -> .

    CTE_INT         reduce using rule 75 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 75 (operation_seen -> .)
    CTE_CHAR        reduce using rule 75 (operation_seen -> .)
    ID              reduce using rule 75 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 75 (operation_seen -> .)

    operation_seen                 shift and go to state 196

state 162

    (62) relacionalp -> GREATER_THAN_EQUAL . operation_seen relacional
    (75) operation_seen -> .

    CTE_INT         reduce using rule 75 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 75 (operation_seen -> .)
    CTE_CHAR        reduce using rule 75 (operation_seen -> .)
    ID              reduce using rule 75 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 75 (operation_seen -> .)

    operation_seen                 shift and go to state 197

state 163

    (63) relacionalp -> empty .

    AND             reduce using rule 63 (relacionalp -> empty .)
    OR              reduce using rule 63 (relacionalp -> empty .)
    COMMA           reduce using rule 63 (relacionalp -> empty .)
    R_PARENTHESIS   reduce using rule 63 (relacionalp -> empty .)
    R_SQUARE_BRACKET reduce using rule 63 (relacionalp -> empty .)
    HASTA           reduce using rule 63 (relacionalp -> empty .)
    SEMICOLON       reduce using rule 63 (relacionalp -> empty .)
    HACER           reduce using rule 63 (relacionalp -> empty .)


state 164

    (65) aritmetica -> factor apply_operation_aritmetica aritmeticap .

    EQUALS          reduce using rule 65 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    NOT_EQUAL       reduce using rule 65 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    LESS_THAN       reduce using rule 65 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    LESS_THAN_EQUAL reduce using rule 65 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    GREATER_THAN    reduce using rule 65 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    GREATER_THAN_EQUAL reduce using rule 65 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    AND             reduce using rule 65 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    OR              reduce using rule 65 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    COMMA           reduce using rule 65 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    R_PARENTHESIS   reduce using rule 65 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    R_SQUARE_BRACKET reduce using rule 65 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    HASTA           reduce using rule 65 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    SEMICOLON       reduce using rule 65 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    HACER           reduce using rule 65 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)


state 165

    (66) aritmeticap -> SUM . operation_seen aritmetica
    (75) operation_seen -> .

    CTE_INT         reduce using rule 75 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 75 (operation_seen -> .)
    CTE_CHAR        reduce using rule 75 (operation_seen -> .)
    ID              reduce using rule 75 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 75 (operation_seen -> .)

    operation_seen                 shift and go to state 198

state 166

    (67) aritmeticap -> SUBTRACT . operation_seen aritmetica
    (75) operation_seen -> .

    CTE_INT         reduce using rule 75 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 75 (operation_seen -> .)
    CTE_CHAR        reduce using rule 75 (operation_seen -> .)
    ID              reduce using rule 75 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 75 (operation_seen -> .)

    operation_seen                 shift and go to state 199

state 167

    (68) aritmeticap -> empty .

    EQUALS          reduce using rule 68 (aritmeticap -> empty .)
    NOT_EQUAL       reduce using rule 68 (aritmeticap -> empty .)
    LESS_THAN       reduce using rule 68 (aritmeticap -> empty .)
    LESS_THAN_EQUAL reduce using rule 68 (aritmeticap -> empty .)
    GREATER_THAN    reduce using rule 68 (aritmeticap -> empty .)
    GREATER_THAN_EQUAL reduce using rule 68 (aritmeticap -> empty .)
    AND             reduce using rule 68 (aritmeticap -> empty .)
    OR              reduce using rule 68 (aritmeticap -> empty .)
    COMMA           reduce using rule 68 (aritmeticap -> empty .)
    R_PARENTHESIS   reduce using rule 68 (aritmeticap -> empty .)
    R_SQUARE_BRACKET reduce using rule 68 (aritmeticap -> empty .)
    HASTA           reduce using rule 68 (aritmeticap -> empty .)
    SEMICOLON       reduce using rule 68 (aritmeticap -> empty .)
    HACER           reduce using rule 68 (aritmeticap -> empty .)


state 168

    (70) factor -> matriz apply_operation_factor factorp .

    SUM             reduce using rule 70 (factor -> matriz apply_operation_factor factorp .)
    SUBTRACT        reduce using rule 70 (factor -> matriz apply_operation_factor factorp .)
    EQUALS          reduce using rule 70 (factor -> matriz apply_operation_factor factorp .)
    NOT_EQUAL       reduce using rule 70 (factor -> matriz apply_operation_factor factorp .)
    LESS_THAN       reduce using rule 70 (factor -> matriz apply_operation_factor factorp .)
    LESS_THAN_EQUAL reduce using rule 70 (factor -> matriz apply_operation_factor factorp .)
    GREATER_THAN    reduce using rule 70 (factor -> matriz apply_operation_factor factorp .)
    GREATER_THAN_EQUAL reduce using rule 70 (factor -> matriz apply_operation_factor factorp .)
    AND             reduce using rule 70 (factor -> matriz apply_operation_factor factorp .)
    OR              reduce using rule 70 (factor -> matriz apply_operation_factor factorp .)
    COMMA           reduce using rule 70 (factor -> matriz apply_operation_factor factorp .)
    R_PARENTHESIS   reduce using rule 70 (factor -> matriz apply_operation_factor factorp .)
    R_SQUARE_BRACKET reduce using rule 70 (factor -> matriz apply_operation_factor factorp .)
    HASTA           reduce using rule 70 (factor -> matriz apply_operation_factor factorp .)
    SEMICOLON       reduce using rule 70 (factor -> matriz apply_operation_factor factorp .)
    HACER           reduce using rule 70 (factor -> matriz apply_operation_factor factorp .)


state 169

    (71) factorp -> MULTIPLY . operation_seen factor
    (75) operation_seen -> .

    CTE_INT         reduce using rule 75 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 75 (operation_seen -> .)
    CTE_CHAR        reduce using rule 75 (operation_seen -> .)
    ID              reduce using rule 75 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 75 (operation_seen -> .)

    operation_seen                 shift and go to state 200

state 170

    (72) factorp -> DIVIDE . operation_seen factor
    (75) operation_seen -> .

    CTE_INT         reduce using rule 75 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 75 (operation_seen -> .)
    CTE_CHAR        reduce using rule 75 (operation_seen -> .)
    ID              reduce using rule 75 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 75 (operation_seen -> .)

    operation_seen                 shift and go to state 201

state 171

    (73) factorp -> empty .

    SUM             reduce using rule 73 (factorp -> empty .)
    SUBTRACT        reduce using rule 73 (factorp -> empty .)
    EQUALS          reduce using rule 73 (factorp -> empty .)
    NOT_EQUAL       reduce using rule 73 (factorp -> empty .)
    LESS_THAN       reduce using rule 73 (factorp -> empty .)
    LESS_THAN_EQUAL reduce using rule 73 (factorp -> empty .)
    GREATER_THAN    reduce using rule 73 (factorp -> empty .)
    GREATER_THAN_EQUAL reduce using rule 73 (factorp -> empty .)
    AND             reduce using rule 73 (factorp -> empty .)
    OR              reduce using rule 73 (factorp -> empty .)
    COMMA           reduce using rule 73 (factorp -> empty .)
    R_PARENTHESIS   reduce using rule 73 (factorp -> empty .)
    R_SQUARE_BRACKET reduce using rule 73 (factorp -> empty .)
    HASTA           reduce using rule 73 (factorp -> empty .)
    SEMICOLON       reduce using rule 73 (factorp -> empty .)
    HACER           reduce using rule 73 (factorp -> empty .)


state 172

    (91) regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .

    ID              reduce using rule 91 (regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .)
    REGRESA         reduce using rule 91 (regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .)
    LECTURA         reduce using rule 91 (regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .)
    ESCRIBE         reduce using rule 91 (regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .)
    SI              reduce using rule 91 (regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .)
    MIENTRAS        reduce using rule 91 (regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .)
    DESDE           reduce using rule 91 (regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .)
    R_CURLY_BRACKET reduce using rule 91 (regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .)


state 173

    (92) lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .

    ID              reduce using rule 92 (lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .)
    REGRESA         reduce using rule 92 (lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .)
    LECTURA         reduce using rule 92 (lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .)
    ESCRIBE         reduce using rule 92 (lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .)
    SI              reduce using rule 92 (lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .)
    MIENTRAS        reduce using rule 92 (lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .)
    DESDE           reduce using rule 92 (lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .)
    R_CURLY_BRACKET reduce using rule 92 (lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .)


state 174

    (93) lecturap -> ID dimId lecturapp .

    R_PARENTHESIS   reduce using rule 93 (lecturap -> ID dimId lecturapp .)


state 175

    (94) lecturapp -> COMMA . lecturap
    (93) lecturap -> . ID dimId lecturapp

    ID              shift and go to state 96

    lecturap                       shift and go to state 202

state 176

    (95) lecturapp -> empty .

    R_PARENTHESIS   reduce using rule 95 (lecturapp -> empty .)


state 177

    (96) escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .

    ID              reduce using rule 96 (escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .)
    REGRESA         reduce using rule 96 (escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .)
    LECTURA         reduce using rule 96 (escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .)
    ESCRIBE         reduce using rule 96 (escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .)
    SI              reduce using rule 96 (escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .)
    MIENTRAS        reduce using rule 96 (escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .)
    DESDE           reduce using rule 96 (escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .)
    R_CURLY_BRACKET reduce using rule 96 (escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .)


state 178

    (99) escriturapp -> COMMA escriturap .

    R_PARENTHESIS   reduce using rule 99 (escriturapp -> COMMA escriturap .)


state 179

    (101) decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false . HAZ bloque decisionp

    HAZ             shift and go to state 203


state 180

    (107) cicloCondicional -> MIENTRAS L_PARENTHESIS expresion R_PARENTHESIS HAZ . bloque
    (32) bloque -> . L_CURLY_BRACKET bloquep R_CURLY_BRACKET

    L_CURLY_BRACKET shift and go to state 30

    bloque                         shift and go to state 204

state 181

    (108) cicloNoCondicional -> DESDE ID dimId ASSIGN expresion . HASTA expresion HACER bloque EOF

    HASTA           shift and go to state 205


state 182

    (28) parametrop -> COMMA tipo ID parametrop .

    R_PARENTHESIS   reduce using rule 28 (parametrop -> COMMA tipo ID parametrop .)


state 183

    (6) varp -> tipo tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON . varpppp
    (16) varpppp -> . varp
    (17) varpppp -> . empty
    (6) varp -> . tipo tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp
    (109) empty -> .
    (20) tipo -> . INT
    (21) tipo -> . FLOAT
    (22) tipo -> . CHAR

    FUNCION         reduce using rule 109 (empty -> .)
    PRINCIPAL       reduce using rule 109 (empty -> .)
    L_CURLY_BRACKET reduce using rule 109 (empty -> .)
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    CHAR            shift and go to state 20

    tipo                           shift and go to state 22
    varpppp                        shift and go to state 206
    varp                           shift and go to state 207
    empty                          shift and go to state 208

state 184

    (11) varpp -> COMMA ID variable_seen . varppp varpp
    (13) varppp -> . dimDeclare
    (14) varppp -> . dimDeclare dimDeclare
    (15) varppp -> . empty
    (18) dimDeclare -> . L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET
    (19) dimDeclare -> . L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET error error
    (109) empty -> .

    L_SQUARE_BRACKET shift and go to state 75
    COMMA           reduce using rule 109 (empty -> .)
    SEMICOLON       reduce using rule 109 (empty -> .)

    varppp                         shift and go to state 209
    dimDeclare                     shift and go to state 73
    empty                          shift and go to state 74

state 185

    (19) dimDeclare -> L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET error . error

    error           shift and go to state 210


state 186

    (43) asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion . apply_operation_assign SEMICOLON
    (45) apply_operation_assign -> .

    SEMICOLON       reduce using rule 45 (apply_operation_assign -> .)

    apply_operation_assign         shift and go to state 211

state 187

    (87) llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp . R_PARENTHESIS

    R_PARENTHESIS   shift and go to state 212


state 188

    (86) cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS . operation_seen
    (75) operation_seen -> .

    DETERMINANT     reduce using rule 75 (operation_seen -> .)
    TRANSPOSED      reduce using rule 75 (operation_seen -> .)
    INVERSE         reduce using rule 75 (operation_seen -> .)
    MULTIPLY        reduce using rule 75 (operation_seen -> .)
    DIVIDE          reduce using rule 75 (operation_seen -> .)
    SUM             reduce using rule 75 (operation_seen -> .)
    SUBTRACT        reduce using rule 75 (operation_seen -> .)
    EQUALS          reduce using rule 75 (operation_seen -> .)
    NOT_EQUAL       reduce using rule 75 (operation_seen -> .)
    LESS_THAN       reduce using rule 75 (operation_seen -> .)
    LESS_THAN_EQUAL reduce using rule 75 (operation_seen -> .)
    GREATER_THAN    reduce using rule 75 (operation_seen -> .)
    GREATER_THAN_EQUAL reduce using rule 75 (operation_seen -> .)
    AND             reduce using rule 75 (operation_seen -> .)
    OR              reduce using rule 75 (operation_seen -> .)
    COMMA           reduce using rule 75 (operation_seen -> .)
    R_PARENTHESIS   reduce using rule 75 (operation_seen -> .)
    R_SQUARE_BRACKET reduce using rule 75 (operation_seen -> .)
    HASTA           reduce using rule 75 (operation_seen -> .)
    SEMICOLON       reduce using rule 75 (operation_seen -> .)
    HACER           reduce using rule 75 (operation_seen -> .)

    operation_seen                 shift and go to state 213

state 189

    (90) funcionVacia -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS SEMICOLON .

    ID              reduce using rule 90 (funcionVacia -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS SEMICOLON .)
    REGRESA         reduce using rule 90 (funcionVacia -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS SEMICOLON .)
    LECTURA         reduce using rule 90 (funcionVacia -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS SEMICOLON .)
    ESCRIBE         reduce using rule 90 (funcionVacia -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS SEMICOLON .)
    SI              reduce using rule 90 (funcionVacia -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS SEMICOLON .)
    MIENTRAS        reduce using rule 90 (funcionVacia -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS SEMICOLON .)
    DESDE           reduce using rule 90 (funcionVacia -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS SEMICOLON .)
    R_CURLY_BRACKET reduce using rule 90 (funcionVacia -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS SEMICOLON .)


state 190

    (52) expresionp -> AND operation_seen . expresion
    (50) expresion -> . relacional apply_operation_expresion expresionp
    (51) expresion -> . NOT relacional expresionp
    (56) relacional -> . aritmetica apply_operation_relational relacionalp
    (65) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (70) factor -> . matriz apply_operation_factor factorp
    (76) matriz -> . cte matrizp
    (81) cte -> . CTE_INT
    (82) cte -> . CTE_FLOAT
    (83) cte -> . CTE_CHAR
    (84) cte -> . llamadaFuncion
    (85) cte -> . ID dimId
    (86) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (87) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    NOT             shift and go to state 85
    CTE_INT         shift and go to state 90
    CTE_FLOAT       shift and go to state 91
    CTE_CHAR        shift and go to state 92
    ID              shift and go to state 81
    L_PARENTHESIS   shift and go to state 82

    expresion                      shift and go to state 214
    relacional                     shift and go to state 84
    aritmetica                     shift and go to state 86
    factor                         shift and go to state 87
    matriz                         shift and go to state 88
    cte                            shift and go to state 89
    llamadaFuncion                 shift and go to state 93

state 191

    (53) expresionp -> OR operation_seen . expresion
    (50) expresion -> . relacional apply_operation_expresion expresionp
    (51) expresion -> . NOT relacional expresionp
    (56) relacional -> . aritmetica apply_operation_relational relacionalp
    (65) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (70) factor -> . matriz apply_operation_factor factorp
    (76) matriz -> . cte matrizp
    (81) cte -> . CTE_INT
    (82) cte -> . CTE_FLOAT
    (83) cte -> . CTE_CHAR
    (84) cte -> . llamadaFuncion
    (85) cte -> . ID dimId
    (86) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (87) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    NOT             shift and go to state 85
    CTE_INT         shift and go to state 90
    CTE_FLOAT       shift and go to state 91
    CTE_CHAR        shift and go to state 92
    ID              shift and go to state 81
    L_PARENTHESIS   shift and go to state 82

    expresion                      shift and go to state 215
    relacional                     shift and go to state 84
    aritmetica                     shift and go to state 86
    factor                         shift and go to state 87
    matriz                         shift and go to state 88
    cte                            shift and go to state 89
    llamadaFuncion                 shift and go to state 93

state 192

    (57) relacionalp -> EQUALS operation_seen . relacional
    (56) relacional -> . aritmetica apply_operation_relational relacionalp
    (65) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (70) factor -> . matriz apply_operation_factor factorp
    (76) matriz -> . cte matrizp
    (81) cte -> . CTE_INT
    (82) cte -> . CTE_FLOAT
    (83) cte -> . CTE_CHAR
    (84) cte -> . llamadaFuncion
    (85) cte -> . ID dimId
    (86) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (87) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    CTE_INT         shift and go to state 90
    CTE_FLOAT       shift and go to state 91
    CTE_CHAR        shift and go to state 92
    ID              shift and go to state 81
    L_PARENTHESIS   shift and go to state 82

    relacional                     shift and go to state 216
    aritmetica                     shift and go to state 86
    factor                         shift and go to state 87
    matriz                         shift and go to state 88
    cte                            shift and go to state 89
    llamadaFuncion                 shift and go to state 93

state 193

    (58) relacionalp -> NOT_EQUAL operation_seen . relacional
    (56) relacional -> . aritmetica apply_operation_relational relacionalp
    (65) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (70) factor -> . matriz apply_operation_factor factorp
    (76) matriz -> . cte matrizp
    (81) cte -> . CTE_INT
    (82) cte -> . CTE_FLOAT
    (83) cte -> . CTE_CHAR
    (84) cte -> . llamadaFuncion
    (85) cte -> . ID dimId
    (86) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (87) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    CTE_INT         shift and go to state 90
    CTE_FLOAT       shift and go to state 91
    CTE_CHAR        shift and go to state 92
    ID              shift and go to state 81
    L_PARENTHESIS   shift and go to state 82

    relacional                     shift and go to state 217
    aritmetica                     shift and go to state 86
    factor                         shift and go to state 87
    matriz                         shift and go to state 88
    cte                            shift and go to state 89
    llamadaFuncion                 shift and go to state 93

state 194

    (59) relacionalp -> LESS_THAN operation_seen . relacional
    (56) relacional -> . aritmetica apply_operation_relational relacionalp
    (65) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (70) factor -> . matriz apply_operation_factor factorp
    (76) matriz -> . cte matrizp
    (81) cte -> . CTE_INT
    (82) cte -> . CTE_FLOAT
    (83) cte -> . CTE_CHAR
    (84) cte -> . llamadaFuncion
    (85) cte -> . ID dimId
    (86) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (87) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    CTE_INT         shift and go to state 90
    CTE_FLOAT       shift and go to state 91
    CTE_CHAR        shift and go to state 92
    ID              shift and go to state 81
    L_PARENTHESIS   shift and go to state 82

    relacional                     shift and go to state 218
    aritmetica                     shift and go to state 86
    factor                         shift and go to state 87
    matriz                         shift and go to state 88
    cte                            shift and go to state 89
    llamadaFuncion                 shift and go to state 93

state 195

    (60) relacionalp -> LESS_THAN_EQUAL operation_seen . relacional
    (56) relacional -> . aritmetica apply_operation_relational relacionalp
    (65) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (70) factor -> . matriz apply_operation_factor factorp
    (76) matriz -> . cte matrizp
    (81) cte -> . CTE_INT
    (82) cte -> . CTE_FLOAT
    (83) cte -> . CTE_CHAR
    (84) cte -> . llamadaFuncion
    (85) cte -> . ID dimId
    (86) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (87) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    CTE_INT         shift and go to state 90
    CTE_FLOAT       shift and go to state 91
    CTE_CHAR        shift and go to state 92
    ID              shift and go to state 81
    L_PARENTHESIS   shift and go to state 82

    relacional                     shift and go to state 219
    aritmetica                     shift and go to state 86
    factor                         shift and go to state 87
    matriz                         shift and go to state 88
    cte                            shift and go to state 89
    llamadaFuncion                 shift and go to state 93

state 196

    (61) relacionalp -> GREATER_THAN operation_seen . relacional
    (56) relacional -> . aritmetica apply_operation_relational relacionalp
    (65) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (70) factor -> . matriz apply_operation_factor factorp
    (76) matriz -> . cte matrizp
    (81) cte -> . CTE_INT
    (82) cte -> . CTE_FLOAT
    (83) cte -> . CTE_CHAR
    (84) cte -> . llamadaFuncion
    (85) cte -> . ID dimId
    (86) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (87) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    CTE_INT         shift and go to state 90
    CTE_FLOAT       shift and go to state 91
    CTE_CHAR        shift and go to state 92
    ID              shift and go to state 81
    L_PARENTHESIS   shift and go to state 82

    relacional                     shift and go to state 220
    aritmetica                     shift and go to state 86
    factor                         shift and go to state 87
    matriz                         shift and go to state 88
    cte                            shift and go to state 89
    llamadaFuncion                 shift and go to state 93

state 197

    (62) relacionalp -> GREATER_THAN_EQUAL operation_seen . relacional
    (56) relacional -> . aritmetica apply_operation_relational relacionalp
    (65) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (70) factor -> . matriz apply_operation_factor factorp
    (76) matriz -> . cte matrizp
    (81) cte -> . CTE_INT
    (82) cte -> . CTE_FLOAT
    (83) cte -> . CTE_CHAR
    (84) cte -> . llamadaFuncion
    (85) cte -> . ID dimId
    (86) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (87) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    CTE_INT         shift and go to state 90
    CTE_FLOAT       shift and go to state 91
    CTE_CHAR        shift and go to state 92
    ID              shift and go to state 81
    L_PARENTHESIS   shift and go to state 82

    relacional                     shift and go to state 221
    aritmetica                     shift and go to state 86
    factor                         shift and go to state 87
    matriz                         shift and go to state 88
    cte                            shift and go to state 89
    llamadaFuncion                 shift and go to state 93

state 198

    (66) aritmeticap -> SUM operation_seen . aritmetica
    (65) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (70) factor -> . matriz apply_operation_factor factorp
    (76) matriz -> . cte matrizp
    (81) cte -> . CTE_INT
    (82) cte -> . CTE_FLOAT
    (83) cte -> . CTE_CHAR
    (84) cte -> . llamadaFuncion
    (85) cte -> . ID dimId
    (86) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (87) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    CTE_INT         shift and go to state 90
    CTE_FLOAT       shift and go to state 91
    CTE_CHAR        shift and go to state 92
    ID              shift and go to state 81
    L_PARENTHESIS   shift and go to state 82

    aritmetica                     shift and go to state 222
    factor                         shift and go to state 87
    matriz                         shift and go to state 88
    cte                            shift and go to state 89
    llamadaFuncion                 shift and go to state 93

state 199

    (67) aritmeticap -> SUBTRACT operation_seen . aritmetica
    (65) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (70) factor -> . matriz apply_operation_factor factorp
    (76) matriz -> . cte matrizp
    (81) cte -> . CTE_INT
    (82) cte -> . CTE_FLOAT
    (83) cte -> . CTE_CHAR
    (84) cte -> . llamadaFuncion
    (85) cte -> . ID dimId
    (86) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (87) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    CTE_INT         shift and go to state 90
    CTE_FLOAT       shift and go to state 91
    CTE_CHAR        shift and go to state 92
    ID              shift and go to state 81
    L_PARENTHESIS   shift and go to state 82

    aritmetica                     shift and go to state 223
    factor                         shift and go to state 87
    matriz                         shift and go to state 88
    cte                            shift and go to state 89
    llamadaFuncion                 shift and go to state 93

state 200

    (71) factorp -> MULTIPLY operation_seen . factor
    (70) factor -> . matriz apply_operation_factor factorp
    (76) matriz -> . cte matrizp
    (81) cte -> . CTE_INT
    (82) cte -> . CTE_FLOAT
    (83) cte -> . CTE_CHAR
    (84) cte -> . llamadaFuncion
    (85) cte -> . ID dimId
    (86) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (87) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    CTE_INT         shift and go to state 90
    CTE_FLOAT       shift and go to state 91
    CTE_CHAR        shift and go to state 92
    ID              shift and go to state 81
    L_PARENTHESIS   shift and go to state 82

    factor                         shift and go to state 224
    matriz                         shift and go to state 88
    cte                            shift and go to state 89
    llamadaFuncion                 shift and go to state 93

state 201

    (72) factorp -> DIVIDE operation_seen . factor
    (70) factor -> . matriz apply_operation_factor factorp
    (76) matriz -> . cte matrizp
    (81) cte -> . CTE_INT
    (82) cte -> . CTE_FLOAT
    (83) cte -> . CTE_CHAR
    (84) cte -> . llamadaFuncion
    (85) cte -> . ID dimId
    (86) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (87) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    CTE_INT         shift and go to state 90
    CTE_FLOAT       shift and go to state 91
    CTE_CHAR        shift and go to state 92
    ID              shift and go to state 81
    L_PARENTHESIS   shift and go to state 82

    factor                         shift and go to state 225
    matriz                         shift and go to state 88
    cte                            shift and go to state 89
    llamadaFuncion                 shift and go to state 93

state 202

    (94) lecturapp -> COMMA lecturap .

    R_PARENTHESIS   reduce using rule 94 (lecturapp -> COMMA lecturap .)


state 203

    (101) decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ . bloque decisionp
    (32) bloque -> . L_CURLY_BRACKET bloquep R_CURLY_BRACKET

    L_CURLY_BRACKET shift and go to state 30

    bloque                         shift and go to state 226

state 204

    (107) cicloCondicional -> MIENTRAS L_PARENTHESIS expresion R_PARENTHESIS HAZ bloque .

    ID              reduce using rule 107 (cicloCondicional -> MIENTRAS L_PARENTHESIS expresion R_PARENTHESIS HAZ bloque .)
    REGRESA         reduce using rule 107 (cicloCondicional -> MIENTRAS L_PARENTHESIS expresion R_PARENTHESIS HAZ bloque .)
    LECTURA         reduce using rule 107 (cicloCondicional -> MIENTRAS L_PARENTHESIS expresion R_PARENTHESIS HAZ bloque .)
    ESCRIBE         reduce using rule 107 (cicloCondicional -> MIENTRAS L_PARENTHESIS expresion R_PARENTHESIS HAZ bloque .)
    SI              reduce using rule 107 (cicloCondicional -> MIENTRAS L_PARENTHESIS expresion R_PARENTHESIS HAZ bloque .)
    MIENTRAS        reduce using rule 107 (cicloCondicional -> MIENTRAS L_PARENTHESIS expresion R_PARENTHESIS HAZ bloque .)
    DESDE           reduce using rule 107 (cicloCondicional -> MIENTRAS L_PARENTHESIS expresion R_PARENTHESIS HAZ bloque .)
    R_CURLY_BRACKET reduce using rule 107 (cicloCondicional -> MIENTRAS L_PARENTHESIS expresion R_PARENTHESIS HAZ bloque .)


state 205

    (108) cicloNoCondicional -> DESDE ID dimId ASSIGN expresion HASTA . expresion HACER bloque EOF
    (50) expresion -> . relacional apply_operation_expresion expresionp
    (51) expresion -> . NOT relacional expresionp
    (56) relacional -> . aritmetica apply_operation_relational relacionalp
    (65) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (70) factor -> . matriz apply_operation_factor factorp
    (76) matriz -> . cte matrizp
    (81) cte -> . CTE_INT
    (82) cte -> . CTE_FLOAT
    (83) cte -> . CTE_CHAR
    (84) cte -> . llamadaFuncion
    (85) cte -> . ID dimId
    (86) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (87) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    NOT             shift and go to state 85
    CTE_INT         shift and go to state 90
    CTE_FLOAT       shift and go to state 91
    CTE_CHAR        shift and go to state 92
    ID              shift and go to state 81
    L_PARENTHESIS   shift and go to state 82

    expresion                      shift and go to state 227
    relacional                     shift and go to state 84
    aritmetica                     shift and go to state 86
    factor                         shift and go to state 87
    matriz                         shift and go to state 88
    cte                            shift and go to state 89
    llamadaFuncion                 shift and go to state 93

state 206

    (6) varp -> tipo tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp .

    FUNCION         reduce using rule 6 (varp -> tipo tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp .)
    PRINCIPAL       reduce using rule 6 (varp -> tipo tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp .)
    L_CURLY_BRACKET reduce using rule 6 (varp -> tipo tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp .)


state 207

    (16) varpppp -> varp .

    FUNCION         reduce using rule 16 (varpppp -> varp .)
    PRINCIPAL       reduce using rule 16 (varpppp -> varp .)
    L_CURLY_BRACKET reduce using rule 16 (varpppp -> varp .)


state 208

    (17) varpppp -> empty .

    FUNCION         reduce using rule 17 (varpppp -> empty .)
    PRINCIPAL       reduce using rule 17 (varpppp -> empty .)
    L_CURLY_BRACKET reduce using rule 17 (varpppp -> empty .)


state 209

    (11) varpp -> COMMA ID variable_seen varppp . varpp
    (11) varpp -> . COMMA ID variable_seen varppp varpp
    (12) varpp -> . empty
    (109) empty -> .

    COMMA           shift and go to state 106
    SEMICOLON       reduce using rule 109 (empty -> .)

    varpp                          shift and go to state 228
    empty                          shift and go to state 107

state 210

    (19) dimDeclare -> L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET error error .

    L_SQUARE_BRACKET reduce using rule 19 (dimDeclare -> L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET error error .)
    COMMA           reduce using rule 19 (dimDeclare -> L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET error error .)
    SEMICOLON       reduce using rule 19 (dimDeclare -> L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET error error .)


state 211

    (43) asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign . SEMICOLON

    SEMICOLON       shift and go to state 229


state 212

    (87) llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .

    DETERMINANT     reduce using rule 87 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    TRANSPOSED      reduce using rule 87 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    INVERSE         reduce using rule 87 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    MULTIPLY        reduce using rule 87 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    DIVIDE          reduce using rule 87 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    SUM             reduce using rule 87 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    SUBTRACT        reduce using rule 87 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    EQUALS          reduce using rule 87 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    NOT_EQUAL       reduce using rule 87 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    LESS_THAN       reduce using rule 87 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    LESS_THAN_EQUAL reduce using rule 87 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    GREATER_THAN    reduce using rule 87 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    GREATER_THAN_EQUAL reduce using rule 87 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    AND             reduce using rule 87 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    OR              reduce using rule 87 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    COMMA           reduce using rule 87 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    R_PARENTHESIS   reduce using rule 87 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    R_SQUARE_BRACKET reduce using rule 87 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    HASTA           reduce using rule 87 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    SEMICOLON       reduce using rule 87 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    HACER           reduce using rule 87 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)


state 213

    (86) cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .

    DETERMINANT     reduce using rule 86 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    TRANSPOSED      reduce using rule 86 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    INVERSE         reduce using rule 86 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    MULTIPLY        reduce using rule 86 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    DIVIDE          reduce using rule 86 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    SUM             reduce using rule 86 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    SUBTRACT        reduce using rule 86 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    EQUALS          reduce using rule 86 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    NOT_EQUAL       reduce using rule 86 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    LESS_THAN       reduce using rule 86 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    LESS_THAN_EQUAL reduce using rule 86 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    GREATER_THAN    reduce using rule 86 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    GREATER_THAN_EQUAL reduce using rule 86 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    AND             reduce using rule 86 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    OR              reduce using rule 86 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    COMMA           reduce using rule 86 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    R_PARENTHESIS   reduce using rule 86 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    R_SQUARE_BRACKET reduce using rule 86 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    HASTA           reduce using rule 86 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    SEMICOLON       reduce using rule 86 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    HACER           reduce using rule 86 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)


state 214

    (52) expresionp -> AND operation_seen expresion .

    COMMA           reduce using rule 52 (expresionp -> AND operation_seen expresion .)
    R_PARENTHESIS   reduce using rule 52 (expresionp -> AND operation_seen expresion .)
    R_SQUARE_BRACKET reduce using rule 52 (expresionp -> AND operation_seen expresion .)
    HASTA           reduce using rule 52 (expresionp -> AND operation_seen expresion .)
    SEMICOLON       reduce using rule 52 (expresionp -> AND operation_seen expresion .)
    HACER           reduce using rule 52 (expresionp -> AND operation_seen expresion .)


state 215

    (53) expresionp -> OR operation_seen expresion .

    COMMA           reduce using rule 53 (expresionp -> OR operation_seen expresion .)
    R_PARENTHESIS   reduce using rule 53 (expresionp -> OR operation_seen expresion .)
    R_SQUARE_BRACKET reduce using rule 53 (expresionp -> OR operation_seen expresion .)
    HASTA           reduce using rule 53 (expresionp -> OR operation_seen expresion .)
    SEMICOLON       reduce using rule 53 (expresionp -> OR operation_seen expresion .)
    HACER           reduce using rule 53 (expresionp -> OR operation_seen expresion .)


state 216

    (57) relacionalp -> EQUALS operation_seen relacional .

    AND             reduce using rule 57 (relacionalp -> EQUALS operation_seen relacional .)
    OR              reduce using rule 57 (relacionalp -> EQUALS operation_seen relacional .)
    COMMA           reduce using rule 57 (relacionalp -> EQUALS operation_seen relacional .)
    R_PARENTHESIS   reduce using rule 57 (relacionalp -> EQUALS operation_seen relacional .)
    R_SQUARE_BRACKET reduce using rule 57 (relacionalp -> EQUALS operation_seen relacional .)
    HASTA           reduce using rule 57 (relacionalp -> EQUALS operation_seen relacional .)
    SEMICOLON       reduce using rule 57 (relacionalp -> EQUALS operation_seen relacional .)
    HACER           reduce using rule 57 (relacionalp -> EQUALS operation_seen relacional .)


state 217

    (58) relacionalp -> NOT_EQUAL operation_seen relacional .

    AND             reduce using rule 58 (relacionalp -> NOT_EQUAL operation_seen relacional .)
    OR              reduce using rule 58 (relacionalp -> NOT_EQUAL operation_seen relacional .)
    COMMA           reduce using rule 58 (relacionalp -> NOT_EQUAL operation_seen relacional .)
    R_PARENTHESIS   reduce using rule 58 (relacionalp -> NOT_EQUAL operation_seen relacional .)
    R_SQUARE_BRACKET reduce using rule 58 (relacionalp -> NOT_EQUAL operation_seen relacional .)
    HASTA           reduce using rule 58 (relacionalp -> NOT_EQUAL operation_seen relacional .)
    SEMICOLON       reduce using rule 58 (relacionalp -> NOT_EQUAL operation_seen relacional .)
    HACER           reduce using rule 58 (relacionalp -> NOT_EQUAL operation_seen relacional .)


state 218

    (59) relacionalp -> LESS_THAN operation_seen relacional .

    AND             reduce using rule 59 (relacionalp -> LESS_THAN operation_seen relacional .)
    OR              reduce using rule 59 (relacionalp -> LESS_THAN operation_seen relacional .)
    COMMA           reduce using rule 59 (relacionalp -> LESS_THAN operation_seen relacional .)
    R_PARENTHESIS   reduce using rule 59 (relacionalp -> LESS_THAN operation_seen relacional .)
    R_SQUARE_BRACKET reduce using rule 59 (relacionalp -> LESS_THAN operation_seen relacional .)
    HASTA           reduce using rule 59 (relacionalp -> LESS_THAN operation_seen relacional .)
    SEMICOLON       reduce using rule 59 (relacionalp -> LESS_THAN operation_seen relacional .)
    HACER           reduce using rule 59 (relacionalp -> LESS_THAN operation_seen relacional .)


state 219

    (60) relacionalp -> LESS_THAN_EQUAL operation_seen relacional .

    AND             reduce using rule 60 (relacionalp -> LESS_THAN_EQUAL operation_seen relacional .)
    OR              reduce using rule 60 (relacionalp -> LESS_THAN_EQUAL operation_seen relacional .)
    COMMA           reduce using rule 60 (relacionalp -> LESS_THAN_EQUAL operation_seen relacional .)
    R_PARENTHESIS   reduce using rule 60 (relacionalp -> LESS_THAN_EQUAL operation_seen relacional .)
    R_SQUARE_BRACKET reduce using rule 60 (relacionalp -> LESS_THAN_EQUAL operation_seen relacional .)
    HASTA           reduce using rule 60 (relacionalp -> LESS_THAN_EQUAL operation_seen relacional .)
    SEMICOLON       reduce using rule 60 (relacionalp -> LESS_THAN_EQUAL operation_seen relacional .)
    HACER           reduce using rule 60 (relacionalp -> LESS_THAN_EQUAL operation_seen relacional .)


state 220

    (61) relacionalp -> GREATER_THAN operation_seen relacional .

    AND             reduce using rule 61 (relacionalp -> GREATER_THAN operation_seen relacional .)
    OR              reduce using rule 61 (relacionalp -> GREATER_THAN operation_seen relacional .)
    COMMA           reduce using rule 61 (relacionalp -> GREATER_THAN operation_seen relacional .)
    R_PARENTHESIS   reduce using rule 61 (relacionalp -> GREATER_THAN operation_seen relacional .)
    R_SQUARE_BRACKET reduce using rule 61 (relacionalp -> GREATER_THAN operation_seen relacional .)
    HASTA           reduce using rule 61 (relacionalp -> GREATER_THAN operation_seen relacional .)
    SEMICOLON       reduce using rule 61 (relacionalp -> GREATER_THAN operation_seen relacional .)
    HACER           reduce using rule 61 (relacionalp -> GREATER_THAN operation_seen relacional .)


state 221

    (62) relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .

    AND             reduce using rule 62 (relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .)
    OR              reduce using rule 62 (relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .)
    COMMA           reduce using rule 62 (relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .)
    R_PARENTHESIS   reduce using rule 62 (relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .)
    R_SQUARE_BRACKET reduce using rule 62 (relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .)
    HASTA           reduce using rule 62 (relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .)
    SEMICOLON       reduce using rule 62 (relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .)
    HACER           reduce using rule 62 (relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .)


state 222

    (66) aritmeticap -> SUM operation_seen aritmetica .

    EQUALS          reduce using rule 66 (aritmeticap -> SUM operation_seen aritmetica .)
    NOT_EQUAL       reduce using rule 66 (aritmeticap -> SUM operation_seen aritmetica .)
    LESS_THAN       reduce using rule 66 (aritmeticap -> SUM operation_seen aritmetica .)
    LESS_THAN_EQUAL reduce using rule 66 (aritmeticap -> SUM operation_seen aritmetica .)
    GREATER_THAN    reduce using rule 66 (aritmeticap -> SUM operation_seen aritmetica .)
    GREATER_THAN_EQUAL reduce using rule 66 (aritmeticap -> SUM operation_seen aritmetica .)
    AND             reduce using rule 66 (aritmeticap -> SUM operation_seen aritmetica .)
    OR              reduce using rule 66 (aritmeticap -> SUM operation_seen aritmetica .)
    COMMA           reduce using rule 66 (aritmeticap -> SUM operation_seen aritmetica .)
    R_PARENTHESIS   reduce using rule 66 (aritmeticap -> SUM operation_seen aritmetica .)
    R_SQUARE_BRACKET reduce using rule 66 (aritmeticap -> SUM operation_seen aritmetica .)
    HASTA           reduce using rule 66 (aritmeticap -> SUM operation_seen aritmetica .)
    SEMICOLON       reduce using rule 66 (aritmeticap -> SUM operation_seen aritmetica .)
    HACER           reduce using rule 66 (aritmeticap -> SUM operation_seen aritmetica .)


state 223

    (67) aritmeticap -> SUBTRACT operation_seen aritmetica .

    EQUALS          reduce using rule 67 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    NOT_EQUAL       reduce using rule 67 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    LESS_THAN       reduce using rule 67 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    LESS_THAN_EQUAL reduce using rule 67 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    GREATER_THAN    reduce using rule 67 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    GREATER_THAN_EQUAL reduce using rule 67 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    AND             reduce using rule 67 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    OR              reduce using rule 67 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    COMMA           reduce using rule 67 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    R_PARENTHESIS   reduce using rule 67 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    R_SQUARE_BRACKET reduce using rule 67 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    HASTA           reduce using rule 67 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    SEMICOLON       reduce using rule 67 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    HACER           reduce using rule 67 (aritmeticap -> SUBTRACT operation_seen aritmetica .)


state 224

    (71) factorp -> MULTIPLY operation_seen factor .

    SUM             reduce using rule 71 (factorp -> MULTIPLY operation_seen factor .)
    SUBTRACT        reduce using rule 71 (factorp -> MULTIPLY operation_seen factor .)
    EQUALS          reduce using rule 71 (factorp -> MULTIPLY operation_seen factor .)
    NOT_EQUAL       reduce using rule 71 (factorp -> MULTIPLY operation_seen factor .)
    LESS_THAN       reduce using rule 71 (factorp -> MULTIPLY operation_seen factor .)
    LESS_THAN_EQUAL reduce using rule 71 (factorp -> MULTIPLY operation_seen factor .)
    GREATER_THAN    reduce using rule 71 (factorp -> MULTIPLY operation_seen factor .)
    GREATER_THAN_EQUAL reduce using rule 71 (factorp -> MULTIPLY operation_seen factor .)
    AND             reduce using rule 71 (factorp -> MULTIPLY operation_seen factor .)
    OR              reduce using rule 71 (factorp -> MULTIPLY operation_seen factor .)
    COMMA           reduce using rule 71 (factorp -> MULTIPLY operation_seen factor .)
    R_PARENTHESIS   reduce using rule 71 (factorp -> MULTIPLY operation_seen factor .)
    R_SQUARE_BRACKET reduce using rule 71 (factorp -> MULTIPLY operation_seen factor .)
    HASTA           reduce using rule 71 (factorp -> MULTIPLY operation_seen factor .)
    SEMICOLON       reduce using rule 71 (factorp -> MULTIPLY operation_seen factor .)
    HACER           reduce using rule 71 (factorp -> MULTIPLY operation_seen factor .)


state 225

    (72) factorp -> DIVIDE operation_seen factor .

    SUM             reduce using rule 72 (factorp -> DIVIDE operation_seen factor .)
    SUBTRACT        reduce using rule 72 (factorp -> DIVIDE operation_seen factor .)
    EQUALS          reduce using rule 72 (factorp -> DIVIDE operation_seen factor .)
    NOT_EQUAL       reduce using rule 72 (factorp -> DIVIDE operation_seen factor .)
    LESS_THAN       reduce using rule 72 (factorp -> DIVIDE operation_seen factor .)
    LESS_THAN_EQUAL reduce using rule 72 (factorp -> DIVIDE operation_seen factor .)
    GREATER_THAN    reduce using rule 72 (factorp -> DIVIDE operation_seen factor .)
    GREATER_THAN_EQUAL reduce using rule 72 (factorp -> DIVIDE operation_seen factor .)
    AND             reduce using rule 72 (factorp -> DIVIDE operation_seen factor .)
    OR              reduce using rule 72 (factorp -> DIVIDE operation_seen factor .)
    COMMA           reduce using rule 72 (factorp -> DIVIDE operation_seen factor .)
    R_PARENTHESIS   reduce using rule 72 (factorp -> DIVIDE operation_seen factor .)
    R_SQUARE_BRACKET reduce using rule 72 (factorp -> DIVIDE operation_seen factor .)
    HASTA           reduce using rule 72 (factorp -> DIVIDE operation_seen factor .)
    SEMICOLON       reduce using rule 72 (factorp -> DIVIDE operation_seen factor .)
    HACER           reduce using rule 72 (factorp -> DIVIDE operation_seen factor .)


state 226

    (101) decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque . decisionp
    (104) decisionp -> . SINO jump bloque update_jump
    (105) decisionp -> . empty update_jump
    (109) empty -> .

    SINO            shift and go to state 231
    ID              reduce using rule 109 (empty -> .)
    REGRESA         reduce using rule 109 (empty -> .)
    LECTURA         reduce using rule 109 (empty -> .)
    ESCRIBE         reduce using rule 109 (empty -> .)
    SI              reduce using rule 109 (empty -> .)
    MIENTRAS        reduce using rule 109 (empty -> .)
    DESDE           reduce using rule 109 (empty -> .)
    R_CURLY_BRACKET reduce using rule 109 (empty -> .)

    decisionp                      shift and go to state 230
    empty                          shift and go to state 232

state 227

    (108) cicloNoCondicional -> DESDE ID dimId ASSIGN expresion HASTA expresion . HACER bloque EOF

    HACER           shift and go to state 233


state 228

    (11) varpp -> COMMA ID variable_seen varppp varpp .

    SEMICOLON       reduce using rule 11 (varpp -> COMMA ID variable_seen varppp varpp .)


state 229

    (43) asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON .

    ID              reduce using rule 43 (asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON .)
    REGRESA         reduce using rule 43 (asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON .)
    LECTURA         reduce using rule 43 (asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON .)
    ESCRIBE         reduce using rule 43 (asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON .)
    SI              reduce using rule 43 (asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON .)
    MIENTRAS        reduce using rule 43 (asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON .)
    DESDE           reduce using rule 43 (asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON .)
    R_CURLY_BRACKET reduce using rule 43 (asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON .)


state 230

    (101) decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp .

    ID              reduce using rule 101 (decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp .)
    REGRESA         reduce using rule 101 (decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp .)
    LECTURA         reduce using rule 101 (decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp .)
    ESCRIBE         reduce using rule 101 (decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp .)
    SI              reduce using rule 101 (decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp .)
    MIENTRAS        reduce using rule 101 (decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp .)
    DESDE           reduce using rule 101 (decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp .)
    R_CURLY_BRACKET reduce using rule 101 (decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp .)


state 231

    (104) decisionp -> SINO . jump bloque update_jump
    (106) jump -> .

    L_CURLY_BRACKET reduce using rule 106 (jump -> .)

    jump                           shift and go to state 234

state 232

    (105) decisionp -> empty . update_jump
    (103) update_jump -> .

    ID              reduce using rule 103 (update_jump -> .)
    REGRESA         reduce using rule 103 (update_jump -> .)
    LECTURA         reduce using rule 103 (update_jump -> .)
    ESCRIBE         reduce using rule 103 (update_jump -> .)
    SI              reduce using rule 103 (update_jump -> .)
    MIENTRAS        reduce using rule 103 (update_jump -> .)
    DESDE           reduce using rule 103 (update_jump -> .)
    R_CURLY_BRACKET reduce using rule 103 (update_jump -> .)

    update_jump                    shift and go to state 235

state 233

    (108) cicloNoCondicional -> DESDE ID dimId ASSIGN expresion HASTA expresion HACER . bloque EOF
    (32) bloque -> . L_CURLY_BRACKET bloquep R_CURLY_BRACKET

    L_CURLY_BRACKET shift and go to state 30

    bloque                         shift and go to state 236

state 234

    (104) decisionp -> SINO jump . bloque update_jump
    (32) bloque -> . L_CURLY_BRACKET bloquep R_CURLY_BRACKET

    L_CURLY_BRACKET shift and go to state 30

    bloque                         shift and go to state 237

state 235

    (105) decisionp -> empty update_jump .

    ID              reduce using rule 105 (decisionp -> empty update_jump .)
    REGRESA         reduce using rule 105 (decisionp -> empty update_jump .)
    LECTURA         reduce using rule 105 (decisionp -> empty update_jump .)
    ESCRIBE         reduce using rule 105 (decisionp -> empty update_jump .)
    SI              reduce using rule 105 (decisionp -> empty update_jump .)
    MIENTRAS        reduce using rule 105 (decisionp -> empty update_jump .)
    DESDE           reduce using rule 105 (decisionp -> empty update_jump .)
    R_CURLY_BRACKET reduce using rule 105 (decisionp -> empty update_jump .)


state 236

    (108) cicloNoCondicional -> DESDE ID dimId ASSIGN expresion HASTA expresion HACER bloque . EOF

    EOF             shift and go to state 238


state 237

    (104) decisionp -> SINO jump bloque . update_jump
    (103) update_jump -> .

    ID              reduce using rule 103 (update_jump -> .)
    REGRESA         reduce using rule 103 (update_jump -> .)
    LECTURA         reduce using rule 103 (update_jump -> .)
    ESCRIBE         reduce using rule 103 (update_jump -> .)
    SI              reduce using rule 103 (update_jump -> .)
    MIENTRAS        reduce using rule 103 (update_jump -> .)
    DESDE           reduce using rule 103 (update_jump -> .)
    R_CURLY_BRACKET reduce using rule 103 (update_jump -> .)

    update_jump                    shift and go to state 239

state 238

    (108) cicloNoCondicional -> DESDE ID dimId ASSIGN expresion HASTA expresion HACER bloque EOF .

    ID              reduce using rule 108 (cicloNoCondicional -> DESDE ID dimId ASSIGN expresion HASTA expresion HACER bloque EOF .)
    REGRESA         reduce using rule 108 (cicloNoCondicional -> DESDE ID dimId ASSIGN expresion HASTA expresion HACER bloque EOF .)
    LECTURA         reduce using rule 108 (cicloNoCondicional -> DESDE ID dimId ASSIGN expresion HASTA expresion HACER bloque EOF .)
    ESCRIBE         reduce using rule 108 (cicloNoCondicional -> DESDE ID dimId ASSIGN expresion HASTA expresion HACER bloque EOF .)
    SI              reduce using rule 108 (cicloNoCondicional -> DESDE ID dimId ASSIGN expresion HASTA expresion HACER bloque EOF .)
    MIENTRAS        reduce using rule 108 (cicloNoCondicional -> DESDE ID dimId ASSIGN expresion HASTA expresion HACER bloque EOF .)
    DESDE           reduce using rule 108 (cicloNoCondicional -> DESDE ID dimId ASSIGN expresion HASTA expresion HACER bloque EOF .)
    R_CURLY_BRACKET reduce using rule 108 (cicloNoCondicional -> DESDE ID dimId ASSIGN expresion HASTA expresion HACER bloque EOF .)


state 239

    (104) decisionp -> SINO jump bloque update_jump .

    ID              reduce using rule 104 (decisionp -> SINO jump bloque update_jump .)
    REGRESA         reduce using rule 104 (decisionp -> SINO jump bloque update_jump .)
    LECTURA         reduce using rule 104 (decisionp -> SINO jump bloque update_jump .)
    ESCRIBE         reduce using rule 104 (decisionp -> SINO jump bloque update_jump .)
    SI              reduce using rule 104 (decisionp -> SINO jump bloque update_jump .)
    MIENTRAS        reduce using rule 104 (decisionp -> SINO jump bloque update_jump .)
    DESDE           reduce using rule 104 (decisionp -> SINO jump bloque update_jump .)
    R_CURLY_BRACKET reduce using rule 104 (decisionp -> SINO jump bloque update_jump .)

