Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> programa
Rule 2     programa -> PROGRAMA ID SEMICOLON jump var funcion clear_scope PRINCIPAL update_jump L_PARENTHESIS R_PARENTHESIS bloque EOF
Rule 3     jump -> <empty>
Rule 4     clear_scope -> <empty>
Rule 5     var -> VAR var_seen varp
Rule 6     var -> empty
Rule 7     var_seen -> <empty>
Rule 8     varp -> tipo tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp
Rule 9     varp -> tipo tipo_seen COLON ID error varppp varpp delete_type SEMICOLON varpppp
Rule 10    tipo_seen -> <empty>
Rule 11    variable_seen -> <empty>
Rule 12    delete_type -> <empty>
Rule 13    varpp -> COMMA ID variable_seen varppp varpp
Rule 14    varpp -> empty
Rule 15    varppp -> dimDeclare
Rule 16    varppp -> dimDeclare dimDeclare
Rule 17    varppp -> empty
Rule 18    varpppp -> varp
Rule 19    varpppp -> empty
Rule 20    dimDeclare -> L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET
Rule 21    tipo -> INT
Rule 22    tipo -> FLOAT
Rule 23    tipo -> CHAR
Rule 24    funcion -> FUNCION funcionp
Rule 25    funcion -> FUNCION error
Rule 26    funcion -> empty
Rule 27    funcionp -> tipoRetorno ID create_func_scope L_PARENTHESIS parametro R_PARENTHESIS var bloque end_func funcion
Rule 28    create_func_scope -> <empty>
Rule 29    end_func -> <empty>
Rule 30    parametro -> tipo ID save_param parametrop
Rule 31    parametro -> empty
Rule 32    save_param -> <empty>
Rule 33    parametrop -> COMMA tipo ID save_param parametrop
Rule 34    parametrop -> empty
Rule 35    tipoRetorno -> tipo
Rule 36    tipoRetorno -> VOID
Rule 37    bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET
Rule 38    bloquep -> estatuto bloquep
Rule 39    bloquep -> empty
Rule 40    estatuto -> asignacion
Rule 41    estatuto -> funcionVacia
Rule 42    estatuto -> regresa
Rule 43    estatuto -> lectura
Rule 44    estatuto -> escritura
Rule 45    estatuto -> decision
Rule 46    estatuto -> cicloCondicional
Rule 47    estatuto -> cicloNoCondicional
Rule 48    asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON
Rule 49    operand_seen -> <empty>
Rule 50    apply_operation_assign -> <empty>
Rule 51    dimId -> dim
Rule 52    dimId -> dim dim
Rule 53    dimId -> empty
Rule 54    dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET
Rule 55    expresion -> relacional apply_operation_expresion expresionp
Rule 56    expresion -> NOT relacional expresionp
Rule 57    expresionp -> AND operation_seen expresion
Rule 58    expresionp -> OR operation_seen expresion
Rule 59    expresionp -> empty
Rule 60    apply_operation_expresion -> <empty>
Rule 61    relacional -> aritmetica apply_operation_relational relacionalp
Rule 62    relacionalp -> EQUALS operation_seen relacional
Rule 63    relacionalp -> NOT_EQUAL operation_seen relacional
Rule 64    relacionalp -> LESS_THAN operation_seen relacional
Rule 65    relacionalp -> LESS_THAN_EQUAL operation_seen relacional
Rule 66    relacionalp -> GREATER_THAN operation_seen relacional
Rule 67    relacionalp -> GREATER_THAN_EQUAL operation_seen relacional
Rule 68    relacionalp -> empty
Rule 69    apply_operation_relational -> <empty>
Rule 70    aritmetica -> factor apply_operation_aritmetica aritmeticap
Rule 71    aritmeticap -> SUM operation_seen aritmetica
Rule 72    aritmeticap -> SUBTRACT operation_seen aritmetica
Rule 73    aritmeticap -> empty
Rule 74    apply_operation_aritmetica -> <empty>
Rule 75    factor -> matriz apply_operation_factor factorp
Rule 76    factorp -> MULTIPLY operation_seen factor
Rule 77    factorp -> DIVIDE operation_seen factor
Rule 78    factorp -> empty
Rule 79    apply_operation_factor -> <empty>
Rule 80    operation_seen -> <empty>
Rule 81    matriz -> cte matrizp
Rule 82    matrizp -> DETERMINANT
Rule 83    matrizp -> TRANSPOSED
Rule 84    matrizp -> INVERSE
Rule 85    matrizp -> empty
Rule 86    cte -> CTE_INT
Rule 87    cte -> CTE_FLOAT
Rule 88    cte -> CTE_CHAR
Rule 89    cte -> llamadaFuncion
Rule 90    cte -> ID operand_seen dimId
Rule 91    cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
Rule 92    llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen
Rule 93    llamadaFuncionp -> expresion verify_parameter llamadaFuncionpp
Rule 94    llamadaFuncionp -> empty
Rule 95    llamadaFuncionpp -> COMMA llamadaFuncionp
Rule 96    llamadaFuncionpp -> empty
Rule 97    verify_parameter -> <empty>
Rule 98    funcionVacia -> ID set_func_scope L_PARENTHESIS llamadaFuncionp R_PARENTHESIS SEMICOLON
Rule 99    set_func_scope -> <empty>
Rule 100   regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON
Rule 101   lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON
Rule 102   lecturap -> ID dimId lecturapp
Rule 103   lecturapp -> COMMA lecturap
Rule 104   lecturapp -> empty
Rule 105   escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON
Rule 106   escriturap -> LETRERO gen_print escriturapp
Rule 107   escriturap -> expresion gen_print escriturapp
Rule 108   gen_print -> <empty>
Rule 109   escriturapp -> COMMA escriturap
Rule 110   escriturapp -> empty
Rule 111   decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp
Rule 112   jump_false -> <empty>
Rule 113   update_jump -> <empty>
Rule 114   decisionp -> SINO jump_else bloque update_jump
Rule 115   decisionp -> empty update_jump
Rule 116   jump_else -> <empty>
Rule 117   cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle
Rule 118   jump_cycle -> <empty>
Rule 119   update_jump_cycle -> <empty>
Rule 120   cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle
Rule 121   add_gt -> <empty>
Rule 122   add_one -> <empty>
Rule 123   empty -> <empty>

Terminals, with rules where they appear

AND                  : 57
ASSIGN               : 48 120
CHAR                 : 23
COLON                : 8 9
COMMA                : 13 33 95 103 109
CTE_CHAR             : 88
CTE_FLOAT            : 87
CTE_INT              : 20 86
DESDE                : 120
DETERMINANT          : 82
DIVIDE               : 77
EOF                  : 2
EQUALS               : 62
ESCRIBE              : 105
FLOAT                : 22
FUNCION              : 24 25
GREATER_THAN         : 66
GREATER_THAN_EQUAL   : 67
HACER                : 120
HASTA                : 120
HAZ                  : 111 117
ID                   : 2 8 9 13 27 30 33 48 90 92 98 102 120
INT                  : 21
INVERSE              : 84
LECTURA              : 101
LESS_THAN            : 64
LESS_THAN_EQUAL      : 65
LETRERO              : 106
L_CURLY_BRACKET      : 37
L_PARENTHESIS        : 2 27 91 92 98 100 101 105 111 117
L_SQUARE_BRACKET     : 20 54
MIENTRAS             : 117
MULTIPLY             : 76
NOT                  : 56
NOT_EQUAL            : 63
OR                   : 58
PRINCIPAL            : 2
PROGRAMA             : 2
REGRESA              : 100
R_CURLY_BRACKET      : 37
R_PARENTHESIS        : 2 27 91 92 98 100 101 105 111 117
R_SQUARE_BRACKET     : 20 54
SEMICOLON            : 2 8 9 48 98 100 101 105
SI                   : 111
SINO                 : 114
SUBTRACT             : 72
SUM                  : 71
TRANSPOSED           : 83
VAR                  : 5
VOID                 : 36
error                : 9 25

Nonterminals, with rules where they appear

add_gt               : 120
add_one              : 120
apply_operation_aritmetica : 70
apply_operation_assign : 48 120
apply_operation_expresion : 55
apply_operation_factor : 75
apply_operation_relational : 61 120
aritmetica           : 61 71 72
aritmeticap          : 70
asignacion           : 40
bloque               : 2 27 111 114 117 120
bloquep              : 37 38
cicloCondicional     : 46
cicloNoCondicional   : 47
clear_scope          : 2
create_func_scope    : 27
cte                  : 81
decision             : 45
decisionp            : 111
delete_type          : 8 9
dim                  : 51 52 52
dimDeclare           : 15 16 16
dimId                : 48 90 102 120
empty                : 6 14 17 19 26 31 34 39 53 59 68 73 78 85 94 96 104 110 115
end_func             : 27
escritura            : 44
escriturap           : 105 109
escriturapp          : 106 107
estatuto             : 38
expresion            : 48 54 57 58 91 93 100 107 111 117 120 120
expresionp           : 55 56
factor               : 70 76 77
factorp              : 75
funcion              : 2 27
funcionVacia         : 41
funcionp             : 24
gen_print            : 106 107
jump                 : 2
jump_cycle           : 117 120
jump_else            : 114
jump_false           : 111 117 120
lectura              : 43
lecturap             : 101 103
lecturapp            : 102
llamadaFuncion       : 89
llamadaFuncionp      : 92 95 98
llamadaFuncionpp     : 93
matriz               : 75
matrizp              : 81
operand_seen         : 48 90 120
operation_seen       : 48 57 58 62 63 64 65 66 67 71 72 76 77 91 91 92 92 120
parametro            : 27
parametrop           : 30 33
programa             : 1
regresa              : 42
relacional           : 55 56 62 63 64 65 66 67
relacionalp          : 61
save_param           : 30 33
set_func_scope       : 92 98
start                : 0
tipo                 : 8 9 30 33 35
tipoRetorno          : 27
tipo_seen            : 8 9
update_jump          : 2 114 115
update_jump_cycle    : 117 120
var                  : 2 27
var_seen             : 5
variable_seen        : 8 13
varp                 : 5 18
varpp                : 8 9 13
varppp               : 8 9 13
varpppp              : 8 9
verify_parameter     : 93

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . programa
    (2) programa -> . PROGRAMA ID SEMICOLON jump var funcion clear_scope PRINCIPAL update_jump L_PARENTHESIS R_PARENTHESIS bloque EOF

    PROGRAMA        shift and go to state 3

    start                          shift and go to state 1
    programa                       shift and go to state 2

state 1

    (0) S' -> start .



state 2

    (1) start -> programa .

    $end            reduce using rule 1 (start -> programa .)


state 3

    (2) programa -> PROGRAMA . ID SEMICOLON jump var funcion clear_scope PRINCIPAL update_jump L_PARENTHESIS R_PARENTHESIS bloque EOF

    ID              shift and go to state 4


state 4

    (2) programa -> PROGRAMA ID . SEMICOLON jump var funcion clear_scope PRINCIPAL update_jump L_PARENTHESIS R_PARENTHESIS bloque EOF

    SEMICOLON       shift and go to state 5


state 5

    (2) programa -> PROGRAMA ID SEMICOLON . jump var funcion clear_scope PRINCIPAL update_jump L_PARENTHESIS R_PARENTHESIS bloque EOF
    (3) jump -> .

    VAR             reduce using rule 3 (jump -> .)
    FUNCION         reduce using rule 3 (jump -> .)
    PRINCIPAL       reduce using rule 3 (jump -> .)

    jump                           shift and go to state 6

state 6

    (2) programa -> PROGRAMA ID SEMICOLON jump . var funcion clear_scope PRINCIPAL update_jump L_PARENTHESIS R_PARENTHESIS bloque EOF
    (5) var -> . VAR var_seen varp
    (6) var -> . empty
    (123) empty -> .

    VAR             shift and go to state 8
    FUNCION         reduce using rule 123 (empty -> .)
    PRINCIPAL       reduce using rule 123 (empty -> .)

    var                            shift and go to state 7
    empty                          shift and go to state 9

state 7

    (2) programa -> PROGRAMA ID SEMICOLON jump var . funcion clear_scope PRINCIPAL update_jump L_PARENTHESIS R_PARENTHESIS bloque EOF
    (24) funcion -> . FUNCION funcionp
    (25) funcion -> . FUNCION error
    (26) funcion -> . empty
    (123) empty -> .

    FUNCION         shift and go to state 11
    PRINCIPAL       reduce using rule 123 (empty -> .)

    funcion                        shift and go to state 10
    empty                          shift and go to state 12

state 8

    (5) var -> VAR . var_seen varp
    (7) var_seen -> .

    INT             reduce using rule 7 (var_seen -> .)
    FLOAT           reduce using rule 7 (var_seen -> .)
    CHAR            reduce using rule 7 (var_seen -> .)

    var_seen                       shift and go to state 13

state 9

    (6) var -> empty .

    FUNCION         reduce using rule 6 (var -> empty .)
    PRINCIPAL       reduce using rule 6 (var -> empty .)
    L_CURLY_BRACKET reduce using rule 6 (var -> empty .)


state 10

    (2) programa -> PROGRAMA ID SEMICOLON jump var funcion . clear_scope PRINCIPAL update_jump L_PARENTHESIS R_PARENTHESIS bloque EOF
    (4) clear_scope -> .

    PRINCIPAL       reduce using rule 4 (clear_scope -> .)

    clear_scope                    shift and go to state 14

state 11

    (24) funcion -> FUNCION . funcionp
    (25) funcion -> FUNCION . error
    (27) funcionp -> . tipoRetorno ID create_func_scope L_PARENTHESIS parametro R_PARENTHESIS var bloque end_func funcion
    (35) tipoRetorno -> . tipo
    (36) tipoRetorno -> . VOID
    (21) tipo -> . INT
    (22) tipo -> . FLOAT
    (23) tipo -> . CHAR

    error           shift and go to state 16
    VOID            shift and go to state 19
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22

    funcionp                       shift and go to state 15
    tipoRetorno                    shift and go to state 17
    tipo                           shift and go to state 18

state 12

    (26) funcion -> empty .

    PRINCIPAL       reduce using rule 26 (funcion -> empty .)


state 13

    (5) var -> VAR var_seen . varp
    (8) varp -> . tipo tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp
    (9) varp -> . tipo tipo_seen COLON ID error varppp varpp delete_type SEMICOLON varpppp
    (21) tipo -> . INT
    (22) tipo -> . FLOAT
    (23) tipo -> . CHAR

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22

    varp                           shift and go to state 23
    tipo                           shift and go to state 24

state 14

    (2) programa -> PROGRAMA ID SEMICOLON jump var funcion clear_scope . PRINCIPAL update_jump L_PARENTHESIS R_PARENTHESIS bloque EOF

    PRINCIPAL       shift and go to state 25


state 15

    (24) funcion -> FUNCION funcionp .

    PRINCIPAL       reduce using rule 24 (funcion -> FUNCION funcionp .)


state 16

    (25) funcion -> FUNCION error .

    PRINCIPAL       reduce using rule 25 (funcion -> FUNCION error .)


state 17

    (27) funcionp -> tipoRetorno . ID create_func_scope L_PARENTHESIS parametro R_PARENTHESIS var bloque end_func funcion

    ID              shift and go to state 26


state 18

    (35) tipoRetorno -> tipo .

    ID              reduce using rule 35 (tipoRetorno -> tipo .)


state 19

    (36) tipoRetorno -> VOID .

    ID              reduce using rule 36 (tipoRetorno -> VOID .)


state 20

    (21) tipo -> INT .

    ID              reduce using rule 21 (tipo -> INT .)
    COLON           reduce using rule 21 (tipo -> INT .)


state 21

    (22) tipo -> FLOAT .

    ID              reduce using rule 22 (tipo -> FLOAT .)
    COLON           reduce using rule 22 (tipo -> FLOAT .)


state 22

    (23) tipo -> CHAR .

    ID              reduce using rule 23 (tipo -> CHAR .)
    COLON           reduce using rule 23 (tipo -> CHAR .)


state 23

    (5) var -> VAR var_seen varp .

    FUNCION         reduce using rule 5 (var -> VAR var_seen varp .)
    PRINCIPAL       reduce using rule 5 (var -> VAR var_seen varp .)
    L_CURLY_BRACKET reduce using rule 5 (var -> VAR var_seen varp .)


state 24

    (8) varp -> tipo . tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp
    (9) varp -> tipo . tipo_seen COLON ID error varppp varpp delete_type SEMICOLON varpppp
    (10) tipo_seen -> .

    COLON           reduce using rule 10 (tipo_seen -> .)

    tipo_seen                      shift and go to state 27

state 25

    (2) programa -> PROGRAMA ID SEMICOLON jump var funcion clear_scope PRINCIPAL . update_jump L_PARENTHESIS R_PARENTHESIS bloque EOF
    (113) update_jump -> .

    L_PARENTHESIS   reduce using rule 113 (update_jump -> .)

    update_jump                    shift and go to state 28

state 26

    (27) funcionp -> tipoRetorno ID . create_func_scope L_PARENTHESIS parametro R_PARENTHESIS var bloque end_func funcion
    (28) create_func_scope -> .

    L_PARENTHESIS   reduce using rule 28 (create_func_scope -> .)

    create_func_scope              shift and go to state 29

state 27

    (8) varp -> tipo tipo_seen . COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp
    (9) varp -> tipo tipo_seen . COLON ID error varppp varpp delete_type SEMICOLON varpppp

    COLON           shift and go to state 30


state 28

    (2) programa -> PROGRAMA ID SEMICOLON jump var funcion clear_scope PRINCIPAL update_jump . L_PARENTHESIS R_PARENTHESIS bloque EOF

    L_PARENTHESIS   shift and go to state 31


state 29

    (27) funcionp -> tipoRetorno ID create_func_scope . L_PARENTHESIS parametro R_PARENTHESIS var bloque end_func funcion

    L_PARENTHESIS   shift and go to state 32


state 30

    (8) varp -> tipo tipo_seen COLON . ID variable_seen varppp varpp delete_type SEMICOLON varpppp
    (9) varp -> tipo tipo_seen COLON . ID error varppp varpp delete_type SEMICOLON varpppp

    ID              shift and go to state 33


state 31

    (2) programa -> PROGRAMA ID SEMICOLON jump var funcion clear_scope PRINCIPAL update_jump L_PARENTHESIS . R_PARENTHESIS bloque EOF

    R_PARENTHESIS   shift and go to state 34


state 32

    (27) funcionp -> tipoRetorno ID create_func_scope L_PARENTHESIS . parametro R_PARENTHESIS var bloque end_func funcion
    (30) parametro -> . tipo ID save_param parametrop
    (31) parametro -> . empty
    (21) tipo -> . INT
    (22) tipo -> . FLOAT
    (23) tipo -> . CHAR
    (123) empty -> .

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    R_PARENTHESIS   reduce using rule 123 (empty -> .)

    parametro                      shift and go to state 35
    tipo                           shift and go to state 36
    empty                          shift and go to state 37

state 33

    (8) varp -> tipo tipo_seen COLON ID . variable_seen varppp varpp delete_type SEMICOLON varpppp
    (9) varp -> tipo tipo_seen COLON ID . error varppp varpp delete_type SEMICOLON varpppp
    (11) variable_seen -> .

    error           shift and go to state 39
    L_SQUARE_BRACKET reduce using rule 11 (variable_seen -> .)
    COMMA           reduce using rule 11 (variable_seen -> .)
    SEMICOLON       reduce using rule 11 (variable_seen -> .)

    variable_seen                  shift and go to state 38

state 34

    (2) programa -> PROGRAMA ID SEMICOLON jump var funcion clear_scope PRINCIPAL update_jump L_PARENTHESIS R_PARENTHESIS . bloque EOF
    (37) bloque -> . L_CURLY_BRACKET bloquep R_CURLY_BRACKET

    L_CURLY_BRACKET shift and go to state 41

    bloque                         shift and go to state 40

state 35

    (27) funcionp -> tipoRetorno ID create_func_scope L_PARENTHESIS parametro . R_PARENTHESIS var bloque end_func funcion

    R_PARENTHESIS   shift and go to state 42


state 36

    (30) parametro -> tipo . ID save_param parametrop

    ID              shift and go to state 43


state 37

    (31) parametro -> empty .

    R_PARENTHESIS   reduce using rule 31 (parametro -> empty .)


state 38

    (8) varp -> tipo tipo_seen COLON ID variable_seen . varppp varpp delete_type SEMICOLON varpppp
    (15) varppp -> . dimDeclare
    (16) varppp -> . dimDeclare dimDeclare
    (17) varppp -> . empty
    (20) dimDeclare -> . L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET
    (123) empty -> .

    L_SQUARE_BRACKET shift and go to state 47
    COMMA           reduce using rule 123 (empty -> .)
    SEMICOLON       reduce using rule 123 (empty -> .)

    varppp                         shift and go to state 44
    dimDeclare                     shift and go to state 45
    empty                          shift and go to state 46

state 39

    (9) varp -> tipo tipo_seen COLON ID error . varppp varpp delete_type SEMICOLON varpppp
    (15) varppp -> . dimDeclare
    (16) varppp -> . dimDeclare dimDeclare
    (17) varppp -> . empty
    (20) dimDeclare -> . L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET
    (123) empty -> .

    L_SQUARE_BRACKET shift and go to state 47
    COMMA           reduce using rule 123 (empty -> .)
    SEMICOLON       reduce using rule 123 (empty -> .)

    varppp                         shift and go to state 48
    dimDeclare                     shift and go to state 45
    empty                          shift and go to state 46

state 40

    (2) programa -> PROGRAMA ID SEMICOLON jump var funcion clear_scope PRINCIPAL update_jump L_PARENTHESIS R_PARENTHESIS bloque . EOF

    EOF             shift and go to state 49


state 41

    (37) bloque -> L_CURLY_BRACKET . bloquep R_CURLY_BRACKET
    (38) bloquep -> . estatuto bloquep
    (39) bloquep -> . empty
    (40) estatuto -> . asignacion
    (41) estatuto -> . funcionVacia
    (42) estatuto -> . regresa
    (43) estatuto -> . lectura
    (44) estatuto -> . escritura
    (45) estatuto -> . decision
    (46) estatuto -> . cicloCondicional
    (47) estatuto -> . cicloNoCondicional
    (123) empty -> .
    (48) asignacion -> . ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON
    (98) funcionVacia -> . ID set_func_scope L_PARENTHESIS llamadaFuncionp R_PARENTHESIS SEMICOLON
    (100) regresa -> . REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON
    (101) lectura -> . LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON
    (105) escritura -> . ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON
    (111) decision -> . SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp
    (117) cicloCondicional -> . MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle
    (120) cicloNoCondicional -> . DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle

    R_CURLY_BRACKET reduce using rule 123 (empty -> .)
    ID              shift and go to state 61
    REGRESA         shift and go to state 62
    LECTURA         shift and go to state 63
    ESCRIBE         shift and go to state 64
    SI              shift and go to state 65
    MIENTRAS        shift and go to state 66
    DESDE           shift and go to state 67

    bloquep                        shift and go to state 50
    estatuto                       shift and go to state 51
    empty                          shift and go to state 52
    asignacion                     shift and go to state 53
    funcionVacia                   shift and go to state 54
    regresa                        shift and go to state 55
    lectura                        shift and go to state 56
    escritura                      shift and go to state 57
    decision                       shift and go to state 58
    cicloCondicional               shift and go to state 59
    cicloNoCondicional             shift and go to state 60

state 42

    (27) funcionp -> tipoRetorno ID create_func_scope L_PARENTHESIS parametro R_PARENTHESIS . var bloque end_func funcion
    (5) var -> . VAR var_seen varp
    (6) var -> . empty
    (123) empty -> .

    VAR             shift and go to state 8
    L_CURLY_BRACKET reduce using rule 123 (empty -> .)

    var                            shift and go to state 68
    empty                          shift and go to state 9

state 43

    (30) parametro -> tipo ID . save_param parametrop
    (32) save_param -> .

    COMMA           reduce using rule 32 (save_param -> .)
    R_PARENTHESIS   reduce using rule 32 (save_param -> .)

    save_param                     shift and go to state 69

state 44

    (8) varp -> tipo tipo_seen COLON ID variable_seen varppp . varpp delete_type SEMICOLON varpppp
    (13) varpp -> . COMMA ID variable_seen varppp varpp
    (14) varpp -> . empty
    (123) empty -> .

    COMMA           shift and go to state 71
    SEMICOLON       reduce using rule 123 (empty -> .)

    varpp                          shift and go to state 70
    empty                          shift and go to state 72

state 45

    (15) varppp -> dimDeclare .
    (16) varppp -> dimDeclare . dimDeclare
    (20) dimDeclare -> . L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET

    COMMA           reduce using rule 15 (varppp -> dimDeclare .)
    SEMICOLON       reduce using rule 15 (varppp -> dimDeclare .)
    L_SQUARE_BRACKET shift and go to state 47

    dimDeclare                     shift and go to state 73

state 46

    (17) varppp -> empty .

    COMMA           reduce using rule 17 (varppp -> empty .)
    SEMICOLON       reduce using rule 17 (varppp -> empty .)


state 47

    (20) dimDeclare -> L_SQUARE_BRACKET . CTE_INT R_SQUARE_BRACKET

    CTE_INT         shift and go to state 74


state 48

    (9) varp -> tipo tipo_seen COLON ID error varppp . varpp delete_type SEMICOLON varpppp
    (13) varpp -> . COMMA ID variable_seen varppp varpp
    (14) varpp -> . empty
    (123) empty -> .

    COMMA           shift and go to state 71
    SEMICOLON       reduce using rule 123 (empty -> .)

    varpp                          shift and go to state 75
    empty                          shift and go to state 72

state 49

    (2) programa -> PROGRAMA ID SEMICOLON jump var funcion clear_scope PRINCIPAL update_jump L_PARENTHESIS R_PARENTHESIS bloque EOF .

    $end            reduce using rule 2 (programa -> PROGRAMA ID SEMICOLON jump var funcion clear_scope PRINCIPAL update_jump L_PARENTHESIS R_PARENTHESIS bloque EOF .)


state 50

    (37) bloque -> L_CURLY_BRACKET bloquep . R_CURLY_BRACKET

    R_CURLY_BRACKET shift and go to state 76


state 51

    (38) bloquep -> estatuto . bloquep
    (38) bloquep -> . estatuto bloquep
    (39) bloquep -> . empty
    (40) estatuto -> . asignacion
    (41) estatuto -> . funcionVacia
    (42) estatuto -> . regresa
    (43) estatuto -> . lectura
    (44) estatuto -> . escritura
    (45) estatuto -> . decision
    (46) estatuto -> . cicloCondicional
    (47) estatuto -> . cicloNoCondicional
    (123) empty -> .
    (48) asignacion -> . ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON
    (98) funcionVacia -> . ID set_func_scope L_PARENTHESIS llamadaFuncionp R_PARENTHESIS SEMICOLON
    (100) regresa -> . REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON
    (101) lectura -> . LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON
    (105) escritura -> . ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON
    (111) decision -> . SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp
    (117) cicloCondicional -> . MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle
    (120) cicloNoCondicional -> . DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle

    R_CURLY_BRACKET reduce using rule 123 (empty -> .)
    ID              shift and go to state 61
    REGRESA         shift and go to state 62
    LECTURA         shift and go to state 63
    ESCRIBE         shift and go to state 64
    SI              shift and go to state 65
    MIENTRAS        shift and go to state 66
    DESDE           shift and go to state 67

    estatuto                       shift and go to state 51
    bloquep                        shift and go to state 77
    empty                          shift and go to state 52
    asignacion                     shift and go to state 53
    funcionVacia                   shift and go to state 54
    regresa                        shift and go to state 55
    lectura                        shift and go to state 56
    escritura                      shift and go to state 57
    decision                       shift and go to state 58
    cicloCondicional               shift and go to state 59
    cicloNoCondicional             shift and go to state 60

state 52

    (39) bloquep -> empty .

    R_CURLY_BRACKET reduce using rule 39 (bloquep -> empty .)


state 53

    (40) estatuto -> asignacion .

    ID              reduce using rule 40 (estatuto -> asignacion .)
    REGRESA         reduce using rule 40 (estatuto -> asignacion .)
    LECTURA         reduce using rule 40 (estatuto -> asignacion .)
    ESCRIBE         reduce using rule 40 (estatuto -> asignacion .)
    SI              reduce using rule 40 (estatuto -> asignacion .)
    MIENTRAS        reduce using rule 40 (estatuto -> asignacion .)
    DESDE           reduce using rule 40 (estatuto -> asignacion .)
    R_CURLY_BRACKET reduce using rule 40 (estatuto -> asignacion .)


state 54

    (41) estatuto -> funcionVacia .

    ID              reduce using rule 41 (estatuto -> funcionVacia .)
    REGRESA         reduce using rule 41 (estatuto -> funcionVacia .)
    LECTURA         reduce using rule 41 (estatuto -> funcionVacia .)
    ESCRIBE         reduce using rule 41 (estatuto -> funcionVacia .)
    SI              reduce using rule 41 (estatuto -> funcionVacia .)
    MIENTRAS        reduce using rule 41 (estatuto -> funcionVacia .)
    DESDE           reduce using rule 41 (estatuto -> funcionVacia .)
    R_CURLY_BRACKET reduce using rule 41 (estatuto -> funcionVacia .)


state 55

    (42) estatuto -> regresa .

    ID              reduce using rule 42 (estatuto -> regresa .)
    REGRESA         reduce using rule 42 (estatuto -> regresa .)
    LECTURA         reduce using rule 42 (estatuto -> regresa .)
    ESCRIBE         reduce using rule 42 (estatuto -> regresa .)
    SI              reduce using rule 42 (estatuto -> regresa .)
    MIENTRAS        reduce using rule 42 (estatuto -> regresa .)
    DESDE           reduce using rule 42 (estatuto -> regresa .)
    R_CURLY_BRACKET reduce using rule 42 (estatuto -> regresa .)


state 56

    (43) estatuto -> lectura .

    ID              reduce using rule 43 (estatuto -> lectura .)
    REGRESA         reduce using rule 43 (estatuto -> lectura .)
    LECTURA         reduce using rule 43 (estatuto -> lectura .)
    ESCRIBE         reduce using rule 43 (estatuto -> lectura .)
    SI              reduce using rule 43 (estatuto -> lectura .)
    MIENTRAS        reduce using rule 43 (estatuto -> lectura .)
    DESDE           reduce using rule 43 (estatuto -> lectura .)
    R_CURLY_BRACKET reduce using rule 43 (estatuto -> lectura .)


state 57

    (44) estatuto -> escritura .

    ID              reduce using rule 44 (estatuto -> escritura .)
    REGRESA         reduce using rule 44 (estatuto -> escritura .)
    LECTURA         reduce using rule 44 (estatuto -> escritura .)
    ESCRIBE         reduce using rule 44 (estatuto -> escritura .)
    SI              reduce using rule 44 (estatuto -> escritura .)
    MIENTRAS        reduce using rule 44 (estatuto -> escritura .)
    DESDE           reduce using rule 44 (estatuto -> escritura .)
    R_CURLY_BRACKET reduce using rule 44 (estatuto -> escritura .)


state 58

    (45) estatuto -> decision .

    ID              reduce using rule 45 (estatuto -> decision .)
    REGRESA         reduce using rule 45 (estatuto -> decision .)
    LECTURA         reduce using rule 45 (estatuto -> decision .)
    ESCRIBE         reduce using rule 45 (estatuto -> decision .)
    SI              reduce using rule 45 (estatuto -> decision .)
    MIENTRAS        reduce using rule 45 (estatuto -> decision .)
    DESDE           reduce using rule 45 (estatuto -> decision .)
    R_CURLY_BRACKET reduce using rule 45 (estatuto -> decision .)


state 59

    (46) estatuto -> cicloCondicional .

    ID              reduce using rule 46 (estatuto -> cicloCondicional .)
    REGRESA         reduce using rule 46 (estatuto -> cicloCondicional .)
    LECTURA         reduce using rule 46 (estatuto -> cicloCondicional .)
    ESCRIBE         reduce using rule 46 (estatuto -> cicloCondicional .)
    SI              reduce using rule 46 (estatuto -> cicloCondicional .)
    MIENTRAS        reduce using rule 46 (estatuto -> cicloCondicional .)
    DESDE           reduce using rule 46 (estatuto -> cicloCondicional .)
    R_CURLY_BRACKET reduce using rule 46 (estatuto -> cicloCondicional .)


state 60

    (47) estatuto -> cicloNoCondicional .

    ID              reduce using rule 47 (estatuto -> cicloNoCondicional .)
    REGRESA         reduce using rule 47 (estatuto -> cicloNoCondicional .)
    LECTURA         reduce using rule 47 (estatuto -> cicloNoCondicional .)
    ESCRIBE         reduce using rule 47 (estatuto -> cicloNoCondicional .)
    SI              reduce using rule 47 (estatuto -> cicloNoCondicional .)
    MIENTRAS        reduce using rule 47 (estatuto -> cicloNoCondicional .)
    DESDE           reduce using rule 47 (estatuto -> cicloNoCondicional .)
    R_CURLY_BRACKET reduce using rule 47 (estatuto -> cicloNoCondicional .)


state 61

    (48) asignacion -> ID . operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON
    (98) funcionVacia -> ID . set_func_scope L_PARENTHESIS llamadaFuncionp R_PARENTHESIS SEMICOLON
    (49) operand_seen -> .
    (99) set_func_scope -> .

    L_SQUARE_BRACKET reduce using rule 49 (operand_seen -> .)
    ASSIGN          reduce using rule 49 (operand_seen -> .)
    L_PARENTHESIS   reduce using rule 99 (set_func_scope -> .)

    operand_seen                   shift and go to state 78
    set_func_scope                 shift and go to state 79

state 62

    (100) regresa -> REGRESA . L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON

    L_PARENTHESIS   shift and go to state 80


state 63

    (101) lectura -> LECTURA . L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON

    L_PARENTHESIS   shift and go to state 81


state 64

    (105) escritura -> ESCRIBE . L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON

    L_PARENTHESIS   shift and go to state 82


state 65

    (111) decision -> SI . L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp

    L_PARENTHESIS   shift and go to state 83


state 66

    (117) cicloCondicional -> MIENTRAS . jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle
    (118) jump_cycle -> .

    L_PARENTHESIS   reduce using rule 118 (jump_cycle -> .)

    jump_cycle                     shift and go to state 84

state 67

    (120) cicloNoCondicional -> DESDE . ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle

    ID              shift and go to state 85


state 68

    (27) funcionp -> tipoRetorno ID create_func_scope L_PARENTHESIS parametro R_PARENTHESIS var . bloque end_func funcion
    (37) bloque -> . L_CURLY_BRACKET bloquep R_CURLY_BRACKET

    L_CURLY_BRACKET shift and go to state 41

    bloque                         shift and go to state 86

state 69

    (30) parametro -> tipo ID save_param . parametrop
    (33) parametrop -> . COMMA tipo ID save_param parametrop
    (34) parametrop -> . empty
    (123) empty -> .

    COMMA           shift and go to state 88
    R_PARENTHESIS   reduce using rule 123 (empty -> .)

    parametrop                     shift and go to state 87
    empty                          shift and go to state 89

state 70

    (8) varp -> tipo tipo_seen COLON ID variable_seen varppp varpp . delete_type SEMICOLON varpppp
    (12) delete_type -> .

    SEMICOLON       reduce using rule 12 (delete_type -> .)

    delete_type                    shift and go to state 90

state 71

    (13) varpp -> COMMA . ID variable_seen varppp varpp

    ID              shift and go to state 91


state 72

    (14) varpp -> empty .

    SEMICOLON       reduce using rule 14 (varpp -> empty .)


state 73

    (16) varppp -> dimDeclare dimDeclare .

    COMMA           reduce using rule 16 (varppp -> dimDeclare dimDeclare .)
    SEMICOLON       reduce using rule 16 (varppp -> dimDeclare dimDeclare .)


state 74

    (20) dimDeclare -> L_SQUARE_BRACKET CTE_INT . R_SQUARE_BRACKET

    R_SQUARE_BRACKET shift and go to state 92


state 75

    (9) varp -> tipo tipo_seen COLON ID error varppp varpp . delete_type SEMICOLON varpppp
    (12) delete_type -> .

    SEMICOLON       reduce using rule 12 (delete_type -> .)

    delete_type                    shift and go to state 93

state 76

    (37) bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .

    EOF             reduce using rule 37 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    FUNCION         reduce using rule 37 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    PRINCIPAL       reduce using rule 37 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    SINO            reduce using rule 37 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    ID              reduce using rule 37 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    REGRESA         reduce using rule 37 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    LECTURA         reduce using rule 37 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    ESCRIBE         reduce using rule 37 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    SI              reduce using rule 37 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    MIENTRAS        reduce using rule 37 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    DESDE           reduce using rule 37 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    R_CURLY_BRACKET reduce using rule 37 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)


state 77

    (38) bloquep -> estatuto bloquep .

    R_CURLY_BRACKET reduce using rule 38 (bloquep -> estatuto bloquep .)


state 78

    (48) asignacion -> ID operand_seen . dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON
    (51) dimId -> . dim
    (52) dimId -> . dim dim
    (53) dimId -> . empty
    (54) dim -> . L_SQUARE_BRACKET expresion R_SQUARE_BRACKET
    (123) empty -> .

    L_SQUARE_BRACKET shift and go to state 97
    ASSIGN          reduce using rule 123 (empty -> .)

    dimId                          shift and go to state 94
    dim                            shift and go to state 95
    empty                          shift and go to state 96

state 79

    (98) funcionVacia -> ID set_func_scope . L_PARENTHESIS llamadaFuncionp R_PARENTHESIS SEMICOLON

    L_PARENTHESIS   shift and go to state 98


state 80

    (100) regresa -> REGRESA L_PARENTHESIS . expresion R_PARENTHESIS SEMICOLON
    (55) expresion -> . relacional apply_operation_expresion expresionp
    (56) expresion -> . NOT relacional expresionp
    (61) relacional -> . aritmetica apply_operation_relational relacionalp
    (70) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (75) factor -> . matriz apply_operation_factor factorp
    (81) matriz -> . cte matrizp
    (86) cte -> . CTE_INT
    (87) cte -> . CTE_FLOAT
    (88) cte -> . CTE_CHAR
    (89) cte -> . llamadaFuncion
    (90) cte -> . ID operand_seen dimId
    (91) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (92) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    NOT             shift and go to state 102
    CTE_INT         shift and go to state 107
    CTE_FLOAT       shift and go to state 108
    CTE_CHAR        shift and go to state 109
    ID              shift and go to state 111
    L_PARENTHESIS   shift and go to state 99

    expresion                      shift and go to state 100
    relacional                     shift and go to state 101
    aritmetica                     shift and go to state 103
    factor                         shift and go to state 104
    matriz                         shift and go to state 105
    cte                            shift and go to state 106
    llamadaFuncion                 shift and go to state 110

state 81

    (101) lectura -> LECTURA L_PARENTHESIS . lecturap R_PARENTHESIS SEMICOLON
    (102) lecturap -> . ID dimId lecturapp

    ID              shift and go to state 113

    lecturap                       shift and go to state 112

state 82

    (105) escritura -> ESCRIBE L_PARENTHESIS . escriturap R_PARENTHESIS SEMICOLON
    (106) escriturap -> . LETRERO gen_print escriturapp
    (107) escriturap -> . expresion gen_print escriturapp
    (55) expresion -> . relacional apply_operation_expresion expresionp
    (56) expresion -> . NOT relacional expresionp
    (61) relacional -> . aritmetica apply_operation_relational relacionalp
    (70) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (75) factor -> . matriz apply_operation_factor factorp
    (81) matriz -> . cte matrizp
    (86) cte -> . CTE_INT
    (87) cte -> . CTE_FLOAT
    (88) cte -> . CTE_CHAR
    (89) cte -> . llamadaFuncion
    (90) cte -> . ID operand_seen dimId
    (91) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (92) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    LETRERO         shift and go to state 115
    NOT             shift and go to state 102
    CTE_INT         shift and go to state 107
    CTE_FLOAT       shift and go to state 108
    CTE_CHAR        shift and go to state 109
    ID              shift and go to state 111
    L_PARENTHESIS   shift and go to state 99

    escriturap                     shift and go to state 114
    expresion                      shift and go to state 116
    relacional                     shift and go to state 101
    aritmetica                     shift and go to state 103
    factor                         shift and go to state 104
    matriz                         shift and go to state 105
    cte                            shift and go to state 106
    llamadaFuncion                 shift and go to state 110

state 83

    (111) decision -> SI L_PARENTHESIS . expresion R_PARENTHESIS jump_false HAZ bloque decisionp
    (55) expresion -> . relacional apply_operation_expresion expresionp
    (56) expresion -> . NOT relacional expresionp
    (61) relacional -> . aritmetica apply_operation_relational relacionalp
    (70) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (75) factor -> . matriz apply_operation_factor factorp
    (81) matriz -> . cte matrizp
    (86) cte -> . CTE_INT
    (87) cte -> . CTE_FLOAT
    (88) cte -> . CTE_CHAR
    (89) cte -> . llamadaFuncion
    (90) cte -> . ID operand_seen dimId
    (91) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (92) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    NOT             shift and go to state 102
    CTE_INT         shift and go to state 107
    CTE_FLOAT       shift and go to state 108
    CTE_CHAR        shift and go to state 109
    ID              shift and go to state 111
    L_PARENTHESIS   shift and go to state 99

    expresion                      shift and go to state 117
    relacional                     shift and go to state 101
    aritmetica                     shift and go to state 103
    factor                         shift and go to state 104
    matriz                         shift and go to state 105
    cte                            shift and go to state 106
    llamadaFuncion                 shift and go to state 110

state 84

    (117) cicloCondicional -> MIENTRAS jump_cycle . L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle

    L_PARENTHESIS   shift and go to state 118


state 85

    (120) cicloNoCondicional -> DESDE ID . operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle
    (49) operand_seen -> .

    L_SQUARE_BRACKET reduce using rule 49 (operand_seen -> .)
    ASSIGN          reduce using rule 49 (operand_seen -> .)

    operand_seen                   shift and go to state 119

state 86

    (27) funcionp -> tipoRetorno ID create_func_scope L_PARENTHESIS parametro R_PARENTHESIS var bloque . end_func funcion
    (29) end_func -> .

    FUNCION         reduce using rule 29 (end_func -> .)
    PRINCIPAL       reduce using rule 29 (end_func -> .)

    end_func                       shift and go to state 120

state 87

    (30) parametro -> tipo ID save_param parametrop .

    R_PARENTHESIS   reduce using rule 30 (parametro -> tipo ID save_param parametrop .)


state 88

    (33) parametrop -> COMMA . tipo ID save_param parametrop
    (21) tipo -> . INT
    (22) tipo -> . FLOAT
    (23) tipo -> . CHAR

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22

    tipo                           shift and go to state 121

state 89

    (34) parametrop -> empty .

    R_PARENTHESIS   reduce using rule 34 (parametrop -> empty .)


state 90

    (8) varp -> tipo tipo_seen COLON ID variable_seen varppp varpp delete_type . SEMICOLON varpppp

    SEMICOLON       shift and go to state 122


state 91

    (13) varpp -> COMMA ID . variable_seen varppp varpp
    (11) variable_seen -> .

    L_SQUARE_BRACKET reduce using rule 11 (variable_seen -> .)
    COMMA           reduce using rule 11 (variable_seen -> .)
    SEMICOLON       reduce using rule 11 (variable_seen -> .)

    variable_seen                  shift and go to state 123

state 92

    (20) dimDeclare -> L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET .

    L_SQUARE_BRACKET reduce using rule 20 (dimDeclare -> L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET .)
    COMMA           reduce using rule 20 (dimDeclare -> L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET .)
    SEMICOLON       reduce using rule 20 (dimDeclare -> L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET .)


state 93

    (9) varp -> tipo tipo_seen COLON ID error varppp varpp delete_type . SEMICOLON varpppp

    SEMICOLON       shift and go to state 124


state 94

    (48) asignacion -> ID operand_seen dimId . ASSIGN operation_seen expresion apply_operation_assign SEMICOLON

    ASSIGN          shift and go to state 125


state 95

    (51) dimId -> dim .
    (52) dimId -> dim . dim
    (54) dim -> . L_SQUARE_BRACKET expresion R_SQUARE_BRACKET

    ASSIGN          reduce using rule 51 (dimId -> dim .)
    COMMA           reduce using rule 51 (dimId -> dim .)
    R_PARENTHESIS   reduce using rule 51 (dimId -> dim .)
    DETERMINANT     reduce using rule 51 (dimId -> dim .)
    TRANSPOSED      reduce using rule 51 (dimId -> dim .)
    INVERSE         reduce using rule 51 (dimId -> dim .)
    MULTIPLY        reduce using rule 51 (dimId -> dim .)
    DIVIDE          reduce using rule 51 (dimId -> dim .)
    SUM             reduce using rule 51 (dimId -> dim .)
    SUBTRACT        reduce using rule 51 (dimId -> dim .)
    EQUALS          reduce using rule 51 (dimId -> dim .)
    NOT_EQUAL       reduce using rule 51 (dimId -> dim .)
    LESS_THAN       reduce using rule 51 (dimId -> dim .)
    LESS_THAN_EQUAL reduce using rule 51 (dimId -> dim .)
    GREATER_THAN    reduce using rule 51 (dimId -> dim .)
    GREATER_THAN_EQUAL reduce using rule 51 (dimId -> dim .)
    AND             reduce using rule 51 (dimId -> dim .)
    OR              reduce using rule 51 (dimId -> dim .)
    R_SQUARE_BRACKET reduce using rule 51 (dimId -> dim .)
    SEMICOLON       reduce using rule 51 (dimId -> dim .)
    HASTA           reduce using rule 51 (dimId -> dim .)
    HACER           reduce using rule 51 (dimId -> dim .)
    L_SQUARE_BRACKET shift and go to state 97

    dim                            shift and go to state 126

state 96

    (53) dimId -> empty .

    ASSIGN          reduce using rule 53 (dimId -> empty .)
    COMMA           reduce using rule 53 (dimId -> empty .)
    R_PARENTHESIS   reduce using rule 53 (dimId -> empty .)
    DETERMINANT     reduce using rule 53 (dimId -> empty .)
    TRANSPOSED      reduce using rule 53 (dimId -> empty .)
    INVERSE         reduce using rule 53 (dimId -> empty .)
    MULTIPLY        reduce using rule 53 (dimId -> empty .)
    DIVIDE          reduce using rule 53 (dimId -> empty .)
    SUM             reduce using rule 53 (dimId -> empty .)
    SUBTRACT        reduce using rule 53 (dimId -> empty .)
    EQUALS          reduce using rule 53 (dimId -> empty .)
    NOT_EQUAL       reduce using rule 53 (dimId -> empty .)
    LESS_THAN       reduce using rule 53 (dimId -> empty .)
    LESS_THAN_EQUAL reduce using rule 53 (dimId -> empty .)
    GREATER_THAN    reduce using rule 53 (dimId -> empty .)
    GREATER_THAN_EQUAL reduce using rule 53 (dimId -> empty .)
    AND             reduce using rule 53 (dimId -> empty .)
    OR              reduce using rule 53 (dimId -> empty .)
    R_SQUARE_BRACKET reduce using rule 53 (dimId -> empty .)
    SEMICOLON       reduce using rule 53 (dimId -> empty .)
    HASTA           reduce using rule 53 (dimId -> empty .)
    HACER           reduce using rule 53 (dimId -> empty .)


state 97

    (54) dim -> L_SQUARE_BRACKET . expresion R_SQUARE_BRACKET
    (55) expresion -> . relacional apply_operation_expresion expresionp
    (56) expresion -> . NOT relacional expresionp
    (61) relacional -> . aritmetica apply_operation_relational relacionalp
    (70) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (75) factor -> . matriz apply_operation_factor factorp
    (81) matriz -> . cte matrizp
    (86) cte -> . CTE_INT
    (87) cte -> . CTE_FLOAT
    (88) cte -> . CTE_CHAR
    (89) cte -> . llamadaFuncion
    (90) cte -> . ID operand_seen dimId
    (91) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (92) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    NOT             shift and go to state 102
    CTE_INT         shift and go to state 107
    CTE_FLOAT       shift and go to state 108
    CTE_CHAR        shift and go to state 109
    ID              shift and go to state 111
    L_PARENTHESIS   shift and go to state 99

    expresion                      shift and go to state 127
    relacional                     shift and go to state 101
    aritmetica                     shift and go to state 103
    factor                         shift and go to state 104
    matriz                         shift and go to state 105
    cte                            shift and go to state 106
    llamadaFuncion                 shift and go to state 110

state 98

    (98) funcionVacia -> ID set_func_scope L_PARENTHESIS . llamadaFuncionp R_PARENTHESIS SEMICOLON
    (93) llamadaFuncionp -> . expresion verify_parameter llamadaFuncionpp
    (94) llamadaFuncionp -> . empty
    (55) expresion -> . relacional apply_operation_expresion expresionp
    (56) expresion -> . NOT relacional expresionp
    (123) empty -> .
    (61) relacional -> . aritmetica apply_operation_relational relacionalp
    (70) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (75) factor -> . matriz apply_operation_factor factorp
    (81) matriz -> . cte matrizp
    (86) cte -> . CTE_INT
    (87) cte -> . CTE_FLOAT
    (88) cte -> . CTE_CHAR
    (89) cte -> . llamadaFuncion
    (90) cte -> . ID operand_seen dimId
    (91) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (92) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    NOT             shift and go to state 102
    R_PARENTHESIS   reduce using rule 123 (empty -> .)
    CTE_INT         shift and go to state 107
    CTE_FLOAT       shift and go to state 108
    CTE_CHAR        shift and go to state 109
    ID              shift and go to state 111
    L_PARENTHESIS   shift and go to state 99

    llamadaFuncionp                shift and go to state 128
    expresion                      shift and go to state 129
    empty                          shift and go to state 130
    relacional                     shift and go to state 101
    aritmetica                     shift and go to state 103
    factor                         shift and go to state 104
    matriz                         shift and go to state 105
    cte                            shift and go to state 106
    llamadaFuncion                 shift and go to state 110

state 99

    (91) cte -> L_PARENTHESIS . operation_seen expresion R_PARENTHESIS operation_seen
    (80) operation_seen -> .

    NOT             reduce using rule 80 (operation_seen -> .)
    CTE_INT         reduce using rule 80 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 80 (operation_seen -> .)
    CTE_CHAR        reduce using rule 80 (operation_seen -> .)
    ID              reduce using rule 80 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 80 (operation_seen -> .)

    operation_seen                 shift and go to state 131

state 100

    (100) regresa -> REGRESA L_PARENTHESIS expresion . R_PARENTHESIS SEMICOLON

    R_PARENTHESIS   shift and go to state 132


state 101

    (55) expresion -> relacional . apply_operation_expresion expresionp
    (60) apply_operation_expresion -> .

    AND             reduce using rule 60 (apply_operation_expresion -> .)
    OR              reduce using rule 60 (apply_operation_expresion -> .)
    R_PARENTHESIS   reduce using rule 60 (apply_operation_expresion -> .)
    COMMA           reduce using rule 60 (apply_operation_expresion -> .)
    R_SQUARE_BRACKET reduce using rule 60 (apply_operation_expresion -> .)
    SEMICOLON       reduce using rule 60 (apply_operation_expresion -> .)
    HASTA           reduce using rule 60 (apply_operation_expresion -> .)
    HACER           reduce using rule 60 (apply_operation_expresion -> .)

    apply_operation_expresion      shift and go to state 133

state 102

    (56) expresion -> NOT . relacional expresionp
    (61) relacional -> . aritmetica apply_operation_relational relacionalp
    (70) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (75) factor -> . matriz apply_operation_factor factorp
    (81) matriz -> . cte matrizp
    (86) cte -> . CTE_INT
    (87) cte -> . CTE_FLOAT
    (88) cte -> . CTE_CHAR
    (89) cte -> . llamadaFuncion
    (90) cte -> . ID operand_seen dimId
    (91) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (92) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    CTE_INT         shift and go to state 107
    CTE_FLOAT       shift and go to state 108
    CTE_CHAR        shift and go to state 109
    ID              shift and go to state 111
    L_PARENTHESIS   shift and go to state 99

    relacional                     shift and go to state 134
    aritmetica                     shift and go to state 103
    factor                         shift and go to state 104
    matriz                         shift and go to state 105
    cte                            shift and go to state 106
    llamadaFuncion                 shift and go to state 110

state 103

    (61) relacional -> aritmetica . apply_operation_relational relacionalp
    (69) apply_operation_relational -> .

    EQUALS          reduce using rule 69 (apply_operation_relational -> .)
    NOT_EQUAL       reduce using rule 69 (apply_operation_relational -> .)
    LESS_THAN       reduce using rule 69 (apply_operation_relational -> .)
    LESS_THAN_EQUAL reduce using rule 69 (apply_operation_relational -> .)
    GREATER_THAN    reduce using rule 69 (apply_operation_relational -> .)
    GREATER_THAN_EQUAL reduce using rule 69 (apply_operation_relational -> .)
    AND             reduce using rule 69 (apply_operation_relational -> .)
    OR              reduce using rule 69 (apply_operation_relational -> .)
    R_PARENTHESIS   reduce using rule 69 (apply_operation_relational -> .)
    COMMA           reduce using rule 69 (apply_operation_relational -> .)
    R_SQUARE_BRACKET reduce using rule 69 (apply_operation_relational -> .)
    SEMICOLON       reduce using rule 69 (apply_operation_relational -> .)
    HASTA           reduce using rule 69 (apply_operation_relational -> .)
    HACER           reduce using rule 69 (apply_operation_relational -> .)

    apply_operation_relational     shift and go to state 135

state 104

    (70) aritmetica -> factor . apply_operation_aritmetica aritmeticap
    (74) apply_operation_aritmetica -> .

    SUM             reduce using rule 74 (apply_operation_aritmetica -> .)
    SUBTRACT        reduce using rule 74 (apply_operation_aritmetica -> .)
    EQUALS          reduce using rule 74 (apply_operation_aritmetica -> .)
    NOT_EQUAL       reduce using rule 74 (apply_operation_aritmetica -> .)
    LESS_THAN       reduce using rule 74 (apply_operation_aritmetica -> .)
    LESS_THAN_EQUAL reduce using rule 74 (apply_operation_aritmetica -> .)
    GREATER_THAN    reduce using rule 74 (apply_operation_aritmetica -> .)
    GREATER_THAN_EQUAL reduce using rule 74 (apply_operation_aritmetica -> .)
    AND             reduce using rule 74 (apply_operation_aritmetica -> .)
    OR              reduce using rule 74 (apply_operation_aritmetica -> .)
    R_PARENTHESIS   reduce using rule 74 (apply_operation_aritmetica -> .)
    COMMA           reduce using rule 74 (apply_operation_aritmetica -> .)
    R_SQUARE_BRACKET reduce using rule 74 (apply_operation_aritmetica -> .)
    SEMICOLON       reduce using rule 74 (apply_operation_aritmetica -> .)
    HASTA           reduce using rule 74 (apply_operation_aritmetica -> .)
    HACER           reduce using rule 74 (apply_operation_aritmetica -> .)

    apply_operation_aritmetica     shift and go to state 136

state 105

    (75) factor -> matriz . apply_operation_factor factorp
    (79) apply_operation_factor -> .

    MULTIPLY        reduce using rule 79 (apply_operation_factor -> .)
    DIVIDE          reduce using rule 79 (apply_operation_factor -> .)
    SUM             reduce using rule 79 (apply_operation_factor -> .)
    SUBTRACT        reduce using rule 79 (apply_operation_factor -> .)
    EQUALS          reduce using rule 79 (apply_operation_factor -> .)
    NOT_EQUAL       reduce using rule 79 (apply_operation_factor -> .)
    LESS_THAN       reduce using rule 79 (apply_operation_factor -> .)
    LESS_THAN_EQUAL reduce using rule 79 (apply_operation_factor -> .)
    GREATER_THAN    reduce using rule 79 (apply_operation_factor -> .)
    GREATER_THAN_EQUAL reduce using rule 79 (apply_operation_factor -> .)
    AND             reduce using rule 79 (apply_operation_factor -> .)
    OR              reduce using rule 79 (apply_operation_factor -> .)
    R_PARENTHESIS   reduce using rule 79 (apply_operation_factor -> .)
    COMMA           reduce using rule 79 (apply_operation_factor -> .)
    R_SQUARE_BRACKET reduce using rule 79 (apply_operation_factor -> .)
    SEMICOLON       reduce using rule 79 (apply_operation_factor -> .)
    HASTA           reduce using rule 79 (apply_operation_factor -> .)
    HACER           reduce using rule 79 (apply_operation_factor -> .)

    apply_operation_factor         shift and go to state 137

state 106

    (81) matriz -> cte . matrizp
    (82) matrizp -> . DETERMINANT
    (83) matrizp -> . TRANSPOSED
    (84) matrizp -> . INVERSE
    (85) matrizp -> . empty
    (123) empty -> .

    DETERMINANT     shift and go to state 139
    TRANSPOSED      shift and go to state 140
    INVERSE         shift and go to state 141
    MULTIPLY        reduce using rule 123 (empty -> .)
    DIVIDE          reduce using rule 123 (empty -> .)
    SUM             reduce using rule 123 (empty -> .)
    SUBTRACT        reduce using rule 123 (empty -> .)
    EQUALS          reduce using rule 123 (empty -> .)
    NOT_EQUAL       reduce using rule 123 (empty -> .)
    LESS_THAN       reduce using rule 123 (empty -> .)
    LESS_THAN_EQUAL reduce using rule 123 (empty -> .)
    GREATER_THAN    reduce using rule 123 (empty -> .)
    GREATER_THAN_EQUAL reduce using rule 123 (empty -> .)
    AND             reduce using rule 123 (empty -> .)
    OR              reduce using rule 123 (empty -> .)
    R_PARENTHESIS   reduce using rule 123 (empty -> .)
    COMMA           reduce using rule 123 (empty -> .)
    R_SQUARE_BRACKET reduce using rule 123 (empty -> .)
    SEMICOLON       reduce using rule 123 (empty -> .)
    HASTA           reduce using rule 123 (empty -> .)
    HACER           reduce using rule 123 (empty -> .)

    matrizp                        shift and go to state 138
    empty                          shift and go to state 142

state 107

    (86) cte -> CTE_INT .

    DETERMINANT     reduce using rule 86 (cte -> CTE_INT .)
    TRANSPOSED      reduce using rule 86 (cte -> CTE_INT .)
    INVERSE         reduce using rule 86 (cte -> CTE_INT .)
    MULTIPLY        reduce using rule 86 (cte -> CTE_INT .)
    DIVIDE          reduce using rule 86 (cte -> CTE_INT .)
    SUM             reduce using rule 86 (cte -> CTE_INT .)
    SUBTRACT        reduce using rule 86 (cte -> CTE_INT .)
    EQUALS          reduce using rule 86 (cte -> CTE_INT .)
    NOT_EQUAL       reduce using rule 86 (cte -> CTE_INT .)
    LESS_THAN       reduce using rule 86 (cte -> CTE_INT .)
    LESS_THAN_EQUAL reduce using rule 86 (cte -> CTE_INT .)
    GREATER_THAN    reduce using rule 86 (cte -> CTE_INT .)
    GREATER_THAN_EQUAL reduce using rule 86 (cte -> CTE_INT .)
    AND             reduce using rule 86 (cte -> CTE_INT .)
    OR              reduce using rule 86 (cte -> CTE_INT .)
    R_PARENTHESIS   reduce using rule 86 (cte -> CTE_INT .)
    COMMA           reduce using rule 86 (cte -> CTE_INT .)
    R_SQUARE_BRACKET reduce using rule 86 (cte -> CTE_INT .)
    SEMICOLON       reduce using rule 86 (cte -> CTE_INT .)
    HASTA           reduce using rule 86 (cte -> CTE_INT .)
    HACER           reduce using rule 86 (cte -> CTE_INT .)


state 108

    (87) cte -> CTE_FLOAT .

    DETERMINANT     reduce using rule 87 (cte -> CTE_FLOAT .)
    TRANSPOSED      reduce using rule 87 (cte -> CTE_FLOAT .)
    INVERSE         reduce using rule 87 (cte -> CTE_FLOAT .)
    MULTIPLY        reduce using rule 87 (cte -> CTE_FLOAT .)
    DIVIDE          reduce using rule 87 (cte -> CTE_FLOAT .)
    SUM             reduce using rule 87 (cte -> CTE_FLOAT .)
    SUBTRACT        reduce using rule 87 (cte -> CTE_FLOAT .)
    EQUALS          reduce using rule 87 (cte -> CTE_FLOAT .)
    NOT_EQUAL       reduce using rule 87 (cte -> CTE_FLOAT .)
    LESS_THAN       reduce using rule 87 (cte -> CTE_FLOAT .)
    LESS_THAN_EQUAL reduce using rule 87 (cte -> CTE_FLOAT .)
    GREATER_THAN    reduce using rule 87 (cte -> CTE_FLOAT .)
    GREATER_THAN_EQUAL reduce using rule 87 (cte -> CTE_FLOAT .)
    AND             reduce using rule 87 (cte -> CTE_FLOAT .)
    OR              reduce using rule 87 (cte -> CTE_FLOAT .)
    R_PARENTHESIS   reduce using rule 87 (cte -> CTE_FLOAT .)
    COMMA           reduce using rule 87 (cte -> CTE_FLOAT .)
    R_SQUARE_BRACKET reduce using rule 87 (cte -> CTE_FLOAT .)
    SEMICOLON       reduce using rule 87 (cte -> CTE_FLOAT .)
    HASTA           reduce using rule 87 (cte -> CTE_FLOAT .)
    HACER           reduce using rule 87 (cte -> CTE_FLOAT .)


state 109

    (88) cte -> CTE_CHAR .

    DETERMINANT     reduce using rule 88 (cte -> CTE_CHAR .)
    TRANSPOSED      reduce using rule 88 (cte -> CTE_CHAR .)
    INVERSE         reduce using rule 88 (cte -> CTE_CHAR .)
    MULTIPLY        reduce using rule 88 (cte -> CTE_CHAR .)
    DIVIDE          reduce using rule 88 (cte -> CTE_CHAR .)
    SUM             reduce using rule 88 (cte -> CTE_CHAR .)
    SUBTRACT        reduce using rule 88 (cte -> CTE_CHAR .)
    EQUALS          reduce using rule 88 (cte -> CTE_CHAR .)
    NOT_EQUAL       reduce using rule 88 (cte -> CTE_CHAR .)
    LESS_THAN       reduce using rule 88 (cte -> CTE_CHAR .)
    LESS_THAN_EQUAL reduce using rule 88 (cte -> CTE_CHAR .)
    GREATER_THAN    reduce using rule 88 (cte -> CTE_CHAR .)
    GREATER_THAN_EQUAL reduce using rule 88 (cte -> CTE_CHAR .)
    AND             reduce using rule 88 (cte -> CTE_CHAR .)
    OR              reduce using rule 88 (cte -> CTE_CHAR .)
    R_PARENTHESIS   reduce using rule 88 (cte -> CTE_CHAR .)
    COMMA           reduce using rule 88 (cte -> CTE_CHAR .)
    R_SQUARE_BRACKET reduce using rule 88 (cte -> CTE_CHAR .)
    SEMICOLON       reduce using rule 88 (cte -> CTE_CHAR .)
    HASTA           reduce using rule 88 (cte -> CTE_CHAR .)
    HACER           reduce using rule 88 (cte -> CTE_CHAR .)


state 110

    (89) cte -> llamadaFuncion .

    DETERMINANT     reduce using rule 89 (cte -> llamadaFuncion .)
    TRANSPOSED      reduce using rule 89 (cte -> llamadaFuncion .)
    INVERSE         reduce using rule 89 (cte -> llamadaFuncion .)
    MULTIPLY        reduce using rule 89 (cte -> llamadaFuncion .)
    DIVIDE          reduce using rule 89 (cte -> llamadaFuncion .)
    SUM             reduce using rule 89 (cte -> llamadaFuncion .)
    SUBTRACT        reduce using rule 89 (cte -> llamadaFuncion .)
    EQUALS          reduce using rule 89 (cte -> llamadaFuncion .)
    NOT_EQUAL       reduce using rule 89 (cte -> llamadaFuncion .)
    LESS_THAN       reduce using rule 89 (cte -> llamadaFuncion .)
    LESS_THAN_EQUAL reduce using rule 89 (cte -> llamadaFuncion .)
    GREATER_THAN    reduce using rule 89 (cte -> llamadaFuncion .)
    GREATER_THAN_EQUAL reduce using rule 89 (cte -> llamadaFuncion .)
    AND             reduce using rule 89 (cte -> llamadaFuncion .)
    OR              reduce using rule 89 (cte -> llamadaFuncion .)
    R_PARENTHESIS   reduce using rule 89 (cte -> llamadaFuncion .)
    COMMA           reduce using rule 89 (cte -> llamadaFuncion .)
    R_SQUARE_BRACKET reduce using rule 89 (cte -> llamadaFuncion .)
    SEMICOLON       reduce using rule 89 (cte -> llamadaFuncion .)
    HASTA           reduce using rule 89 (cte -> llamadaFuncion .)
    HACER           reduce using rule 89 (cte -> llamadaFuncion .)


state 111

    (90) cte -> ID . operand_seen dimId
    (92) llamadaFuncion -> ID . set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen
    (49) operand_seen -> .
    (99) set_func_scope -> .

    L_SQUARE_BRACKET reduce using rule 49 (operand_seen -> .)
    DETERMINANT     reduce using rule 49 (operand_seen -> .)
    TRANSPOSED      reduce using rule 49 (operand_seen -> .)
    INVERSE         reduce using rule 49 (operand_seen -> .)
    MULTIPLY        reduce using rule 49 (operand_seen -> .)
    DIVIDE          reduce using rule 49 (operand_seen -> .)
    SUM             reduce using rule 49 (operand_seen -> .)
    SUBTRACT        reduce using rule 49 (operand_seen -> .)
    EQUALS          reduce using rule 49 (operand_seen -> .)
    NOT_EQUAL       reduce using rule 49 (operand_seen -> .)
    LESS_THAN       reduce using rule 49 (operand_seen -> .)
    LESS_THAN_EQUAL reduce using rule 49 (operand_seen -> .)
    GREATER_THAN    reduce using rule 49 (operand_seen -> .)
    GREATER_THAN_EQUAL reduce using rule 49 (operand_seen -> .)
    AND             reduce using rule 49 (operand_seen -> .)
    OR              reduce using rule 49 (operand_seen -> .)
    R_PARENTHESIS   reduce using rule 49 (operand_seen -> .)
    COMMA           reduce using rule 49 (operand_seen -> .)
    R_SQUARE_BRACKET reduce using rule 49 (operand_seen -> .)
    SEMICOLON       reduce using rule 49 (operand_seen -> .)
    HASTA           reduce using rule 49 (operand_seen -> .)
    HACER           reduce using rule 49 (operand_seen -> .)
    L_PARENTHESIS   reduce using rule 99 (set_func_scope -> .)

    operand_seen                   shift and go to state 143
    set_func_scope                 shift and go to state 144

state 112

    (101) lectura -> LECTURA L_PARENTHESIS lecturap . R_PARENTHESIS SEMICOLON

    R_PARENTHESIS   shift and go to state 145


state 113

    (102) lecturap -> ID . dimId lecturapp
    (51) dimId -> . dim
    (52) dimId -> . dim dim
    (53) dimId -> . empty
    (54) dim -> . L_SQUARE_BRACKET expresion R_SQUARE_BRACKET
    (123) empty -> .

    L_SQUARE_BRACKET shift and go to state 97
    COMMA           reduce using rule 123 (empty -> .)
    R_PARENTHESIS   reduce using rule 123 (empty -> .)

    dimId                          shift and go to state 146
    dim                            shift and go to state 95
    empty                          shift and go to state 96

state 114

    (105) escritura -> ESCRIBE L_PARENTHESIS escriturap . R_PARENTHESIS SEMICOLON

    R_PARENTHESIS   shift and go to state 147


state 115

    (106) escriturap -> LETRERO . gen_print escriturapp
    (108) gen_print -> .

    COMMA           reduce using rule 108 (gen_print -> .)
    R_PARENTHESIS   reduce using rule 108 (gen_print -> .)

    gen_print                      shift and go to state 148

state 116

    (107) escriturap -> expresion . gen_print escriturapp
    (108) gen_print -> .

    COMMA           reduce using rule 108 (gen_print -> .)
    R_PARENTHESIS   reduce using rule 108 (gen_print -> .)

    gen_print                      shift and go to state 149

state 117

    (111) decision -> SI L_PARENTHESIS expresion . R_PARENTHESIS jump_false HAZ bloque decisionp

    R_PARENTHESIS   shift and go to state 150


state 118

    (117) cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS . expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle
    (55) expresion -> . relacional apply_operation_expresion expresionp
    (56) expresion -> . NOT relacional expresionp
    (61) relacional -> . aritmetica apply_operation_relational relacionalp
    (70) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (75) factor -> . matriz apply_operation_factor factorp
    (81) matriz -> . cte matrizp
    (86) cte -> . CTE_INT
    (87) cte -> . CTE_FLOAT
    (88) cte -> . CTE_CHAR
    (89) cte -> . llamadaFuncion
    (90) cte -> . ID operand_seen dimId
    (91) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (92) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    NOT             shift and go to state 102
    CTE_INT         shift and go to state 107
    CTE_FLOAT       shift and go to state 108
    CTE_CHAR        shift and go to state 109
    ID              shift and go to state 111
    L_PARENTHESIS   shift and go to state 99

    expresion                      shift and go to state 151
    relacional                     shift and go to state 101
    aritmetica                     shift and go to state 103
    factor                         shift and go to state 104
    matriz                         shift and go to state 105
    cte                            shift and go to state 106
    llamadaFuncion                 shift and go to state 110

state 119

    (120) cicloNoCondicional -> DESDE ID operand_seen . dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle
    (51) dimId -> . dim
    (52) dimId -> . dim dim
    (53) dimId -> . empty
    (54) dim -> . L_SQUARE_BRACKET expresion R_SQUARE_BRACKET
    (123) empty -> .

    L_SQUARE_BRACKET shift and go to state 97
    ASSIGN          reduce using rule 123 (empty -> .)

    dimId                          shift and go to state 152
    dim                            shift and go to state 95
    empty                          shift and go to state 96

state 120

    (27) funcionp -> tipoRetorno ID create_func_scope L_PARENTHESIS parametro R_PARENTHESIS var bloque end_func . funcion
    (24) funcion -> . FUNCION funcionp
    (25) funcion -> . FUNCION error
    (26) funcion -> . empty
    (123) empty -> .

    FUNCION         shift and go to state 11
    PRINCIPAL       reduce using rule 123 (empty -> .)

    funcion                        shift and go to state 153
    empty                          shift and go to state 12

state 121

    (33) parametrop -> COMMA tipo . ID save_param parametrop

    ID              shift and go to state 154


state 122

    (8) varp -> tipo tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON . varpppp
    (18) varpppp -> . varp
    (19) varpppp -> . empty
    (8) varp -> . tipo tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp
    (9) varp -> . tipo tipo_seen COLON ID error varppp varpp delete_type SEMICOLON varpppp
    (123) empty -> .
    (21) tipo -> . INT
    (22) tipo -> . FLOAT
    (23) tipo -> . CHAR

    FUNCION         reduce using rule 123 (empty -> .)
    PRINCIPAL       reduce using rule 123 (empty -> .)
    L_CURLY_BRACKET reduce using rule 123 (empty -> .)
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22

    tipo                           shift and go to state 24
    varpppp                        shift and go to state 155
    varp                           shift and go to state 156
    empty                          shift and go to state 157

state 123

    (13) varpp -> COMMA ID variable_seen . varppp varpp
    (15) varppp -> . dimDeclare
    (16) varppp -> . dimDeclare dimDeclare
    (17) varppp -> . empty
    (20) dimDeclare -> . L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET
    (123) empty -> .

    L_SQUARE_BRACKET shift and go to state 47
    COMMA           reduce using rule 123 (empty -> .)
    SEMICOLON       reduce using rule 123 (empty -> .)

    varppp                         shift and go to state 158
    dimDeclare                     shift and go to state 45
    empty                          shift and go to state 46

state 124

    (9) varp -> tipo tipo_seen COLON ID error varppp varpp delete_type SEMICOLON . varpppp
    (18) varpppp -> . varp
    (19) varpppp -> . empty
    (8) varp -> . tipo tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp
    (9) varp -> . tipo tipo_seen COLON ID error varppp varpp delete_type SEMICOLON varpppp
    (123) empty -> .
    (21) tipo -> . INT
    (22) tipo -> . FLOAT
    (23) tipo -> . CHAR

    FUNCION         reduce using rule 123 (empty -> .)
    PRINCIPAL       reduce using rule 123 (empty -> .)
    L_CURLY_BRACKET reduce using rule 123 (empty -> .)
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22

    tipo                           shift and go to state 24
    varpppp                        shift and go to state 159
    varp                           shift and go to state 156
    empty                          shift and go to state 157

state 125

    (48) asignacion -> ID operand_seen dimId ASSIGN . operation_seen expresion apply_operation_assign SEMICOLON
    (80) operation_seen -> .

    NOT             reduce using rule 80 (operation_seen -> .)
    CTE_INT         reduce using rule 80 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 80 (operation_seen -> .)
    CTE_CHAR        reduce using rule 80 (operation_seen -> .)
    ID              reduce using rule 80 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 80 (operation_seen -> .)

    operation_seen                 shift and go to state 160

state 126

    (52) dimId -> dim dim .

    ASSIGN          reduce using rule 52 (dimId -> dim dim .)
    COMMA           reduce using rule 52 (dimId -> dim dim .)
    R_PARENTHESIS   reduce using rule 52 (dimId -> dim dim .)
    DETERMINANT     reduce using rule 52 (dimId -> dim dim .)
    TRANSPOSED      reduce using rule 52 (dimId -> dim dim .)
    INVERSE         reduce using rule 52 (dimId -> dim dim .)
    MULTIPLY        reduce using rule 52 (dimId -> dim dim .)
    DIVIDE          reduce using rule 52 (dimId -> dim dim .)
    SUM             reduce using rule 52 (dimId -> dim dim .)
    SUBTRACT        reduce using rule 52 (dimId -> dim dim .)
    EQUALS          reduce using rule 52 (dimId -> dim dim .)
    NOT_EQUAL       reduce using rule 52 (dimId -> dim dim .)
    LESS_THAN       reduce using rule 52 (dimId -> dim dim .)
    LESS_THAN_EQUAL reduce using rule 52 (dimId -> dim dim .)
    GREATER_THAN    reduce using rule 52 (dimId -> dim dim .)
    GREATER_THAN_EQUAL reduce using rule 52 (dimId -> dim dim .)
    AND             reduce using rule 52 (dimId -> dim dim .)
    OR              reduce using rule 52 (dimId -> dim dim .)
    R_SQUARE_BRACKET reduce using rule 52 (dimId -> dim dim .)
    SEMICOLON       reduce using rule 52 (dimId -> dim dim .)
    HASTA           reduce using rule 52 (dimId -> dim dim .)
    HACER           reduce using rule 52 (dimId -> dim dim .)


state 127

    (54) dim -> L_SQUARE_BRACKET expresion . R_SQUARE_BRACKET

    R_SQUARE_BRACKET shift and go to state 161


state 128

    (98) funcionVacia -> ID set_func_scope L_PARENTHESIS llamadaFuncionp . R_PARENTHESIS SEMICOLON

    R_PARENTHESIS   shift and go to state 162


state 129

    (93) llamadaFuncionp -> expresion . verify_parameter llamadaFuncionpp
    (97) verify_parameter -> .

    COMMA           reduce using rule 97 (verify_parameter -> .)
    R_PARENTHESIS   reduce using rule 97 (verify_parameter -> .)

    verify_parameter               shift and go to state 163

state 130

    (94) llamadaFuncionp -> empty .

    R_PARENTHESIS   reduce using rule 94 (llamadaFuncionp -> empty .)


state 131

    (91) cte -> L_PARENTHESIS operation_seen . expresion R_PARENTHESIS operation_seen
    (55) expresion -> . relacional apply_operation_expresion expresionp
    (56) expresion -> . NOT relacional expresionp
    (61) relacional -> . aritmetica apply_operation_relational relacionalp
    (70) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (75) factor -> . matriz apply_operation_factor factorp
    (81) matriz -> . cte matrizp
    (86) cte -> . CTE_INT
    (87) cte -> . CTE_FLOAT
    (88) cte -> . CTE_CHAR
    (89) cte -> . llamadaFuncion
    (90) cte -> . ID operand_seen dimId
    (91) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (92) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    NOT             shift and go to state 102
    CTE_INT         shift and go to state 107
    CTE_FLOAT       shift and go to state 108
    CTE_CHAR        shift and go to state 109
    ID              shift and go to state 111
    L_PARENTHESIS   shift and go to state 99

    expresion                      shift and go to state 164
    relacional                     shift and go to state 101
    aritmetica                     shift and go to state 103
    factor                         shift and go to state 104
    matriz                         shift and go to state 105
    cte                            shift and go to state 106
    llamadaFuncion                 shift and go to state 110

state 132

    (100) regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 165


state 133

    (55) expresion -> relacional apply_operation_expresion . expresionp
    (57) expresionp -> . AND operation_seen expresion
    (58) expresionp -> . OR operation_seen expresion
    (59) expresionp -> . empty
    (123) empty -> .

    AND             shift and go to state 167
    OR              shift and go to state 168
    R_PARENTHESIS   reduce using rule 123 (empty -> .)
    COMMA           reduce using rule 123 (empty -> .)
    R_SQUARE_BRACKET reduce using rule 123 (empty -> .)
    SEMICOLON       reduce using rule 123 (empty -> .)
    HASTA           reduce using rule 123 (empty -> .)
    HACER           reduce using rule 123 (empty -> .)

    expresionp                     shift and go to state 166
    empty                          shift and go to state 169

state 134

    (56) expresion -> NOT relacional . expresionp
    (57) expresionp -> . AND operation_seen expresion
    (58) expresionp -> . OR operation_seen expresion
    (59) expresionp -> . empty
    (123) empty -> .

    AND             shift and go to state 167
    OR              shift and go to state 168
    R_PARENTHESIS   reduce using rule 123 (empty -> .)
    COMMA           reduce using rule 123 (empty -> .)
    R_SQUARE_BRACKET reduce using rule 123 (empty -> .)
    SEMICOLON       reduce using rule 123 (empty -> .)
    HASTA           reduce using rule 123 (empty -> .)
    HACER           reduce using rule 123 (empty -> .)

    expresionp                     shift and go to state 170
    empty                          shift and go to state 169

state 135

    (61) relacional -> aritmetica apply_operation_relational . relacionalp
    (62) relacionalp -> . EQUALS operation_seen relacional
    (63) relacionalp -> . NOT_EQUAL operation_seen relacional
    (64) relacionalp -> . LESS_THAN operation_seen relacional
    (65) relacionalp -> . LESS_THAN_EQUAL operation_seen relacional
    (66) relacionalp -> . GREATER_THAN operation_seen relacional
    (67) relacionalp -> . GREATER_THAN_EQUAL operation_seen relacional
    (68) relacionalp -> . empty
    (123) empty -> .

    EQUALS          shift and go to state 172
    NOT_EQUAL       shift and go to state 173
    LESS_THAN       shift and go to state 174
    LESS_THAN_EQUAL shift and go to state 175
    GREATER_THAN    shift and go to state 176
    GREATER_THAN_EQUAL shift and go to state 177
    AND             reduce using rule 123 (empty -> .)
    OR              reduce using rule 123 (empty -> .)
    R_PARENTHESIS   reduce using rule 123 (empty -> .)
    COMMA           reduce using rule 123 (empty -> .)
    R_SQUARE_BRACKET reduce using rule 123 (empty -> .)
    SEMICOLON       reduce using rule 123 (empty -> .)
    HASTA           reduce using rule 123 (empty -> .)
    HACER           reduce using rule 123 (empty -> .)

    relacionalp                    shift and go to state 171
    empty                          shift and go to state 178

state 136

    (70) aritmetica -> factor apply_operation_aritmetica . aritmeticap
    (71) aritmeticap -> . SUM operation_seen aritmetica
    (72) aritmeticap -> . SUBTRACT operation_seen aritmetica
    (73) aritmeticap -> . empty
    (123) empty -> .

    SUM             shift and go to state 180
    SUBTRACT        shift and go to state 181
    EQUALS          reduce using rule 123 (empty -> .)
    NOT_EQUAL       reduce using rule 123 (empty -> .)
    LESS_THAN       reduce using rule 123 (empty -> .)
    LESS_THAN_EQUAL reduce using rule 123 (empty -> .)
    GREATER_THAN    reduce using rule 123 (empty -> .)
    GREATER_THAN_EQUAL reduce using rule 123 (empty -> .)
    AND             reduce using rule 123 (empty -> .)
    OR              reduce using rule 123 (empty -> .)
    R_PARENTHESIS   reduce using rule 123 (empty -> .)
    COMMA           reduce using rule 123 (empty -> .)
    R_SQUARE_BRACKET reduce using rule 123 (empty -> .)
    SEMICOLON       reduce using rule 123 (empty -> .)
    HASTA           reduce using rule 123 (empty -> .)
    HACER           reduce using rule 123 (empty -> .)

    aritmeticap                    shift and go to state 179
    empty                          shift and go to state 182

state 137

    (75) factor -> matriz apply_operation_factor . factorp
    (76) factorp -> . MULTIPLY operation_seen factor
    (77) factorp -> . DIVIDE operation_seen factor
    (78) factorp -> . empty
    (123) empty -> .

    MULTIPLY        shift and go to state 184
    DIVIDE          shift and go to state 185
    SUM             reduce using rule 123 (empty -> .)
    SUBTRACT        reduce using rule 123 (empty -> .)
    EQUALS          reduce using rule 123 (empty -> .)
    NOT_EQUAL       reduce using rule 123 (empty -> .)
    LESS_THAN       reduce using rule 123 (empty -> .)
    LESS_THAN_EQUAL reduce using rule 123 (empty -> .)
    GREATER_THAN    reduce using rule 123 (empty -> .)
    GREATER_THAN_EQUAL reduce using rule 123 (empty -> .)
    AND             reduce using rule 123 (empty -> .)
    OR              reduce using rule 123 (empty -> .)
    R_PARENTHESIS   reduce using rule 123 (empty -> .)
    COMMA           reduce using rule 123 (empty -> .)
    R_SQUARE_BRACKET reduce using rule 123 (empty -> .)
    SEMICOLON       reduce using rule 123 (empty -> .)
    HASTA           reduce using rule 123 (empty -> .)
    HACER           reduce using rule 123 (empty -> .)

    factorp                        shift and go to state 183
    empty                          shift and go to state 186

state 138

    (81) matriz -> cte matrizp .

    MULTIPLY        reduce using rule 81 (matriz -> cte matrizp .)
    DIVIDE          reduce using rule 81 (matriz -> cte matrizp .)
    SUM             reduce using rule 81 (matriz -> cte matrizp .)
    SUBTRACT        reduce using rule 81 (matriz -> cte matrizp .)
    EQUALS          reduce using rule 81 (matriz -> cte matrizp .)
    NOT_EQUAL       reduce using rule 81 (matriz -> cte matrizp .)
    LESS_THAN       reduce using rule 81 (matriz -> cte matrizp .)
    LESS_THAN_EQUAL reduce using rule 81 (matriz -> cte matrizp .)
    GREATER_THAN    reduce using rule 81 (matriz -> cte matrizp .)
    GREATER_THAN_EQUAL reduce using rule 81 (matriz -> cte matrizp .)
    AND             reduce using rule 81 (matriz -> cte matrizp .)
    OR              reduce using rule 81 (matriz -> cte matrizp .)
    R_PARENTHESIS   reduce using rule 81 (matriz -> cte matrizp .)
    COMMA           reduce using rule 81 (matriz -> cte matrizp .)
    R_SQUARE_BRACKET reduce using rule 81 (matriz -> cte matrizp .)
    SEMICOLON       reduce using rule 81 (matriz -> cte matrizp .)
    HASTA           reduce using rule 81 (matriz -> cte matrizp .)
    HACER           reduce using rule 81 (matriz -> cte matrizp .)


state 139

    (82) matrizp -> DETERMINANT .

    MULTIPLY        reduce using rule 82 (matrizp -> DETERMINANT .)
    DIVIDE          reduce using rule 82 (matrizp -> DETERMINANT .)
    SUM             reduce using rule 82 (matrizp -> DETERMINANT .)
    SUBTRACT        reduce using rule 82 (matrizp -> DETERMINANT .)
    EQUALS          reduce using rule 82 (matrizp -> DETERMINANT .)
    NOT_EQUAL       reduce using rule 82 (matrizp -> DETERMINANT .)
    LESS_THAN       reduce using rule 82 (matrizp -> DETERMINANT .)
    LESS_THAN_EQUAL reduce using rule 82 (matrizp -> DETERMINANT .)
    GREATER_THAN    reduce using rule 82 (matrizp -> DETERMINANT .)
    GREATER_THAN_EQUAL reduce using rule 82 (matrizp -> DETERMINANT .)
    AND             reduce using rule 82 (matrizp -> DETERMINANT .)
    OR              reduce using rule 82 (matrizp -> DETERMINANT .)
    R_PARENTHESIS   reduce using rule 82 (matrizp -> DETERMINANT .)
    COMMA           reduce using rule 82 (matrizp -> DETERMINANT .)
    R_SQUARE_BRACKET reduce using rule 82 (matrizp -> DETERMINANT .)
    SEMICOLON       reduce using rule 82 (matrizp -> DETERMINANT .)
    HASTA           reduce using rule 82 (matrizp -> DETERMINANT .)
    HACER           reduce using rule 82 (matrizp -> DETERMINANT .)


state 140

    (83) matrizp -> TRANSPOSED .

    MULTIPLY        reduce using rule 83 (matrizp -> TRANSPOSED .)
    DIVIDE          reduce using rule 83 (matrizp -> TRANSPOSED .)
    SUM             reduce using rule 83 (matrizp -> TRANSPOSED .)
    SUBTRACT        reduce using rule 83 (matrizp -> TRANSPOSED .)
    EQUALS          reduce using rule 83 (matrizp -> TRANSPOSED .)
    NOT_EQUAL       reduce using rule 83 (matrizp -> TRANSPOSED .)
    LESS_THAN       reduce using rule 83 (matrizp -> TRANSPOSED .)
    LESS_THAN_EQUAL reduce using rule 83 (matrizp -> TRANSPOSED .)
    GREATER_THAN    reduce using rule 83 (matrizp -> TRANSPOSED .)
    GREATER_THAN_EQUAL reduce using rule 83 (matrizp -> TRANSPOSED .)
    AND             reduce using rule 83 (matrizp -> TRANSPOSED .)
    OR              reduce using rule 83 (matrizp -> TRANSPOSED .)
    R_PARENTHESIS   reduce using rule 83 (matrizp -> TRANSPOSED .)
    COMMA           reduce using rule 83 (matrizp -> TRANSPOSED .)
    R_SQUARE_BRACKET reduce using rule 83 (matrizp -> TRANSPOSED .)
    SEMICOLON       reduce using rule 83 (matrizp -> TRANSPOSED .)
    HASTA           reduce using rule 83 (matrizp -> TRANSPOSED .)
    HACER           reduce using rule 83 (matrizp -> TRANSPOSED .)


state 141

    (84) matrizp -> INVERSE .

    MULTIPLY        reduce using rule 84 (matrizp -> INVERSE .)
    DIVIDE          reduce using rule 84 (matrizp -> INVERSE .)
    SUM             reduce using rule 84 (matrizp -> INVERSE .)
    SUBTRACT        reduce using rule 84 (matrizp -> INVERSE .)
    EQUALS          reduce using rule 84 (matrizp -> INVERSE .)
    NOT_EQUAL       reduce using rule 84 (matrizp -> INVERSE .)
    LESS_THAN       reduce using rule 84 (matrizp -> INVERSE .)
    LESS_THAN_EQUAL reduce using rule 84 (matrizp -> INVERSE .)
    GREATER_THAN    reduce using rule 84 (matrizp -> INVERSE .)
    GREATER_THAN_EQUAL reduce using rule 84 (matrizp -> INVERSE .)
    AND             reduce using rule 84 (matrizp -> INVERSE .)
    OR              reduce using rule 84 (matrizp -> INVERSE .)
    R_PARENTHESIS   reduce using rule 84 (matrizp -> INVERSE .)
    COMMA           reduce using rule 84 (matrizp -> INVERSE .)
    R_SQUARE_BRACKET reduce using rule 84 (matrizp -> INVERSE .)
    SEMICOLON       reduce using rule 84 (matrizp -> INVERSE .)
    HASTA           reduce using rule 84 (matrizp -> INVERSE .)
    HACER           reduce using rule 84 (matrizp -> INVERSE .)


state 142

    (85) matrizp -> empty .

    MULTIPLY        reduce using rule 85 (matrizp -> empty .)
    DIVIDE          reduce using rule 85 (matrizp -> empty .)
    SUM             reduce using rule 85 (matrizp -> empty .)
    SUBTRACT        reduce using rule 85 (matrizp -> empty .)
    EQUALS          reduce using rule 85 (matrizp -> empty .)
    NOT_EQUAL       reduce using rule 85 (matrizp -> empty .)
    LESS_THAN       reduce using rule 85 (matrizp -> empty .)
    LESS_THAN_EQUAL reduce using rule 85 (matrizp -> empty .)
    GREATER_THAN    reduce using rule 85 (matrizp -> empty .)
    GREATER_THAN_EQUAL reduce using rule 85 (matrizp -> empty .)
    AND             reduce using rule 85 (matrizp -> empty .)
    OR              reduce using rule 85 (matrizp -> empty .)
    R_PARENTHESIS   reduce using rule 85 (matrizp -> empty .)
    COMMA           reduce using rule 85 (matrizp -> empty .)
    R_SQUARE_BRACKET reduce using rule 85 (matrizp -> empty .)
    SEMICOLON       reduce using rule 85 (matrizp -> empty .)
    HASTA           reduce using rule 85 (matrizp -> empty .)
    HACER           reduce using rule 85 (matrizp -> empty .)


state 143

    (90) cte -> ID operand_seen . dimId
    (51) dimId -> . dim
    (52) dimId -> . dim dim
    (53) dimId -> . empty
    (54) dim -> . L_SQUARE_BRACKET expresion R_SQUARE_BRACKET
    (123) empty -> .

    L_SQUARE_BRACKET shift and go to state 97
    DETERMINANT     reduce using rule 123 (empty -> .)
    TRANSPOSED      reduce using rule 123 (empty -> .)
    INVERSE         reduce using rule 123 (empty -> .)
    MULTIPLY        reduce using rule 123 (empty -> .)
    DIVIDE          reduce using rule 123 (empty -> .)
    SUM             reduce using rule 123 (empty -> .)
    SUBTRACT        reduce using rule 123 (empty -> .)
    EQUALS          reduce using rule 123 (empty -> .)
    NOT_EQUAL       reduce using rule 123 (empty -> .)
    LESS_THAN       reduce using rule 123 (empty -> .)
    LESS_THAN_EQUAL reduce using rule 123 (empty -> .)
    GREATER_THAN    reduce using rule 123 (empty -> .)
    GREATER_THAN_EQUAL reduce using rule 123 (empty -> .)
    AND             reduce using rule 123 (empty -> .)
    OR              reduce using rule 123 (empty -> .)
    R_PARENTHESIS   reduce using rule 123 (empty -> .)
    COMMA           reduce using rule 123 (empty -> .)
    R_SQUARE_BRACKET reduce using rule 123 (empty -> .)
    SEMICOLON       reduce using rule 123 (empty -> .)
    HASTA           reduce using rule 123 (empty -> .)
    HACER           reduce using rule 123 (empty -> .)

    dimId                          shift and go to state 187
    dim                            shift and go to state 95
    empty                          shift and go to state 96

state 144

    (92) llamadaFuncion -> ID set_func_scope . L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    L_PARENTHESIS   shift and go to state 188


state 145

    (101) lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 189


state 146

    (102) lecturap -> ID dimId . lecturapp
    (103) lecturapp -> . COMMA lecturap
    (104) lecturapp -> . empty
    (123) empty -> .

    COMMA           shift and go to state 191
    R_PARENTHESIS   reduce using rule 123 (empty -> .)

    lecturapp                      shift and go to state 190
    empty                          shift and go to state 192

state 147

    (105) escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 193


state 148

    (106) escriturap -> LETRERO gen_print . escriturapp
    (109) escriturapp -> . COMMA escriturap
    (110) escriturapp -> . empty
    (123) empty -> .

    COMMA           shift and go to state 195
    R_PARENTHESIS   reduce using rule 123 (empty -> .)

    escriturapp                    shift and go to state 194
    empty                          shift and go to state 196

state 149

    (107) escriturap -> expresion gen_print . escriturapp
    (109) escriturapp -> . COMMA escriturap
    (110) escriturapp -> . empty
    (123) empty -> .

    COMMA           shift and go to state 195
    R_PARENTHESIS   reduce using rule 123 (empty -> .)

    escriturapp                    shift and go to state 197
    empty                          shift and go to state 196

state 150

    (111) decision -> SI L_PARENTHESIS expresion R_PARENTHESIS . jump_false HAZ bloque decisionp
    (112) jump_false -> .

    HAZ             reduce using rule 112 (jump_false -> .)

    jump_false                     shift and go to state 198

state 151

    (117) cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion . R_PARENTHESIS jump_false HAZ bloque update_jump_cycle

    R_PARENTHESIS   shift and go to state 199


state 152

    (120) cicloNoCondicional -> DESDE ID operand_seen dimId . ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle

    ASSIGN          shift and go to state 200


state 153

    (27) funcionp -> tipoRetorno ID create_func_scope L_PARENTHESIS parametro R_PARENTHESIS var bloque end_func funcion .

    PRINCIPAL       reduce using rule 27 (funcionp -> tipoRetorno ID create_func_scope L_PARENTHESIS parametro R_PARENTHESIS var bloque end_func funcion .)


state 154

    (33) parametrop -> COMMA tipo ID . save_param parametrop
    (32) save_param -> .

    COMMA           reduce using rule 32 (save_param -> .)
    R_PARENTHESIS   reduce using rule 32 (save_param -> .)

    save_param                     shift and go to state 201

state 155

    (8) varp -> tipo tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp .

    FUNCION         reduce using rule 8 (varp -> tipo tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp .)
    PRINCIPAL       reduce using rule 8 (varp -> tipo tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp .)
    L_CURLY_BRACKET reduce using rule 8 (varp -> tipo tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp .)


state 156

    (18) varpppp -> varp .

    FUNCION         reduce using rule 18 (varpppp -> varp .)
    PRINCIPAL       reduce using rule 18 (varpppp -> varp .)
    L_CURLY_BRACKET reduce using rule 18 (varpppp -> varp .)


state 157

    (19) varpppp -> empty .

    FUNCION         reduce using rule 19 (varpppp -> empty .)
    PRINCIPAL       reduce using rule 19 (varpppp -> empty .)
    L_CURLY_BRACKET reduce using rule 19 (varpppp -> empty .)


state 158

    (13) varpp -> COMMA ID variable_seen varppp . varpp
    (13) varpp -> . COMMA ID variable_seen varppp varpp
    (14) varpp -> . empty
    (123) empty -> .

    COMMA           shift and go to state 71
    SEMICOLON       reduce using rule 123 (empty -> .)

    varpp                          shift and go to state 202
    empty                          shift and go to state 72

state 159

    (9) varp -> tipo tipo_seen COLON ID error varppp varpp delete_type SEMICOLON varpppp .

    FUNCION         reduce using rule 9 (varp -> tipo tipo_seen COLON ID error varppp varpp delete_type SEMICOLON varpppp .)
    PRINCIPAL       reduce using rule 9 (varp -> tipo tipo_seen COLON ID error varppp varpp delete_type SEMICOLON varpppp .)
    L_CURLY_BRACKET reduce using rule 9 (varp -> tipo tipo_seen COLON ID error varppp varpp delete_type SEMICOLON varpppp .)


state 160

    (48) asignacion -> ID operand_seen dimId ASSIGN operation_seen . expresion apply_operation_assign SEMICOLON
    (55) expresion -> . relacional apply_operation_expresion expresionp
    (56) expresion -> . NOT relacional expresionp
    (61) relacional -> . aritmetica apply_operation_relational relacionalp
    (70) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (75) factor -> . matriz apply_operation_factor factorp
    (81) matriz -> . cte matrizp
    (86) cte -> . CTE_INT
    (87) cte -> . CTE_FLOAT
    (88) cte -> . CTE_CHAR
    (89) cte -> . llamadaFuncion
    (90) cte -> . ID operand_seen dimId
    (91) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (92) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    NOT             shift and go to state 102
    CTE_INT         shift and go to state 107
    CTE_FLOAT       shift and go to state 108
    CTE_CHAR        shift and go to state 109
    ID              shift and go to state 111
    L_PARENTHESIS   shift and go to state 99

    expresion                      shift and go to state 203
    relacional                     shift and go to state 101
    aritmetica                     shift and go to state 103
    factor                         shift and go to state 104
    matriz                         shift and go to state 105
    cte                            shift and go to state 106
    llamadaFuncion                 shift and go to state 110

state 161

    (54) dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .

    L_SQUARE_BRACKET reduce using rule 54 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    ASSIGN          reduce using rule 54 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    COMMA           reduce using rule 54 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    R_PARENTHESIS   reduce using rule 54 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    DETERMINANT     reduce using rule 54 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    TRANSPOSED      reduce using rule 54 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    INVERSE         reduce using rule 54 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    MULTIPLY        reduce using rule 54 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    DIVIDE          reduce using rule 54 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    SUM             reduce using rule 54 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    SUBTRACT        reduce using rule 54 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    EQUALS          reduce using rule 54 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    NOT_EQUAL       reduce using rule 54 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    LESS_THAN       reduce using rule 54 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    LESS_THAN_EQUAL reduce using rule 54 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    GREATER_THAN    reduce using rule 54 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    GREATER_THAN_EQUAL reduce using rule 54 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    AND             reduce using rule 54 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    OR              reduce using rule 54 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    R_SQUARE_BRACKET reduce using rule 54 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    SEMICOLON       reduce using rule 54 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    HASTA           reduce using rule 54 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    HACER           reduce using rule 54 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)


state 162

    (98) funcionVacia -> ID set_func_scope L_PARENTHESIS llamadaFuncionp R_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 204


state 163

    (93) llamadaFuncionp -> expresion verify_parameter . llamadaFuncionpp
    (95) llamadaFuncionpp -> . COMMA llamadaFuncionp
    (96) llamadaFuncionpp -> . empty
    (123) empty -> .

    COMMA           shift and go to state 206
    R_PARENTHESIS   reduce using rule 123 (empty -> .)

    llamadaFuncionpp               shift and go to state 205
    empty                          shift and go to state 207

state 164

    (91) cte -> L_PARENTHESIS operation_seen expresion . R_PARENTHESIS operation_seen

    R_PARENTHESIS   shift and go to state 208


state 165

    (100) regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .

    ID              reduce using rule 100 (regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .)
    REGRESA         reduce using rule 100 (regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .)
    LECTURA         reduce using rule 100 (regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .)
    ESCRIBE         reduce using rule 100 (regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .)
    SI              reduce using rule 100 (regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .)
    MIENTRAS        reduce using rule 100 (regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .)
    DESDE           reduce using rule 100 (regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .)
    R_CURLY_BRACKET reduce using rule 100 (regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .)


state 166

    (55) expresion -> relacional apply_operation_expresion expresionp .

    R_PARENTHESIS   reduce using rule 55 (expresion -> relacional apply_operation_expresion expresionp .)
    COMMA           reduce using rule 55 (expresion -> relacional apply_operation_expresion expresionp .)
    R_SQUARE_BRACKET reduce using rule 55 (expresion -> relacional apply_operation_expresion expresionp .)
    SEMICOLON       reduce using rule 55 (expresion -> relacional apply_operation_expresion expresionp .)
    HASTA           reduce using rule 55 (expresion -> relacional apply_operation_expresion expresionp .)
    HACER           reduce using rule 55 (expresion -> relacional apply_operation_expresion expresionp .)


state 167

    (57) expresionp -> AND . operation_seen expresion
    (80) operation_seen -> .

    NOT             reduce using rule 80 (operation_seen -> .)
    CTE_INT         reduce using rule 80 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 80 (operation_seen -> .)
    CTE_CHAR        reduce using rule 80 (operation_seen -> .)
    ID              reduce using rule 80 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 80 (operation_seen -> .)

    operation_seen                 shift and go to state 209

state 168

    (58) expresionp -> OR . operation_seen expresion
    (80) operation_seen -> .

    NOT             reduce using rule 80 (operation_seen -> .)
    CTE_INT         reduce using rule 80 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 80 (operation_seen -> .)
    CTE_CHAR        reduce using rule 80 (operation_seen -> .)
    ID              reduce using rule 80 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 80 (operation_seen -> .)

    operation_seen                 shift and go to state 210

state 169

    (59) expresionp -> empty .

    R_PARENTHESIS   reduce using rule 59 (expresionp -> empty .)
    COMMA           reduce using rule 59 (expresionp -> empty .)
    R_SQUARE_BRACKET reduce using rule 59 (expresionp -> empty .)
    SEMICOLON       reduce using rule 59 (expresionp -> empty .)
    HASTA           reduce using rule 59 (expresionp -> empty .)
    HACER           reduce using rule 59 (expresionp -> empty .)


state 170

    (56) expresion -> NOT relacional expresionp .

    R_PARENTHESIS   reduce using rule 56 (expresion -> NOT relacional expresionp .)
    COMMA           reduce using rule 56 (expresion -> NOT relacional expresionp .)
    R_SQUARE_BRACKET reduce using rule 56 (expresion -> NOT relacional expresionp .)
    SEMICOLON       reduce using rule 56 (expresion -> NOT relacional expresionp .)
    HASTA           reduce using rule 56 (expresion -> NOT relacional expresionp .)
    HACER           reduce using rule 56 (expresion -> NOT relacional expresionp .)


state 171

    (61) relacional -> aritmetica apply_operation_relational relacionalp .

    AND             reduce using rule 61 (relacional -> aritmetica apply_operation_relational relacionalp .)
    OR              reduce using rule 61 (relacional -> aritmetica apply_operation_relational relacionalp .)
    R_PARENTHESIS   reduce using rule 61 (relacional -> aritmetica apply_operation_relational relacionalp .)
    COMMA           reduce using rule 61 (relacional -> aritmetica apply_operation_relational relacionalp .)
    R_SQUARE_BRACKET reduce using rule 61 (relacional -> aritmetica apply_operation_relational relacionalp .)
    SEMICOLON       reduce using rule 61 (relacional -> aritmetica apply_operation_relational relacionalp .)
    HASTA           reduce using rule 61 (relacional -> aritmetica apply_operation_relational relacionalp .)
    HACER           reduce using rule 61 (relacional -> aritmetica apply_operation_relational relacionalp .)


state 172

    (62) relacionalp -> EQUALS . operation_seen relacional
    (80) operation_seen -> .

    CTE_INT         reduce using rule 80 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 80 (operation_seen -> .)
    CTE_CHAR        reduce using rule 80 (operation_seen -> .)
    ID              reduce using rule 80 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 80 (operation_seen -> .)

    operation_seen                 shift and go to state 211

state 173

    (63) relacionalp -> NOT_EQUAL . operation_seen relacional
    (80) operation_seen -> .

    CTE_INT         reduce using rule 80 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 80 (operation_seen -> .)
    CTE_CHAR        reduce using rule 80 (operation_seen -> .)
    ID              reduce using rule 80 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 80 (operation_seen -> .)

    operation_seen                 shift and go to state 212

state 174

    (64) relacionalp -> LESS_THAN . operation_seen relacional
    (80) operation_seen -> .

    CTE_INT         reduce using rule 80 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 80 (operation_seen -> .)
    CTE_CHAR        reduce using rule 80 (operation_seen -> .)
    ID              reduce using rule 80 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 80 (operation_seen -> .)

    operation_seen                 shift and go to state 213

state 175

    (65) relacionalp -> LESS_THAN_EQUAL . operation_seen relacional
    (80) operation_seen -> .

    CTE_INT         reduce using rule 80 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 80 (operation_seen -> .)
    CTE_CHAR        reduce using rule 80 (operation_seen -> .)
    ID              reduce using rule 80 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 80 (operation_seen -> .)

    operation_seen                 shift and go to state 214

state 176

    (66) relacionalp -> GREATER_THAN . operation_seen relacional
    (80) operation_seen -> .

    CTE_INT         reduce using rule 80 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 80 (operation_seen -> .)
    CTE_CHAR        reduce using rule 80 (operation_seen -> .)
    ID              reduce using rule 80 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 80 (operation_seen -> .)

    operation_seen                 shift and go to state 215

state 177

    (67) relacionalp -> GREATER_THAN_EQUAL . operation_seen relacional
    (80) operation_seen -> .

    CTE_INT         reduce using rule 80 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 80 (operation_seen -> .)
    CTE_CHAR        reduce using rule 80 (operation_seen -> .)
    ID              reduce using rule 80 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 80 (operation_seen -> .)

    operation_seen                 shift and go to state 216

state 178

    (68) relacionalp -> empty .

    AND             reduce using rule 68 (relacionalp -> empty .)
    OR              reduce using rule 68 (relacionalp -> empty .)
    R_PARENTHESIS   reduce using rule 68 (relacionalp -> empty .)
    COMMA           reduce using rule 68 (relacionalp -> empty .)
    R_SQUARE_BRACKET reduce using rule 68 (relacionalp -> empty .)
    SEMICOLON       reduce using rule 68 (relacionalp -> empty .)
    HASTA           reduce using rule 68 (relacionalp -> empty .)
    HACER           reduce using rule 68 (relacionalp -> empty .)


state 179

    (70) aritmetica -> factor apply_operation_aritmetica aritmeticap .

    EQUALS          reduce using rule 70 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    NOT_EQUAL       reduce using rule 70 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    LESS_THAN       reduce using rule 70 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    LESS_THAN_EQUAL reduce using rule 70 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    GREATER_THAN    reduce using rule 70 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    GREATER_THAN_EQUAL reduce using rule 70 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    AND             reduce using rule 70 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    OR              reduce using rule 70 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    R_PARENTHESIS   reduce using rule 70 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    COMMA           reduce using rule 70 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    R_SQUARE_BRACKET reduce using rule 70 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    SEMICOLON       reduce using rule 70 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    HASTA           reduce using rule 70 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    HACER           reduce using rule 70 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)


state 180

    (71) aritmeticap -> SUM . operation_seen aritmetica
    (80) operation_seen -> .

    CTE_INT         reduce using rule 80 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 80 (operation_seen -> .)
    CTE_CHAR        reduce using rule 80 (operation_seen -> .)
    ID              reduce using rule 80 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 80 (operation_seen -> .)

    operation_seen                 shift and go to state 217

state 181

    (72) aritmeticap -> SUBTRACT . operation_seen aritmetica
    (80) operation_seen -> .

    CTE_INT         reduce using rule 80 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 80 (operation_seen -> .)
    CTE_CHAR        reduce using rule 80 (operation_seen -> .)
    ID              reduce using rule 80 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 80 (operation_seen -> .)

    operation_seen                 shift and go to state 218

state 182

    (73) aritmeticap -> empty .

    EQUALS          reduce using rule 73 (aritmeticap -> empty .)
    NOT_EQUAL       reduce using rule 73 (aritmeticap -> empty .)
    LESS_THAN       reduce using rule 73 (aritmeticap -> empty .)
    LESS_THAN_EQUAL reduce using rule 73 (aritmeticap -> empty .)
    GREATER_THAN    reduce using rule 73 (aritmeticap -> empty .)
    GREATER_THAN_EQUAL reduce using rule 73 (aritmeticap -> empty .)
    AND             reduce using rule 73 (aritmeticap -> empty .)
    OR              reduce using rule 73 (aritmeticap -> empty .)
    R_PARENTHESIS   reduce using rule 73 (aritmeticap -> empty .)
    COMMA           reduce using rule 73 (aritmeticap -> empty .)
    R_SQUARE_BRACKET reduce using rule 73 (aritmeticap -> empty .)
    SEMICOLON       reduce using rule 73 (aritmeticap -> empty .)
    HASTA           reduce using rule 73 (aritmeticap -> empty .)
    HACER           reduce using rule 73 (aritmeticap -> empty .)


state 183

    (75) factor -> matriz apply_operation_factor factorp .

    SUM             reduce using rule 75 (factor -> matriz apply_operation_factor factorp .)
    SUBTRACT        reduce using rule 75 (factor -> matriz apply_operation_factor factorp .)
    EQUALS          reduce using rule 75 (factor -> matriz apply_operation_factor factorp .)
    NOT_EQUAL       reduce using rule 75 (factor -> matriz apply_operation_factor factorp .)
    LESS_THAN       reduce using rule 75 (factor -> matriz apply_operation_factor factorp .)
    LESS_THAN_EQUAL reduce using rule 75 (factor -> matriz apply_operation_factor factorp .)
    GREATER_THAN    reduce using rule 75 (factor -> matriz apply_operation_factor factorp .)
    GREATER_THAN_EQUAL reduce using rule 75 (factor -> matriz apply_operation_factor factorp .)
    AND             reduce using rule 75 (factor -> matriz apply_operation_factor factorp .)
    OR              reduce using rule 75 (factor -> matriz apply_operation_factor factorp .)
    R_PARENTHESIS   reduce using rule 75 (factor -> matriz apply_operation_factor factorp .)
    COMMA           reduce using rule 75 (factor -> matriz apply_operation_factor factorp .)
    R_SQUARE_BRACKET reduce using rule 75 (factor -> matriz apply_operation_factor factorp .)
    SEMICOLON       reduce using rule 75 (factor -> matriz apply_operation_factor factorp .)
    HASTA           reduce using rule 75 (factor -> matriz apply_operation_factor factorp .)
    HACER           reduce using rule 75 (factor -> matriz apply_operation_factor factorp .)


state 184

    (76) factorp -> MULTIPLY . operation_seen factor
    (80) operation_seen -> .

    CTE_INT         reduce using rule 80 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 80 (operation_seen -> .)
    CTE_CHAR        reduce using rule 80 (operation_seen -> .)
    ID              reduce using rule 80 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 80 (operation_seen -> .)

    operation_seen                 shift and go to state 219

state 185

    (77) factorp -> DIVIDE . operation_seen factor
    (80) operation_seen -> .

    CTE_INT         reduce using rule 80 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 80 (operation_seen -> .)
    CTE_CHAR        reduce using rule 80 (operation_seen -> .)
    ID              reduce using rule 80 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 80 (operation_seen -> .)

    operation_seen                 shift and go to state 220

state 186

    (78) factorp -> empty .

    SUM             reduce using rule 78 (factorp -> empty .)
    SUBTRACT        reduce using rule 78 (factorp -> empty .)
    EQUALS          reduce using rule 78 (factorp -> empty .)
    NOT_EQUAL       reduce using rule 78 (factorp -> empty .)
    LESS_THAN       reduce using rule 78 (factorp -> empty .)
    LESS_THAN_EQUAL reduce using rule 78 (factorp -> empty .)
    GREATER_THAN    reduce using rule 78 (factorp -> empty .)
    GREATER_THAN_EQUAL reduce using rule 78 (factorp -> empty .)
    AND             reduce using rule 78 (factorp -> empty .)
    OR              reduce using rule 78 (factorp -> empty .)
    R_PARENTHESIS   reduce using rule 78 (factorp -> empty .)
    COMMA           reduce using rule 78 (factorp -> empty .)
    R_SQUARE_BRACKET reduce using rule 78 (factorp -> empty .)
    SEMICOLON       reduce using rule 78 (factorp -> empty .)
    HASTA           reduce using rule 78 (factorp -> empty .)
    HACER           reduce using rule 78 (factorp -> empty .)


state 187

    (90) cte -> ID operand_seen dimId .

    DETERMINANT     reduce using rule 90 (cte -> ID operand_seen dimId .)
    TRANSPOSED      reduce using rule 90 (cte -> ID operand_seen dimId .)
    INVERSE         reduce using rule 90 (cte -> ID operand_seen dimId .)
    MULTIPLY        reduce using rule 90 (cte -> ID operand_seen dimId .)
    DIVIDE          reduce using rule 90 (cte -> ID operand_seen dimId .)
    SUM             reduce using rule 90 (cte -> ID operand_seen dimId .)
    SUBTRACT        reduce using rule 90 (cte -> ID operand_seen dimId .)
    EQUALS          reduce using rule 90 (cte -> ID operand_seen dimId .)
    NOT_EQUAL       reduce using rule 90 (cte -> ID operand_seen dimId .)
    LESS_THAN       reduce using rule 90 (cte -> ID operand_seen dimId .)
    LESS_THAN_EQUAL reduce using rule 90 (cte -> ID operand_seen dimId .)
    GREATER_THAN    reduce using rule 90 (cte -> ID operand_seen dimId .)
    GREATER_THAN_EQUAL reduce using rule 90 (cte -> ID operand_seen dimId .)
    AND             reduce using rule 90 (cte -> ID operand_seen dimId .)
    OR              reduce using rule 90 (cte -> ID operand_seen dimId .)
    R_PARENTHESIS   reduce using rule 90 (cte -> ID operand_seen dimId .)
    COMMA           reduce using rule 90 (cte -> ID operand_seen dimId .)
    R_SQUARE_BRACKET reduce using rule 90 (cte -> ID operand_seen dimId .)
    SEMICOLON       reduce using rule 90 (cte -> ID operand_seen dimId .)
    HASTA           reduce using rule 90 (cte -> ID operand_seen dimId .)
    HACER           reduce using rule 90 (cte -> ID operand_seen dimId .)


state 188

    (92) llamadaFuncion -> ID set_func_scope L_PARENTHESIS . operation_seen llamadaFuncionp R_PARENTHESIS operation_seen
    (80) operation_seen -> .

    NOT             reduce using rule 80 (operation_seen -> .)
    CTE_INT         reduce using rule 80 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 80 (operation_seen -> .)
    CTE_CHAR        reduce using rule 80 (operation_seen -> .)
    ID              reduce using rule 80 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 80 (operation_seen -> .)
    R_PARENTHESIS   reduce using rule 80 (operation_seen -> .)

    operation_seen                 shift and go to state 221

state 189

    (101) lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .

    ID              reduce using rule 101 (lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .)
    REGRESA         reduce using rule 101 (lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .)
    LECTURA         reduce using rule 101 (lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .)
    ESCRIBE         reduce using rule 101 (lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .)
    SI              reduce using rule 101 (lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .)
    MIENTRAS        reduce using rule 101 (lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .)
    DESDE           reduce using rule 101 (lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .)
    R_CURLY_BRACKET reduce using rule 101 (lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .)


state 190

    (102) lecturap -> ID dimId lecturapp .

    R_PARENTHESIS   reduce using rule 102 (lecturap -> ID dimId lecturapp .)


state 191

    (103) lecturapp -> COMMA . lecturap
    (102) lecturap -> . ID dimId lecturapp

    ID              shift and go to state 113

    lecturap                       shift and go to state 222

state 192

    (104) lecturapp -> empty .

    R_PARENTHESIS   reduce using rule 104 (lecturapp -> empty .)


state 193

    (105) escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .

    ID              reduce using rule 105 (escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .)
    REGRESA         reduce using rule 105 (escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .)
    LECTURA         reduce using rule 105 (escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .)
    ESCRIBE         reduce using rule 105 (escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .)
    SI              reduce using rule 105 (escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .)
    MIENTRAS        reduce using rule 105 (escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .)
    DESDE           reduce using rule 105 (escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .)
    R_CURLY_BRACKET reduce using rule 105 (escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .)


state 194

    (106) escriturap -> LETRERO gen_print escriturapp .

    R_PARENTHESIS   reduce using rule 106 (escriturap -> LETRERO gen_print escriturapp .)


state 195

    (109) escriturapp -> COMMA . escriturap
    (106) escriturap -> . LETRERO gen_print escriturapp
    (107) escriturap -> . expresion gen_print escriturapp
    (55) expresion -> . relacional apply_operation_expresion expresionp
    (56) expresion -> . NOT relacional expresionp
    (61) relacional -> . aritmetica apply_operation_relational relacionalp
    (70) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (75) factor -> . matriz apply_operation_factor factorp
    (81) matriz -> . cte matrizp
    (86) cte -> . CTE_INT
    (87) cte -> . CTE_FLOAT
    (88) cte -> . CTE_CHAR
    (89) cte -> . llamadaFuncion
    (90) cte -> . ID operand_seen dimId
    (91) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (92) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    LETRERO         shift and go to state 115
    NOT             shift and go to state 102
    CTE_INT         shift and go to state 107
    CTE_FLOAT       shift and go to state 108
    CTE_CHAR        shift and go to state 109
    ID              shift and go to state 111
    L_PARENTHESIS   shift and go to state 99

    escriturap                     shift and go to state 223
    expresion                      shift and go to state 116
    relacional                     shift and go to state 101
    aritmetica                     shift and go to state 103
    factor                         shift and go to state 104
    matriz                         shift and go to state 105
    cte                            shift and go to state 106
    llamadaFuncion                 shift and go to state 110

state 196

    (110) escriturapp -> empty .

    R_PARENTHESIS   reduce using rule 110 (escriturapp -> empty .)


state 197

    (107) escriturap -> expresion gen_print escriturapp .

    R_PARENTHESIS   reduce using rule 107 (escriturap -> expresion gen_print escriturapp .)


state 198

    (111) decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false . HAZ bloque decisionp

    HAZ             shift and go to state 224


state 199

    (117) cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS . jump_false HAZ bloque update_jump_cycle
    (112) jump_false -> .

    HAZ             reduce using rule 112 (jump_false -> .)

    jump_false                     shift and go to state 225

state 200

    (120) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN . operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle
    (80) operation_seen -> .

    NOT             reduce using rule 80 (operation_seen -> .)
    CTE_INT         reduce using rule 80 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 80 (operation_seen -> .)
    CTE_CHAR        reduce using rule 80 (operation_seen -> .)
    ID              reduce using rule 80 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 80 (operation_seen -> .)

    operation_seen                 shift and go to state 226

state 201

    (33) parametrop -> COMMA tipo ID save_param . parametrop
    (33) parametrop -> . COMMA tipo ID save_param parametrop
    (34) parametrop -> . empty
    (123) empty -> .

    COMMA           shift and go to state 88
    R_PARENTHESIS   reduce using rule 123 (empty -> .)

    parametrop                     shift and go to state 227
    empty                          shift and go to state 89

state 202

    (13) varpp -> COMMA ID variable_seen varppp varpp .

    SEMICOLON       reduce using rule 13 (varpp -> COMMA ID variable_seen varppp varpp .)


state 203

    (48) asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion . apply_operation_assign SEMICOLON
    (50) apply_operation_assign -> .

    SEMICOLON       reduce using rule 50 (apply_operation_assign -> .)

    apply_operation_assign         shift and go to state 228

state 204

    (98) funcionVacia -> ID set_func_scope L_PARENTHESIS llamadaFuncionp R_PARENTHESIS SEMICOLON .

    ID              reduce using rule 98 (funcionVacia -> ID set_func_scope L_PARENTHESIS llamadaFuncionp R_PARENTHESIS SEMICOLON .)
    REGRESA         reduce using rule 98 (funcionVacia -> ID set_func_scope L_PARENTHESIS llamadaFuncionp R_PARENTHESIS SEMICOLON .)
    LECTURA         reduce using rule 98 (funcionVacia -> ID set_func_scope L_PARENTHESIS llamadaFuncionp R_PARENTHESIS SEMICOLON .)
    ESCRIBE         reduce using rule 98 (funcionVacia -> ID set_func_scope L_PARENTHESIS llamadaFuncionp R_PARENTHESIS SEMICOLON .)
    SI              reduce using rule 98 (funcionVacia -> ID set_func_scope L_PARENTHESIS llamadaFuncionp R_PARENTHESIS SEMICOLON .)
    MIENTRAS        reduce using rule 98 (funcionVacia -> ID set_func_scope L_PARENTHESIS llamadaFuncionp R_PARENTHESIS SEMICOLON .)
    DESDE           reduce using rule 98 (funcionVacia -> ID set_func_scope L_PARENTHESIS llamadaFuncionp R_PARENTHESIS SEMICOLON .)
    R_CURLY_BRACKET reduce using rule 98 (funcionVacia -> ID set_func_scope L_PARENTHESIS llamadaFuncionp R_PARENTHESIS SEMICOLON .)


state 205

    (93) llamadaFuncionp -> expresion verify_parameter llamadaFuncionpp .

    R_PARENTHESIS   reduce using rule 93 (llamadaFuncionp -> expresion verify_parameter llamadaFuncionpp .)


state 206

    (95) llamadaFuncionpp -> COMMA . llamadaFuncionp
    (93) llamadaFuncionp -> . expresion verify_parameter llamadaFuncionpp
    (94) llamadaFuncionp -> . empty
    (55) expresion -> . relacional apply_operation_expresion expresionp
    (56) expresion -> . NOT relacional expresionp
    (123) empty -> .
    (61) relacional -> . aritmetica apply_operation_relational relacionalp
    (70) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (75) factor -> . matriz apply_operation_factor factorp
    (81) matriz -> . cte matrizp
    (86) cte -> . CTE_INT
    (87) cte -> . CTE_FLOAT
    (88) cte -> . CTE_CHAR
    (89) cte -> . llamadaFuncion
    (90) cte -> . ID operand_seen dimId
    (91) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (92) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    NOT             shift and go to state 102
    R_PARENTHESIS   reduce using rule 123 (empty -> .)
    CTE_INT         shift and go to state 107
    CTE_FLOAT       shift and go to state 108
    CTE_CHAR        shift and go to state 109
    ID              shift and go to state 111
    L_PARENTHESIS   shift and go to state 99

    llamadaFuncionp                shift and go to state 229
    expresion                      shift and go to state 129
    empty                          shift and go to state 130
    relacional                     shift and go to state 101
    aritmetica                     shift and go to state 103
    factor                         shift and go to state 104
    matriz                         shift and go to state 105
    cte                            shift and go to state 106
    llamadaFuncion                 shift and go to state 110

state 207

    (96) llamadaFuncionpp -> empty .

    R_PARENTHESIS   reduce using rule 96 (llamadaFuncionpp -> empty .)


state 208

    (91) cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS . operation_seen
    (80) operation_seen -> .

    DETERMINANT     reduce using rule 80 (operation_seen -> .)
    TRANSPOSED      reduce using rule 80 (operation_seen -> .)
    INVERSE         reduce using rule 80 (operation_seen -> .)
    MULTIPLY        reduce using rule 80 (operation_seen -> .)
    DIVIDE          reduce using rule 80 (operation_seen -> .)
    SUM             reduce using rule 80 (operation_seen -> .)
    SUBTRACT        reduce using rule 80 (operation_seen -> .)
    EQUALS          reduce using rule 80 (operation_seen -> .)
    NOT_EQUAL       reduce using rule 80 (operation_seen -> .)
    LESS_THAN       reduce using rule 80 (operation_seen -> .)
    LESS_THAN_EQUAL reduce using rule 80 (operation_seen -> .)
    GREATER_THAN    reduce using rule 80 (operation_seen -> .)
    GREATER_THAN_EQUAL reduce using rule 80 (operation_seen -> .)
    AND             reduce using rule 80 (operation_seen -> .)
    OR              reduce using rule 80 (operation_seen -> .)
    R_PARENTHESIS   reduce using rule 80 (operation_seen -> .)
    COMMA           reduce using rule 80 (operation_seen -> .)
    R_SQUARE_BRACKET reduce using rule 80 (operation_seen -> .)
    SEMICOLON       reduce using rule 80 (operation_seen -> .)
    HASTA           reduce using rule 80 (operation_seen -> .)
    HACER           reduce using rule 80 (operation_seen -> .)

    operation_seen                 shift and go to state 230

state 209

    (57) expresionp -> AND operation_seen . expresion
    (55) expresion -> . relacional apply_operation_expresion expresionp
    (56) expresion -> . NOT relacional expresionp
    (61) relacional -> . aritmetica apply_operation_relational relacionalp
    (70) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (75) factor -> . matriz apply_operation_factor factorp
    (81) matriz -> . cte matrizp
    (86) cte -> . CTE_INT
    (87) cte -> . CTE_FLOAT
    (88) cte -> . CTE_CHAR
    (89) cte -> . llamadaFuncion
    (90) cte -> . ID operand_seen dimId
    (91) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (92) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    NOT             shift and go to state 102
    CTE_INT         shift and go to state 107
    CTE_FLOAT       shift and go to state 108
    CTE_CHAR        shift and go to state 109
    ID              shift and go to state 111
    L_PARENTHESIS   shift and go to state 99

    expresion                      shift and go to state 231
    relacional                     shift and go to state 101
    aritmetica                     shift and go to state 103
    factor                         shift and go to state 104
    matriz                         shift and go to state 105
    cte                            shift and go to state 106
    llamadaFuncion                 shift and go to state 110

state 210

    (58) expresionp -> OR operation_seen . expresion
    (55) expresion -> . relacional apply_operation_expresion expresionp
    (56) expresion -> . NOT relacional expresionp
    (61) relacional -> . aritmetica apply_operation_relational relacionalp
    (70) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (75) factor -> . matriz apply_operation_factor factorp
    (81) matriz -> . cte matrizp
    (86) cte -> . CTE_INT
    (87) cte -> . CTE_FLOAT
    (88) cte -> . CTE_CHAR
    (89) cte -> . llamadaFuncion
    (90) cte -> . ID operand_seen dimId
    (91) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (92) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    NOT             shift and go to state 102
    CTE_INT         shift and go to state 107
    CTE_FLOAT       shift and go to state 108
    CTE_CHAR        shift and go to state 109
    ID              shift and go to state 111
    L_PARENTHESIS   shift and go to state 99

    expresion                      shift and go to state 232
    relacional                     shift and go to state 101
    aritmetica                     shift and go to state 103
    factor                         shift and go to state 104
    matriz                         shift and go to state 105
    cte                            shift and go to state 106
    llamadaFuncion                 shift and go to state 110

state 211

    (62) relacionalp -> EQUALS operation_seen . relacional
    (61) relacional -> . aritmetica apply_operation_relational relacionalp
    (70) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (75) factor -> . matriz apply_operation_factor factorp
    (81) matriz -> . cte matrizp
    (86) cte -> . CTE_INT
    (87) cte -> . CTE_FLOAT
    (88) cte -> . CTE_CHAR
    (89) cte -> . llamadaFuncion
    (90) cte -> . ID operand_seen dimId
    (91) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (92) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    CTE_INT         shift and go to state 107
    CTE_FLOAT       shift and go to state 108
    CTE_CHAR        shift and go to state 109
    ID              shift and go to state 111
    L_PARENTHESIS   shift and go to state 99

    relacional                     shift and go to state 233
    aritmetica                     shift and go to state 103
    factor                         shift and go to state 104
    matriz                         shift and go to state 105
    cte                            shift and go to state 106
    llamadaFuncion                 shift and go to state 110

state 212

    (63) relacionalp -> NOT_EQUAL operation_seen . relacional
    (61) relacional -> . aritmetica apply_operation_relational relacionalp
    (70) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (75) factor -> . matriz apply_operation_factor factorp
    (81) matriz -> . cte matrizp
    (86) cte -> . CTE_INT
    (87) cte -> . CTE_FLOAT
    (88) cte -> . CTE_CHAR
    (89) cte -> . llamadaFuncion
    (90) cte -> . ID operand_seen dimId
    (91) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (92) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    CTE_INT         shift and go to state 107
    CTE_FLOAT       shift and go to state 108
    CTE_CHAR        shift and go to state 109
    ID              shift and go to state 111
    L_PARENTHESIS   shift and go to state 99

    relacional                     shift and go to state 234
    aritmetica                     shift and go to state 103
    factor                         shift and go to state 104
    matriz                         shift and go to state 105
    cte                            shift and go to state 106
    llamadaFuncion                 shift and go to state 110

state 213

    (64) relacionalp -> LESS_THAN operation_seen . relacional
    (61) relacional -> . aritmetica apply_operation_relational relacionalp
    (70) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (75) factor -> . matriz apply_operation_factor factorp
    (81) matriz -> . cte matrizp
    (86) cte -> . CTE_INT
    (87) cte -> . CTE_FLOAT
    (88) cte -> . CTE_CHAR
    (89) cte -> . llamadaFuncion
    (90) cte -> . ID operand_seen dimId
    (91) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (92) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    CTE_INT         shift and go to state 107
    CTE_FLOAT       shift and go to state 108
    CTE_CHAR        shift and go to state 109
    ID              shift and go to state 111
    L_PARENTHESIS   shift and go to state 99

    relacional                     shift and go to state 235
    aritmetica                     shift and go to state 103
    factor                         shift and go to state 104
    matriz                         shift and go to state 105
    cte                            shift and go to state 106
    llamadaFuncion                 shift and go to state 110

state 214

    (65) relacionalp -> LESS_THAN_EQUAL operation_seen . relacional
    (61) relacional -> . aritmetica apply_operation_relational relacionalp
    (70) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (75) factor -> . matriz apply_operation_factor factorp
    (81) matriz -> . cte matrizp
    (86) cte -> . CTE_INT
    (87) cte -> . CTE_FLOAT
    (88) cte -> . CTE_CHAR
    (89) cte -> . llamadaFuncion
    (90) cte -> . ID operand_seen dimId
    (91) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (92) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    CTE_INT         shift and go to state 107
    CTE_FLOAT       shift and go to state 108
    CTE_CHAR        shift and go to state 109
    ID              shift and go to state 111
    L_PARENTHESIS   shift and go to state 99

    relacional                     shift and go to state 236
    aritmetica                     shift and go to state 103
    factor                         shift and go to state 104
    matriz                         shift and go to state 105
    cte                            shift and go to state 106
    llamadaFuncion                 shift and go to state 110

state 215

    (66) relacionalp -> GREATER_THAN operation_seen . relacional
    (61) relacional -> . aritmetica apply_operation_relational relacionalp
    (70) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (75) factor -> . matriz apply_operation_factor factorp
    (81) matriz -> . cte matrizp
    (86) cte -> . CTE_INT
    (87) cte -> . CTE_FLOAT
    (88) cte -> . CTE_CHAR
    (89) cte -> . llamadaFuncion
    (90) cte -> . ID operand_seen dimId
    (91) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (92) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    CTE_INT         shift and go to state 107
    CTE_FLOAT       shift and go to state 108
    CTE_CHAR        shift and go to state 109
    ID              shift and go to state 111
    L_PARENTHESIS   shift and go to state 99

    relacional                     shift and go to state 237
    aritmetica                     shift and go to state 103
    factor                         shift and go to state 104
    matriz                         shift and go to state 105
    cte                            shift and go to state 106
    llamadaFuncion                 shift and go to state 110

state 216

    (67) relacionalp -> GREATER_THAN_EQUAL operation_seen . relacional
    (61) relacional -> . aritmetica apply_operation_relational relacionalp
    (70) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (75) factor -> . matriz apply_operation_factor factorp
    (81) matriz -> . cte matrizp
    (86) cte -> . CTE_INT
    (87) cte -> . CTE_FLOAT
    (88) cte -> . CTE_CHAR
    (89) cte -> . llamadaFuncion
    (90) cte -> . ID operand_seen dimId
    (91) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (92) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    CTE_INT         shift and go to state 107
    CTE_FLOAT       shift and go to state 108
    CTE_CHAR        shift and go to state 109
    ID              shift and go to state 111
    L_PARENTHESIS   shift and go to state 99

    relacional                     shift and go to state 238
    aritmetica                     shift and go to state 103
    factor                         shift and go to state 104
    matriz                         shift and go to state 105
    cte                            shift and go to state 106
    llamadaFuncion                 shift and go to state 110

state 217

    (71) aritmeticap -> SUM operation_seen . aritmetica
    (70) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (75) factor -> . matriz apply_operation_factor factorp
    (81) matriz -> . cte matrizp
    (86) cte -> . CTE_INT
    (87) cte -> . CTE_FLOAT
    (88) cte -> . CTE_CHAR
    (89) cte -> . llamadaFuncion
    (90) cte -> . ID operand_seen dimId
    (91) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (92) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    CTE_INT         shift and go to state 107
    CTE_FLOAT       shift and go to state 108
    CTE_CHAR        shift and go to state 109
    ID              shift and go to state 111
    L_PARENTHESIS   shift and go to state 99

    aritmetica                     shift and go to state 239
    factor                         shift and go to state 104
    matriz                         shift and go to state 105
    cte                            shift and go to state 106
    llamadaFuncion                 shift and go to state 110

state 218

    (72) aritmeticap -> SUBTRACT operation_seen . aritmetica
    (70) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (75) factor -> . matriz apply_operation_factor factorp
    (81) matriz -> . cte matrizp
    (86) cte -> . CTE_INT
    (87) cte -> . CTE_FLOAT
    (88) cte -> . CTE_CHAR
    (89) cte -> . llamadaFuncion
    (90) cte -> . ID operand_seen dimId
    (91) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (92) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    CTE_INT         shift and go to state 107
    CTE_FLOAT       shift and go to state 108
    CTE_CHAR        shift and go to state 109
    ID              shift and go to state 111
    L_PARENTHESIS   shift and go to state 99

    aritmetica                     shift and go to state 240
    factor                         shift and go to state 104
    matriz                         shift and go to state 105
    cte                            shift and go to state 106
    llamadaFuncion                 shift and go to state 110

state 219

    (76) factorp -> MULTIPLY operation_seen . factor
    (75) factor -> . matriz apply_operation_factor factorp
    (81) matriz -> . cte matrizp
    (86) cte -> . CTE_INT
    (87) cte -> . CTE_FLOAT
    (88) cte -> . CTE_CHAR
    (89) cte -> . llamadaFuncion
    (90) cte -> . ID operand_seen dimId
    (91) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (92) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    CTE_INT         shift and go to state 107
    CTE_FLOAT       shift and go to state 108
    CTE_CHAR        shift and go to state 109
    ID              shift and go to state 111
    L_PARENTHESIS   shift and go to state 99

    factor                         shift and go to state 241
    matriz                         shift and go to state 105
    cte                            shift and go to state 106
    llamadaFuncion                 shift and go to state 110

state 220

    (77) factorp -> DIVIDE operation_seen . factor
    (75) factor -> . matriz apply_operation_factor factorp
    (81) matriz -> . cte matrizp
    (86) cte -> . CTE_INT
    (87) cte -> . CTE_FLOAT
    (88) cte -> . CTE_CHAR
    (89) cte -> . llamadaFuncion
    (90) cte -> . ID operand_seen dimId
    (91) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (92) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    CTE_INT         shift and go to state 107
    CTE_FLOAT       shift and go to state 108
    CTE_CHAR        shift and go to state 109
    ID              shift and go to state 111
    L_PARENTHESIS   shift and go to state 99

    factor                         shift and go to state 242
    matriz                         shift and go to state 105
    cte                            shift and go to state 106
    llamadaFuncion                 shift and go to state 110

state 221

    (92) llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen . llamadaFuncionp R_PARENTHESIS operation_seen
    (93) llamadaFuncionp -> . expresion verify_parameter llamadaFuncionpp
    (94) llamadaFuncionp -> . empty
    (55) expresion -> . relacional apply_operation_expresion expresionp
    (56) expresion -> . NOT relacional expresionp
    (123) empty -> .
    (61) relacional -> . aritmetica apply_operation_relational relacionalp
    (70) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (75) factor -> . matriz apply_operation_factor factorp
    (81) matriz -> . cte matrizp
    (86) cte -> . CTE_INT
    (87) cte -> . CTE_FLOAT
    (88) cte -> . CTE_CHAR
    (89) cte -> . llamadaFuncion
    (90) cte -> . ID operand_seen dimId
    (91) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (92) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    NOT             shift and go to state 102
    R_PARENTHESIS   reduce using rule 123 (empty -> .)
    CTE_INT         shift and go to state 107
    CTE_FLOAT       shift and go to state 108
    CTE_CHAR        shift and go to state 109
    ID              shift and go to state 111
    L_PARENTHESIS   shift and go to state 99

    llamadaFuncionp                shift and go to state 243
    expresion                      shift and go to state 129
    empty                          shift and go to state 130
    relacional                     shift and go to state 101
    aritmetica                     shift and go to state 103
    factor                         shift and go to state 104
    matriz                         shift and go to state 105
    cte                            shift and go to state 106
    llamadaFuncion                 shift and go to state 110

state 222

    (103) lecturapp -> COMMA lecturap .

    R_PARENTHESIS   reduce using rule 103 (lecturapp -> COMMA lecturap .)


state 223

    (109) escriturapp -> COMMA escriturap .

    R_PARENTHESIS   reduce using rule 109 (escriturapp -> COMMA escriturap .)


state 224

    (111) decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ . bloque decisionp
    (37) bloque -> . L_CURLY_BRACKET bloquep R_CURLY_BRACKET

    L_CURLY_BRACKET shift and go to state 41

    bloque                         shift and go to state 244

state 225

    (117) cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false . HAZ bloque update_jump_cycle

    HAZ             shift and go to state 245


state 226

    (120) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen . expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle
    (55) expresion -> . relacional apply_operation_expresion expresionp
    (56) expresion -> . NOT relacional expresionp
    (61) relacional -> . aritmetica apply_operation_relational relacionalp
    (70) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (75) factor -> . matriz apply_operation_factor factorp
    (81) matriz -> . cte matrizp
    (86) cte -> . CTE_INT
    (87) cte -> . CTE_FLOAT
    (88) cte -> . CTE_CHAR
    (89) cte -> . llamadaFuncion
    (90) cte -> . ID operand_seen dimId
    (91) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (92) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    NOT             shift and go to state 102
    CTE_INT         shift and go to state 107
    CTE_FLOAT       shift and go to state 108
    CTE_CHAR        shift and go to state 109
    ID              shift and go to state 111
    L_PARENTHESIS   shift and go to state 99

    expresion                      shift and go to state 246
    relacional                     shift and go to state 101
    aritmetica                     shift and go to state 103
    factor                         shift and go to state 104
    matriz                         shift and go to state 105
    cte                            shift and go to state 106
    llamadaFuncion                 shift and go to state 110

state 227

    (33) parametrop -> COMMA tipo ID save_param parametrop .

    R_PARENTHESIS   reduce using rule 33 (parametrop -> COMMA tipo ID save_param parametrop .)


state 228

    (48) asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign . SEMICOLON

    SEMICOLON       shift and go to state 247


state 229

    (95) llamadaFuncionpp -> COMMA llamadaFuncionp .

    R_PARENTHESIS   reduce using rule 95 (llamadaFuncionpp -> COMMA llamadaFuncionp .)


state 230

    (91) cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .

    DETERMINANT     reduce using rule 91 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    TRANSPOSED      reduce using rule 91 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    INVERSE         reduce using rule 91 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    MULTIPLY        reduce using rule 91 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    DIVIDE          reduce using rule 91 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    SUM             reduce using rule 91 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    SUBTRACT        reduce using rule 91 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    EQUALS          reduce using rule 91 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    NOT_EQUAL       reduce using rule 91 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    LESS_THAN       reduce using rule 91 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    LESS_THAN_EQUAL reduce using rule 91 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    GREATER_THAN    reduce using rule 91 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    GREATER_THAN_EQUAL reduce using rule 91 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    AND             reduce using rule 91 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    OR              reduce using rule 91 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    R_PARENTHESIS   reduce using rule 91 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    COMMA           reduce using rule 91 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    R_SQUARE_BRACKET reduce using rule 91 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    SEMICOLON       reduce using rule 91 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    HASTA           reduce using rule 91 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    HACER           reduce using rule 91 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)


state 231

    (57) expresionp -> AND operation_seen expresion .

    R_PARENTHESIS   reduce using rule 57 (expresionp -> AND operation_seen expresion .)
    COMMA           reduce using rule 57 (expresionp -> AND operation_seen expresion .)
    R_SQUARE_BRACKET reduce using rule 57 (expresionp -> AND operation_seen expresion .)
    SEMICOLON       reduce using rule 57 (expresionp -> AND operation_seen expresion .)
    HASTA           reduce using rule 57 (expresionp -> AND operation_seen expresion .)
    HACER           reduce using rule 57 (expresionp -> AND operation_seen expresion .)


state 232

    (58) expresionp -> OR operation_seen expresion .

    R_PARENTHESIS   reduce using rule 58 (expresionp -> OR operation_seen expresion .)
    COMMA           reduce using rule 58 (expresionp -> OR operation_seen expresion .)
    R_SQUARE_BRACKET reduce using rule 58 (expresionp -> OR operation_seen expresion .)
    SEMICOLON       reduce using rule 58 (expresionp -> OR operation_seen expresion .)
    HASTA           reduce using rule 58 (expresionp -> OR operation_seen expresion .)
    HACER           reduce using rule 58 (expresionp -> OR operation_seen expresion .)


state 233

    (62) relacionalp -> EQUALS operation_seen relacional .

    AND             reduce using rule 62 (relacionalp -> EQUALS operation_seen relacional .)
    OR              reduce using rule 62 (relacionalp -> EQUALS operation_seen relacional .)
    R_PARENTHESIS   reduce using rule 62 (relacionalp -> EQUALS operation_seen relacional .)
    COMMA           reduce using rule 62 (relacionalp -> EQUALS operation_seen relacional .)
    R_SQUARE_BRACKET reduce using rule 62 (relacionalp -> EQUALS operation_seen relacional .)
    SEMICOLON       reduce using rule 62 (relacionalp -> EQUALS operation_seen relacional .)
    HASTA           reduce using rule 62 (relacionalp -> EQUALS operation_seen relacional .)
    HACER           reduce using rule 62 (relacionalp -> EQUALS operation_seen relacional .)


state 234

    (63) relacionalp -> NOT_EQUAL operation_seen relacional .

    AND             reduce using rule 63 (relacionalp -> NOT_EQUAL operation_seen relacional .)
    OR              reduce using rule 63 (relacionalp -> NOT_EQUAL operation_seen relacional .)
    R_PARENTHESIS   reduce using rule 63 (relacionalp -> NOT_EQUAL operation_seen relacional .)
    COMMA           reduce using rule 63 (relacionalp -> NOT_EQUAL operation_seen relacional .)
    R_SQUARE_BRACKET reduce using rule 63 (relacionalp -> NOT_EQUAL operation_seen relacional .)
    SEMICOLON       reduce using rule 63 (relacionalp -> NOT_EQUAL operation_seen relacional .)
    HASTA           reduce using rule 63 (relacionalp -> NOT_EQUAL operation_seen relacional .)
    HACER           reduce using rule 63 (relacionalp -> NOT_EQUAL operation_seen relacional .)


state 235

    (64) relacionalp -> LESS_THAN operation_seen relacional .

    AND             reduce using rule 64 (relacionalp -> LESS_THAN operation_seen relacional .)
    OR              reduce using rule 64 (relacionalp -> LESS_THAN operation_seen relacional .)
    R_PARENTHESIS   reduce using rule 64 (relacionalp -> LESS_THAN operation_seen relacional .)
    COMMA           reduce using rule 64 (relacionalp -> LESS_THAN operation_seen relacional .)
    R_SQUARE_BRACKET reduce using rule 64 (relacionalp -> LESS_THAN operation_seen relacional .)
    SEMICOLON       reduce using rule 64 (relacionalp -> LESS_THAN operation_seen relacional .)
    HASTA           reduce using rule 64 (relacionalp -> LESS_THAN operation_seen relacional .)
    HACER           reduce using rule 64 (relacionalp -> LESS_THAN operation_seen relacional .)


state 236

    (65) relacionalp -> LESS_THAN_EQUAL operation_seen relacional .

    AND             reduce using rule 65 (relacionalp -> LESS_THAN_EQUAL operation_seen relacional .)
    OR              reduce using rule 65 (relacionalp -> LESS_THAN_EQUAL operation_seen relacional .)
    R_PARENTHESIS   reduce using rule 65 (relacionalp -> LESS_THAN_EQUAL operation_seen relacional .)
    COMMA           reduce using rule 65 (relacionalp -> LESS_THAN_EQUAL operation_seen relacional .)
    R_SQUARE_BRACKET reduce using rule 65 (relacionalp -> LESS_THAN_EQUAL operation_seen relacional .)
    SEMICOLON       reduce using rule 65 (relacionalp -> LESS_THAN_EQUAL operation_seen relacional .)
    HASTA           reduce using rule 65 (relacionalp -> LESS_THAN_EQUAL operation_seen relacional .)
    HACER           reduce using rule 65 (relacionalp -> LESS_THAN_EQUAL operation_seen relacional .)


state 237

    (66) relacionalp -> GREATER_THAN operation_seen relacional .

    AND             reduce using rule 66 (relacionalp -> GREATER_THAN operation_seen relacional .)
    OR              reduce using rule 66 (relacionalp -> GREATER_THAN operation_seen relacional .)
    R_PARENTHESIS   reduce using rule 66 (relacionalp -> GREATER_THAN operation_seen relacional .)
    COMMA           reduce using rule 66 (relacionalp -> GREATER_THAN operation_seen relacional .)
    R_SQUARE_BRACKET reduce using rule 66 (relacionalp -> GREATER_THAN operation_seen relacional .)
    SEMICOLON       reduce using rule 66 (relacionalp -> GREATER_THAN operation_seen relacional .)
    HASTA           reduce using rule 66 (relacionalp -> GREATER_THAN operation_seen relacional .)
    HACER           reduce using rule 66 (relacionalp -> GREATER_THAN operation_seen relacional .)


state 238

    (67) relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .

    AND             reduce using rule 67 (relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .)
    OR              reduce using rule 67 (relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .)
    R_PARENTHESIS   reduce using rule 67 (relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .)
    COMMA           reduce using rule 67 (relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .)
    R_SQUARE_BRACKET reduce using rule 67 (relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .)
    SEMICOLON       reduce using rule 67 (relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .)
    HASTA           reduce using rule 67 (relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .)
    HACER           reduce using rule 67 (relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .)


state 239

    (71) aritmeticap -> SUM operation_seen aritmetica .

    EQUALS          reduce using rule 71 (aritmeticap -> SUM operation_seen aritmetica .)
    NOT_EQUAL       reduce using rule 71 (aritmeticap -> SUM operation_seen aritmetica .)
    LESS_THAN       reduce using rule 71 (aritmeticap -> SUM operation_seen aritmetica .)
    LESS_THAN_EQUAL reduce using rule 71 (aritmeticap -> SUM operation_seen aritmetica .)
    GREATER_THAN    reduce using rule 71 (aritmeticap -> SUM operation_seen aritmetica .)
    GREATER_THAN_EQUAL reduce using rule 71 (aritmeticap -> SUM operation_seen aritmetica .)
    AND             reduce using rule 71 (aritmeticap -> SUM operation_seen aritmetica .)
    OR              reduce using rule 71 (aritmeticap -> SUM operation_seen aritmetica .)
    R_PARENTHESIS   reduce using rule 71 (aritmeticap -> SUM operation_seen aritmetica .)
    COMMA           reduce using rule 71 (aritmeticap -> SUM operation_seen aritmetica .)
    R_SQUARE_BRACKET reduce using rule 71 (aritmeticap -> SUM operation_seen aritmetica .)
    SEMICOLON       reduce using rule 71 (aritmeticap -> SUM operation_seen aritmetica .)
    HASTA           reduce using rule 71 (aritmeticap -> SUM operation_seen aritmetica .)
    HACER           reduce using rule 71 (aritmeticap -> SUM operation_seen aritmetica .)


state 240

    (72) aritmeticap -> SUBTRACT operation_seen aritmetica .

    EQUALS          reduce using rule 72 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    NOT_EQUAL       reduce using rule 72 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    LESS_THAN       reduce using rule 72 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    LESS_THAN_EQUAL reduce using rule 72 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    GREATER_THAN    reduce using rule 72 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    GREATER_THAN_EQUAL reduce using rule 72 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    AND             reduce using rule 72 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    OR              reduce using rule 72 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    R_PARENTHESIS   reduce using rule 72 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    COMMA           reduce using rule 72 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    R_SQUARE_BRACKET reduce using rule 72 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    SEMICOLON       reduce using rule 72 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    HASTA           reduce using rule 72 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    HACER           reduce using rule 72 (aritmeticap -> SUBTRACT operation_seen aritmetica .)


state 241

    (76) factorp -> MULTIPLY operation_seen factor .

    SUM             reduce using rule 76 (factorp -> MULTIPLY operation_seen factor .)
    SUBTRACT        reduce using rule 76 (factorp -> MULTIPLY operation_seen factor .)
    EQUALS          reduce using rule 76 (factorp -> MULTIPLY operation_seen factor .)
    NOT_EQUAL       reduce using rule 76 (factorp -> MULTIPLY operation_seen factor .)
    LESS_THAN       reduce using rule 76 (factorp -> MULTIPLY operation_seen factor .)
    LESS_THAN_EQUAL reduce using rule 76 (factorp -> MULTIPLY operation_seen factor .)
    GREATER_THAN    reduce using rule 76 (factorp -> MULTIPLY operation_seen factor .)
    GREATER_THAN_EQUAL reduce using rule 76 (factorp -> MULTIPLY operation_seen factor .)
    AND             reduce using rule 76 (factorp -> MULTIPLY operation_seen factor .)
    OR              reduce using rule 76 (factorp -> MULTIPLY operation_seen factor .)
    R_PARENTHESIS   reduce using rule 76 (factorp -> MULTIPLY operation_seen factor .)
    COMMA           reduce using rule 76 (factorp -> MULTIPLY operation_seen factor .)
    R_SQUARE_BRACKET reduce using rule 76 (factorp -> MULTIPLY operation_seen factor .)
    SEMICOLON       reduce using rule 76 (factorp -> MULTIPLY operation_seen factor .)
    HASTA           reduce using rule 76 (factorp -> MULTIPLY operation_seen factor .)
    HACER           reduce using rule 76 (factorp -> MULTIPLY operation_seen factor .)


state 242

    (77) factorp -> DIVIDE operation_seen factor .

    SUM             reduce using rule 77 (factorp -> DIVIDE operation_seen factor .)
    SUBTRACT        reduce using rule 77 (factorp -> DIVIDE operation_seen factor .)
    EQUALS          reduce using rule 77 (factorp -> DIVIDE operation_seen factor .)
    NOT_EQUAL       reduce using rule 77 (factorp -> DIVIDE operation_seen factor .)
    LESS_THAN       reduce using rule 77 (factorp -> DIVIDE operation_seen factor .)
    LESS_THAN_EQUAL reduce using rule 77 (factorp -> DIVIDE operation_seen factor .)
    GREATER_THAN    reduce using rule 77 (factorp -> DIVIDE operation_seen factor .)
    GREATER_THAN_EQUAL reduce using rule 77 (factorp -> DIVIDE operation_seen factor .)
    AND             reduce using rule 77 (factorp -> DIVIDE operation_seen factor .)
    OR              reduce using rule 77 (factorp -> DIVIDE operation_seen factor .)
    R_PARENTHESIS   reduce using rule 77 (factorp -> DIVIDE operation_seen factor .)
    COMMA           reduce using rule 77 (factorp -> DIVIDE operation_seen factor .)
    R_SQUARE_BRACKET reduce using rule 77 (factorp -> DIVIDE operation_seen factor .)
    SEMICOLON       reduce using rule 77 (factorp -> DIVIDE operation_seen factor .)
    HASTA           reduce using rule 77 (factorp -> DIVIDE operation_seen factor .)
    HACER           reduce using rule 77 (factorp -> DIVIDE operation_seen factor .)


state 243

    (92) llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp . R_PARENTHESIS operation_seen

    R_PARENTHESIS   shift and go to state 248


state 244

    (111) decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque . decisionp
    (114) decisionp -> . SINO jump_else bloque update_jump
    (115) decisionp -> . empty update_jump
    (123) empty -> .

    SINO            shift and go to state 250
    ID              reduce using rule 123 (empty -> .)
    REGRESA         reduce using rule 123 (empty -> .)
    LECTURA         reduce using rule 123 (empty -> .)
    ESCRIBE         reduce using rule 123 (empty -> .)
    SI              reduce using rule 123 (empty -> .)
    MIENTRAS        reduce using rule 123 (empty -> .)
    DESDE           reduce using rule 123 (empty -> .)
    R_CURLY_BRACKET reduce using rule 123 (empty -> .)

    decisionp                      shift and go to state 249
    empty                          shift and go to state 251

state 245

    (117) cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ . bloque update_jump_cycle
    (37) bloque -> . L_CURLY_BRACKET bloquep R_CURLY_BRACKET

    L_CURLY_BRACKET shift and go to state 41

    bloque                         shift and go to state 252

state 246

    (120) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion . apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle
    (50) apply_operation_assign -> .

    HASTA           reduce using rule 50 (apply_operation_assign -> .)

    apply_operation_assign         shift and go to state 253

state 247

    (48) asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON .

    ID              reduce using rule 48 (asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON .)
    REGRESA         reduce using rule 48 (asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON .)
    LECTURA         reduce using rule 48 (asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON .)
    ESCRIBE         reduce using rule 48 (asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON .)
    SI              reduce using rule 48 (asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON .)
    MIENTRAS        reduce using rule 48 (asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON .)
    DESDE           reduce using rule 48 (asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON .)
    R_CURLY_BRACKET reduce using rule 48 (asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON .)


state 248

    (92) llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS . operation_seen
    (80) operation_seen -> .

    DETERMINANT     reduce using rule 80 (operation_seen -> .)
    TRANSPOSED      reduce using rule 80 (operation_seen -> .)
    INVERSE         reduce using rule 80 (operation_seen -> .)
    MULTIPLY        reduce using rule 80 (operation_seen -> .)
    DIVIDE          reduce using rule 80 (operation_seen -> .)
    SUM             reduce using rule 80 (operation_seen -> .)
    SUBTRACT        reduce using rule 80 (operation_seen -> .)
    EQUALS          reduce using rule 80 (operation_seen -> .)
    NOT_EQUAL       reduce using rule 80 (operation_seen -> .)
    LESS_THAN       reduce using rule 80 (operation_seen -> .)
    LESS_THAN_EQUAL reduce using rule 80 (operation_seen -> .)
    GREATER_THAN    reduce using rule 80 (operation_seen -> .)
    GREATER_THAN_EQUAL reduce using rule 80 (operation_seen -> .)
    AND             reduce using rule 80 (operation_seen -> .)
    OR              reduce using rule 80 (operation_seen -> .)
    R_PARENTHESIS   reduce using rule 80 (operation_seen -> .)
    COMMA           reduce using rule 80 (operation_seen -> .)
    R_SQUARE_BRACKET reduce using rule 80 (operation_seen -> .)
    SEMICOLON       reduce using rule 80 (operation_seen -> .)
    HASTA           reduce using rule 80 (operation_seen -> .)
    HACER           reduce using rule 80 (operation_seen -> .)

    operation_seen                 shift and go to state 254

state 249

    (111) decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp .

    ID              reduce using rule 111 (decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp .)
    REGRESA         reduce using rule 111 (decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp .)
    LECTURA         reduce using rule 111 (decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp .)
    ESCRIBE         reduce using rule 111 (decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp .)
    SI              reduce using rule 111 (decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp .)
    MIENTRAS        reduce using rule 111 (decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp .)
    DESDE           reduce using rule 111 (decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp .)
    R_CURLY_BRACKET reduce using rule 111 (decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp .)


state 250

    (114) decisionp -> SINO . jump_else bloque update_jump
    (116) jump_else -> .

    L_CURLY_BRACKET reduce using rule 116 (jump_else -> .)

    jump_else                      shift and go to state 255

state 251

    (115) decisionp -> empty . update_jump
    (113) update_jump -> .

    ID              reduce using rule 113 (update_jump -> .)
    REGRESA         reduce using rule 113 (update_jump -> .)
    LECTURA         reduce using rule 113 (update_jump -> .)
    ESCRIBE         reduce using rule 113 (update_jump -> .)
    SI              reduce using rule 113 (update_jump -> .)
    MIENTRAS        reduce using rule 113 (update_jump -> .)
    DESDE           reduce using rule 113 (update_jump -> .)
    R_CURLY_BRACKET reduce using rule 113 (update_jump -> .)

    update_jump                    shift and go to state 256

state 252

    (117) cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque . update_jump_cycle
    (119) update_jump_cycle -> .

    ID              reduce using rule 119 (update_jump_cycle -> .)
    REGRESA         reduce using rule 119 (update_jump_cycle -> .)
    LECTURA         reduce using rule 119 (update_jump_cycle -> .)
    ESCRIBE         reduce using rule 119 (update_jump_cycle -> .)
    SI              reduce using rule 119 (update_jump_cycle -> .)
    MIENTRAS        reduce using rule 119 (update_jump_cycle -> .)
    DESDE           reduce using rule 119 (update_jump_cycle -> .)
    R_CURLY_BRACKET reduce using rule 119 (update_jump_cycle -> .)

    update_jump_cycle              shift and go to state 257

state 253

    (120) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign . HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle

    HASTA           shift and go to state 258


state 254

    (92) llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .

    DETERMINANT     reduce using rule 92 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    TRANSPOSED      reduce using rule 92 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    INVERSE         reduce using rule 92 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    MULTIPLY        reduce using rule 92 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    DIVIDE          reduce using rule 92 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    SUM             reduce using rule 92 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    SUBTRACT        reduce using rule 92 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    EQUALS          reduce using rule 92 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    NOT_EQUAL       reduce using rule 92 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    LESS_THAN       reduce using rule 92 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    LESS_THAN_EQUAL reduce using rule 92 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    GREATER_THAN    reduce using rule 92 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    GREATER_THAN_EQUAL reduce using rule 92 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    AND             reduce using rule 92 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    OR              reduce using rule 92 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    R_PARENTHESIS   reduce using rule 92 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    COMMA           reduce using rule 92 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    R_SQUARE_BRACKET reduce using rule 92 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    SEMICOLON       reduce using rule 92 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    HASTA           reduce using rule 92 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    HACER           reduce using rule 92 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)


state 255

    (114) decisionp -> SINO jump_else . bloque update_jump
    (37) bloque -> . L_CURLY_BRACKET bloquep R_CURLY_BRACKET

    L_CURLY_BRACKET shift and go to state 41

    bloque                         shift and go to state 259

state 256

    (115) decisionp -> empty update_jump .

    ID              reduce using rule 115 (decisionp -> empty update_jump .)
    REGRESA         reduce using rule 115 (decisionp -> empty update_jump .)
    LECTURA         reduce using rule 115 (decisionp -> empty update_jump .)
    ESCRIBE         reduce using rule 115 (decisionp -> empty update_jump .)
    SI              reduce using rule 115 (decisionp -> empty update_jump .)
    MIENTRAS        reduce using rule 115 (decisionp -> empty update_jump .)
    DESDE           reduce using rule 115 (decisionp -> empty update_jump .)
    R_CURLY_BRACKET reduce using rule 115 (decisionp -> empty update_jump .)


state 257

    (117) cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle .

    ID              reduce using rule 117 (cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle .)
    REGRESA         reduce using rule 117 (cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle .)
    LECTURA         reduce using rule 117 (cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle .)
    ESCRIBE         reduce using rule 117 (cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle .)
    SI              reduce using rule 117 (cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle .)
    MIENTRAS        reduce using rule 117 (cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle .)
    DESDE           reduce using rule 117 (cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle .)
    R_CURLY_BRACKET reduce using rule 117 (cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle .)


state 258

    (120) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA . expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle
    (55) expresion -> . relacional apply_operation_expresion expresionp
    (56) expresion -> . NOT relacional expresionp
    (61) relacional -> . aritmetica apply_operation_relational relacionalp
    (70) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (75) factor -> . matriz apply_operation_factor factorp
    (81) matriz -> . cte matrizp
    (86) cte -> . CTE_INT
    (87) cte -> . CTE_FLOAT
    (88) cte -> . CTE_CHAR
    (89) cte -> . llamadaFuncion
    (90) cte -> . ID operand_seen dimId
    (91) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (92) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    NOT             shift and go to state 102
    CTE_INT         shift and go to state 107
    CTE_FLOAT       shift and go to state 108
    CTE_CHAR        shift and go to state 109
    ID              shift and go to state 111
    L_PARENTHESIS   shift and go to state 99

    expresion                      shift and go to state 260
    relacional                     shift and go to state 101
    aritmetica                     shift and go to state 103
    factor                         shift and go to state 104
    matriz                         shift and go to state 105
    cte                            shift and go to state 106
    llamadaFuncion                 shift and go to state 110

state 259

    (114) decisionp -> SINO jump_else bloque . update_jump
    (113) update_jump -> .

    ID              reduce using rule 113 (update_jump -> .)
    REGRESA         reduce using rule 113 (update_jump -> .)
    LECTURA         reduce using rule 113 (update_jump -> .)
    ESCRIBE         reduce using rule 113 (update_jump -> .)
    SI              reduce using rule 113 (update_jump -> .)
    MIENTRAS        reduce using rule 113 (update_jump -> .)
    DESDE           reduce using rule 113 (update_jump -> .)
    R_CURLY_BRACKET reduce using rule 113 (update_jump -> .)

    update_jump                    shift and go to state 261

state 260

    (120) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion . jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle
    (118) jump_cycle -> .

    HACER           reduce using rule 118 (jump_cycle -> .)

    jump_cycle                     shift and go to state 262

state 261

    (114) decisionp -> SINO jump_else bloque update_jump .

    ID              reduce using rule 114 (decisionp -> SINO jump_else bloque update_jump .)
    REGRESA         reduce using rule 114 (decisionp -> SINO jump_else bloque update_jump .)
    LECTURA         reduce using rule 114 (decisionp -> SINO jump_else bloque update_jump .)
    ESCRIBE         reduce using rule 114 (decisionp -> SINO jump_else bloque update_jump .)
    SI              reduce using rule 114 (decisionp -> SINO jump_else bloque update_jump .)
    MIENTRAS        reduce using rule 114 (decisionp -> SINO jump_else bloque update_jump .)
    DESDE           reduce using rule 114 (decisionp -> SINO jump_else bloque update_jump .)
    R_CURLY_BRACKET reduce using rule 114 (decisionp -> SINO jump_else bloque update_jump .)


state 262

    (120) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle . add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle
    (121) add_gt -> .

    HACER           reduce using rule 121 (add_gt -> .)

    add_gt                         shift and go to state 263

state 263

    (120) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt . apply_operation_relational jump_false HACER bloque add_one update_jump_cycle
    (69) apply_operation_relational -> .

    HACER           reduce using rule 69 (apply_operation_relational -> .)

    apply_operation_relational     shift and go to state 264

state 264

    (120) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational . jump_false HACER bloque add_one update_jump_cycle
    (112) jump_false -> .

    HACER           reduce using rule 112 (jump_false -> .)

    jump_false                     shift and go to state 265

state 265

    (120) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false . HACER bloque add_one update_jump_cycle

    HACER           shift and go to state 266


state 266

    (120) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER . bloque add_one update_jump_cycle
    (37) bloque -> . L_CURLY_BRACKET bloquep R_CURLY_BRACKET

    L_CURLY_BRACKET shift and go to state 41

    bloque                         shift and go to state 267

state 267

    (120) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque . add_one update_jump_cycle
    (122) add_one -> .

    ID              reduce using rule 122 (add_one -> .)
    REGRESA         reduce using rule 122 (add_one -> .)
    LECTURA         reduce using rule 122 (add_one -> .)
    ESCRIBE         reduce using rule 122 (add_one -> .)
    SI              reduce using rule 122 (add_one -> .)
    MIENTRAS        reduce using rule 122 (add_one -> .)
    DESDE           reduce using rule 122 (add_one -> .)
    R_CURLY_BRACKET reduce using rule 122 (add_one -> .)

    add_one                        shift and go to state 268

state 268

    (120) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one . update_jump_cycle
    (119) update_jump_cycle -> .

    ID              reduce using rule 119 (update_jump_cycle -> .)
    REGRESA         reduce using rule 119 (update_jump_cycle -> .)
    LECTURA         reduce using rule 119 (update_jump_cycle -> .)
    ESCRIBE         reduce using rule 119 (update_jump_cycle -> .)
    SI              reduce using rule 119 (update_jump_cycle -> .)
    MIENTRAS        reduce using rule 119 (update_jump_cycle -> .)
    DESDE           reduce using rule 119 (update_jump_cycle -> .)
    R_CURLY_BRACKET reduce using rule 119 (update_jump_cycle -> .)

    update_jump_cycle              shift and go to state 269

state 269

    (120) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle .

    ID              reduce using rule 120 (cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle .)
    REGRESA         reduce using rule 120 (cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle .)
    LECTURA         reduce using rule 120 (cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle .)
    ESCRIBE         reduce using rule 120 (cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle .)
    SI              reduce using rule 120 (cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle .)
    MIENTRAS        reduce using rule 120 (cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle .)
    DESDE           reduce using rule 120 (cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle .)
    R_CURLY_BRACKET reduce using rule 120 (cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle .)

