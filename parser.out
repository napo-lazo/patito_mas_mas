Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> programa
Rule 2     programa -> PROGRAMA ID SEMICOLON jump var funcion clear_scope PRINCIPAL update_jump L_PARENTHESIS R_PARENTHESIS bloque EOF
Rule 3     jump -> <empty>
Rule 4     clear_scope -> <empty>
Rule 5     var -> VAR var_seen varp
Rule 6     var -> empty
Rule 7     var_seen -> <empty>
Rule 8     varp -> tipo tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp
Rule 9     varp -> tipo tipo_seen COLON ID error varppp varpp delete_type SEMICOLON varpppp
Rule 10    tipo_seen -> <empty>
Rule 11    variable_seen -> <empty>
Rule 12    delete_type -> <empty>
Rule 13    varpp -> COMMA ID variable_seen varppp varpp
Rule 14    varpp -> empty
Rule 15    varppp -> dimDeclare
Rule 16    varppp -> dimDeclare dimDeclare
Rule 17    varppp -> empty
Rule 18    varpppp -> varp
Rule 19    varpppp -> empty
Rule 20    dimDeclare -> L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET
Rule 21    tipo -> INT
Rule 22    tipo -> FLOAT
Rule 23    tipo -> CHAR
Rule 24    funcion -> FUNCION funcionp
Rule 25    funcion -> FUNCION error
Rule 26    funcion -> empty
Rule 27    funcionp -> tipoRetorno ID create_func_scope L_PARENTHESIS parametro R_PARENTHESIS var bloque funcion
Rule 28    create_func_scope -> <empty>
Rule 29    parametro -> tipo ID save_param parametrop
Rule 30    parametro -> empty
Rule 31    save_param -> <empty>
Rule 32    parametrop -> COMMA tipo ID save_param parametrop
Rule 33    parametrop -> empty
Rule 34    tipoRetorno -> tipo
Rule 35    tipoRetorno -> VOID
Rule 36    bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET
Rule 37    bloquep -> estatuto bloquep
Rule 38    bloquep -> empty
Rule 39    estatuto -> asignacion
Rule 40    estatuto -> funcionVacia
Rule 41    estatuto -> regresa
Rule 42    estatuto -> lectura
Rule 43    estatuto -> escritura
Rule 44    estatuto -> decision
Rule 45    estatuto -> cicloCondicional
Rule 46    estatuto -> cicloNoCondicional
Rule 47    asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON
Rule 48    operand_seen -> <empty>
Rule 49    apply_operation_assign -> <empty>
Rule 50    dimId -> dim
Rule 51    dimId -> dim dim
Rule 52    dimId -> empty
Rule 53    dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET
Rule 54    expresion -> relacional apply_operation_expresion expresionp
Rule 55    expresion -> NOT relacional expresionp
Rule 56    expresionp -> AND operation_seen expresion
Rule 57    expresionp -> OR operation_seen expresion
Rule 58    expresionp -> empty
Rule 59    apply_operation_expresion -> <empty>
Rule 60    relacional -> aritmetica apply_operation_relational relacionalp
Rule 61    relacionalp -> EQUALS operation_seen relacional
Rule 62    relacionalp -> NOT_EQUAL operation_seen relacional
Rule 63    relacionalp -> LESS_THAN operation_seen relacional
Rule 64    relacionalp -> LESS_THAN_EQUAL operation_seen relacional
Rule 65    relacionalp -> GREATER_THAN operation_seen relacional
Rule 66    relacionalp -> GREATER_THAN_EQUAL operation_seen relacional
Rule 67    relacionalp -> empty
Rule 68    apply_operation_relational -> <empty>
Rule 69    aritmetica -> factor apply_operation_aritmetica aritmeticap
Rule 70    aritmeticap -> SUM operation_seen aritmetica
Rule 71    aritmeticap -> SUBTRACT operation_seen aritmetica
Rule 72    aritmeticap -> empty
Rule 73    apply_operation_aritmetica -> <empty>
Rule 74    factor -> matriz apply_operation_factor factorp
Rule 75    factorp -> MULTIPLY operation_seen factor
Rule 76    factorp -> DIVIDE operation_seen factor
Rule 77    factorp -> empty
Rule 78    apply_operation_factor -> <empty>
Rule 79    operation_seen -> <empty>
Rule 80    matriz -> cte matrizp
Rule 81    matrizp -> DETERMINANT
Rule 82    matrizp -> TRANSPOSED
Rule 83    matrizp -> INVERSE
Rule 84    matrizp -> empty
Rule 85    cte -> CTE_INT
Rule 86    cte -> CTE_FLOAT
Rule 87    cte -> CTE_CHAR
Rule 88    cte -> llamadaFuncion
Rule 89    cte -> ID operand_seen dimId
Rule 90    cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
Rule 91    llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS
Rule 92    llamadaFuncionp -> expresion verify_parameter llamadaFuncionpp
Rule 93    llamadaFuncionp -> empty
Rule 94    llamadaFuncionpp -> COMMA expresion verify_parameter llamadaFuncionpp
Rule 95    llamadaFuncionpp -> empty
Rule 96    verify_parameter -> <empty>
Rule 97    funcionVacia -> ID set_func_scope L_PARENTHESIS llamadaFuncionp R_PARENTHESIS SEMICOLON
Rule 98    set_func_scope -> <empty>
Rule 99    regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON
Rule 100   lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON
Rule 101   lecturap -> ID dimId lecturapp
Rule 102   lecturapp -> COMMA lecturap
Rule 103   lecturapp -> empty
Rule 104   escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON
Rule 105   escriturap -> LETRERO escriturapp
Rule 106   escriturap -> expresion escriturapp
Rule 107   escriturapp -> COMMA escriturap
Rule 108   escriturapp -> empty
Rule 109   decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp
Rule 110   jump_false -> <empty>
Rule 111   update_jump -> <empty>
Rule 112   decisionp -> SINO jump_else bloque update_jump
Rule 113   decisionp -> empty update_jump
Rule 114   jump_else -> <empty>
Rule 115   cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle
Rule 116   jump_cycle -> <empty>
Rule 117   update_jump_cycle -> <empty>
Rule 118   cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle
Rule 119   add_gt -> <empty>
Rule 120   add_one -> <empty>
Rule 121   empty -> <empty>

Terminals, with rules where they appear

AND                  : 56
ASSIGN               : 47 118
CHAR                 : 23
COLON                : 8 9
COMMA                : 13 32 94 102 107
CTE_CHAR             : 87
CTE_FLOAT            : 86
CTE_INT              : 20 85
DESDE                : 118
DETERMINANT          : 81
DIVIDE               : 76
EOF                  : 2
EQUALS               : 61
ESCRIBE              : 104
FLOAT                : 22
FUNCION              : 24 25
GREATER_THAN         : 65
GREATER_THAN_EQUAL   : 66
HACER                : 118
HASTA                : 118
HAZ                  : 109 115
ID                   : 2 8 9 13 27 29 32 47 89 91 97 101 118
INT                  : 21
INVERSE              : 83
LECTURA              : 100
LESS_THAN            : 63
LESS_THAN_EQUAL      : 64
LETRERO              : 105
L_CURLY_BRACKET      : 36
L_PARENTHESIS        : 2 27 90 91 97 99 100 104 109 115
L_SQUARE_BRACKET     : 20 53
MIENTRAS             : 115
MULTIPLY             : 75
NOT                  : 55
NOT_EQUAL            : 62
OR                   : 57
PRINCIPAL            : 2
PROGRAMA             : 2
REGRESA              : 99
R_CURLY_BRACKET      : 36
R_PARENTHESIS        : 2 27 90 91 97 99 100 104 109 115
R_SQUARE_BRACKET     : 20 53
SEMICOLON            : 2 8 9 47 97 99 100 104
SI                   : 109
SINO                 : 112
SUBTRACT             : 71
SUM                  : 70
TRANSPOSED           : 82
VAR                  : 5
VOID                 : 35
error                : 9 25

Nonterminals, with rules where they appear

add_gt               : 118
add_one              : 118
apply_operation_aritmetica : 69
apply_operation_assign : 47 118
apply_operation_expresion : 54
apply_operation_factor : 74
apply_operation_relational : 60 118
aritmetica           : 60 70 71
aritmeticap          : 69
asignacion           : 39
bloque               : 2 27 109 112 115 118
bloquep              : 36 37
cicloCondicional     : 45
cicloNoCondicional   : 46
clear_scope          : 2
create_func_scope    : 27
cte                  : 80
decision             : 44
decisionp            : 109
delete_type          : 8 9
dim                  : 50 51 51
dimDeclare           : 15 16 16
dimId                : 47 89 101 118
empty                : 6 14 17 19 26 30 33 38 52 58 67 72 77 84 93 95 103 108 113
escritura            : 43
escriturap           : 104 107
escriturapp          : 105 106
estatuto             : 37
expresion            : 47 53 56 57 90 91 92 94 99 106 109 115 118 118
expresionp           : 54 55
factor               : 69 75 76
factorp              : 74
funcion              : 2 27
funcionVacia         : 40
funcionp             : 24
jump                 : 2
jump_cycle           : 115 118
jump_else            : 112
jump_false           : 109 115 118
lectura              : 42
lecturap             : 100 102
lecturapp            : 101
llamadaFuncion       : 88
llamadaFuncionp      : 91 97
llamadaFuncionpp     : 92 94
matriz               : 74
matrizp              : 80
operand_seen         : 47 89 118
operation_seen       : 47 56 57 61 62 63 64 65 66 70 71 75 76 90 90 118
parametro            : 27
parametrop           : 29 32
programa             : 1
regresa              : 41
relacional           : 54 55 61 62 63 64 65 66
relacionalp          : 60
save_param           : 29 32
set_func_scope       : 97
start                : 0
tipo                 : 8 9 29 32 34
tipoRetorno          : 27
tipo_seen            : 8 9
update_jump          : 2 112 113
update_jump_cycle    : 115 118
var                  : 2 27
var_seen             : 5
variable_seen        : 8 13
varp                 : 5 18
varpp                : 8 9 13
varppp               : 8 9 13
varpppp              : 8 9
verify_parameter     : 92 94

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . programa
    (2) programa -> . PROGRAMA ID SEMICOLON jump var funcion clear_scope PRINCIPAL update_jump L_PARENTHESIS R_PARENTHESIS bloque EOF

    PROGRAMA        shift and go to state 3

    start                          shift and go to state 1
    programa                       shift and go to state 2

state 1

    (0) S' -> start .



state 2

    (1) start -> programa .

    $end            reduce using rule 1 (start -> programa .)


state 3

    (2) programa -> PROGRAMA . ID SEMICOLON jump var funcion clear_scope PRINCIPAL update_jump L_PARENTHESIS R_PARENTHESIS bloque EOF

    ID              shift and go to state 4


state 4

    (2) programa -> PROGRAMA ID . SEMICOLON jump var funcion clear_scope PRINCIPAL update_jump L_PARENTHESIS R_PARENTHESIS bloque EOF

    SEMICOLON       shift and go to state 5


state 5

    (2) programa -> PROGRAMA ID SEMICOLON . jump var funcion clear_scope PRINCIPAL update_jump L_PARENTHESIS R_PARENTHESIS bloque EOF
    (3) jump -> .

    VAR             reduce using rule 3 (jump -> .)
    FUNCION         reduce using rule 3 (jump -> .)
    PRINCIPAL       reduce using rule 3 (jump -> .)

    jump                           shift and go to state 6

state 6

    (2) programa -> PROGRAMA ID SEMICOLON jump . var funcion clear_scope PRINCIPAL update_jump L_PARENTHESIS R_PARENTHESIS bloque EOF
    (5) var -> . VAR var_seen varp
    (6) var -> . empty
    (121) empty -> .

    VAR             shift and go to state 8
    FUNCION         reduce using rule 121 (empty -> .)
    PRINCIPAL       reduce using rule 121 (empty -> .)

    var                            shift and go to state 7
    empty                          shift and go to state 9

state 7

    (2) programa -> PROGRAMA ID SEMICOLON jump var . funcion clear_scope PRINCIPAL update_jump L_PARENTHESIS R_PARENTHESIS bloque EOF
    (24) funcion -> . FUNCION funcionp
    (25) funcion -> . FUNCION error
    (26) funcion -> . empty
    (121) empty -> .

    FUNCION         shift and go to state 11
    PRINCIPAL       reduce using rule 121 (empty -> .)

    funcion                        shift and go to state 10
    empty                          shift and go to state 12

state 8

    (5) var -> VAR . var_seen varp
    (7) var_seen -> .

    INT             reduce using rule 7 (var_seen -> .)
    FLOAT           reduce using rule 7 (var_seen -> .)
    CHAR            reduce using rule 7 (var_seen -> .)

    var_seen                       shift and go to state 13

state 9

    (6) var -> empty .

    FUNCION         reduce using rule 6 (var -> empty .)
    PRINCIPAL       reduce using rule 6 (var -> empty .)
    L_CURLY_BRACKET reduce using rule 6 (var -> empty .)


state 10

    (2) programa -> PROGRAMA ID SEMICOLON jump var funcion . clear_scope PRINCIPAL update_jump L_PARENTHESIS R_PARENTHESIS bloque EOF
    (4) clear_scope -> .

    PRINCIPAL       reduce using rule 4 (clear_scope -> .)

    clear_scope                    shift and go to state 14

state 11

    (24) funcion -> FUNCION . funcionp
    (25) funcion -> FUNCION . error
    (27) funcionp -> . tipoRetorno ID create_func_scope L_PARENTHESIS parametro R_PARENTHESIS var bloque funcion
    (34) tipoRetorno -> . tipo
    (35) tipoRetorno -> . VOID
    (21) tipo -> . INT
    (22) tipo -> . FLOAT
    (23) tipo -> . CHAR

    error           shift and go to state 16
    VOID            shift and go to state 19
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22

    funcionp                       shift and go to state 15
    tipoRetorno                    shift and go to state 17
    tipo                           shift and go to state 18

state 12

    (26) funcion -> empty .

    PRINCIPAL       reduce using rule 26 (funcion -> empty .)


state 13

    (5) var -> VAR var_seen . varp
    (8) varp -> . tipo tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp
    (9) varp -> . tipo tipo_seen COLON ID error varppp varpp delete_type SEMICOLON varpppp
    (21) tipo -> . INT
    (22) tipo -> . FLOAT
    (23) tipo -> . CHAR

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22

    varp                           shift and go to state 23
    tipo                           shift and go to state 24

state 14

    (2) programa -> PROGRAMA ID SEMICOLON jump var funcion clear_scope . PRINCIPAL update_jump L_PARENTHESIS R_PARENTHESIS bloque EOF

    PRINCIPAL       shift and go to state 25


state 15

    (24) funcion -> FUNCION funcionp .

    PRINCIPAL       reduce using rule 24 (funcion -> FUNCION funcionp .)


state 16

    (25) funcion -> FUNCION error .

    PRINCIPAL       reduce using rule 25 (funcion -> FUNCION error .)


state 17

    (27) funcionp -> tipoRetorno . ID create_func_scope L_PARENTHESIS parametro R_PARENTHESIS var bloque funcion

    ID              shift and go to state 26


state 18

    (34) tipoRetorno -> tipo .

    ID              reduce using rule 34 (tipoRetorno -> tipo .)


state 19

    (35) tipoRetorno -> VOID .

    ID              reduce using rule 35 (tipoRetorno -> VOID .)


state 20

    (21) tipo -> INT .

    ID              reduce using rule 21 (tipo -> INT .)
    COLON           reduce using rule 21 (tipo -> INT .)


state 21

    (22) tipo -> FLOAT .

    ID              reduce using rule 22 (tipo -> FLOAT .)
    COLON           reduce using rule 22 (tipo -> FLOAT .)


state 22

    (23) tipo -> CHAR .

    ID              reduce using rule 23 (tipo -> CHAR .)
    COLON           reduce using rule 23 (tipo -> CHAR .)


state 23

    (5) var -> VAR var_seen varp .

    FUNCION         reduce using rule 5 (var -> VAR var_seen varp .)
    PRINCIPAL       reduce using rule 5 (var -> VAR var_seen varp .)
    L_CURLY_BRACKET reduce using rule 5 (var -> VAR var_seen varp .)


state 24

    (8) varp -> tipo . tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp
    (9) varp -> tipo . tipo_seen COLON ID error varppp varpp delete_type SEMICOLON varpppp
    (10) tipo_seen -> .

    COLON           reduce using rule 10 (tipo_seen -> .)

    tipo_seen                      shift and go to state 27

state 25

    (2) programa -> PROGRAMA ID SEMICOLON jump var funcion clear_scope PRINCIPAL . update_jump L_PARENTHESIS R_PARENTHESIS bloque EOF
    (111) update_jump -> .

    L_PARENTHESIS   reduce using rule 111 (update_jump -> .)

    update_jump                    shift and go to state 28

state 26

    (27) funcionp -> tipoRetorno ID . create_func_scope L_PARENTHESIS parametro R_PARENTHESIS var bloque funcion
    (28) create_func_scope -> .

    L_PARENTHESIS   reduce using rule 28 (create_func_scope -> .)

    create_func_scope              shift and go to state 29

state 27

    (8) varp -> tipo tipo_seen . COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp
    (9) varp -> tipo tipo_seen . COLON ID error varppp varpp delete_type SEMICOLON varpppp

    COLON           shift and go to state 30


state 28

    (2) programa -> PROGRAMA ID SEMICOLON jump var funcion clear_scope PRINCIPAL update_jump . L_PARENTHESIS R_PARENTHESIS bloque EOF

    L_PARENTHESIS   shift and go to state 31


state 29

    (27) funcionp -> tipoRetorno ID create_func_scope . L_PARENTHESIS parametro R_PARENTHESIS var bloque funcion

    L_PARENTHESIS   shift and go to state 32


state 30

    (8) varp -> tipo tipo_seen COLON . ID variable_seen varppp varpp delete_type SEMICOLON varpppp
    (9) varp -> tipo tipo_seen COLON . ID error varppp varpp delete_type SEMICOLON varpppp

    ID              shift and go to state 33


state 31

    (2) programa -> PROGRAMA ID SEMICOLON jump var funcion clear_scope PRINCIPAL update_jump L_PARENTHESIS . R_PARENTHESIS bloque EOF

    R_PARENTHESIS   shift and go to state 34


state 32

    (27) funcionp -> tipoRetorno ID create_func_scope L_PARENTHESIS . parametro R_PARENTHESIS var bloque funcion
    (29) parametro -> . tipo ID save_param parametrop
    (30) parametro -> . empty
    (21) tipo -> . INT
    (22) tipo -> . FLOAT
    (23) tipo -> . CHAR
    (121) empty -> .

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    R_PARENTHESIS   reduce using rule 121 (empty -> .)

    parametro                      shift and go to state 35
    tipo                           shift and go to state 36
    empty                          shift and go to state 37

state 33

    (8) varp -> tipo tipo_seen COLON ID . variable_seen varppp varpp delete_type SEMICOLON varpppp
    (9) varp -> tipo tipo_seen COLON ID . error varppp varpp delete_type SEMICOLON varpppp
    (11) variable_seen -> .

    error           shift and go to state 39
    L_SQUARE_BRACKET reduce using rule 11 (variable_seen -> .)
    COMMA           reduce using rule 11 (variable_seen -> .)
    SEMICOLON       reduce using rule 11 (variable_seen -> .)

    variable_seen                  shift and go to state 38

state 34

    (2) programa -> PROGRAMA ID SEMICOLON jump var funcion clear_scope PRINCIPAL update_jump L_PARENTHESIS R_PARENTHESIS . bloque EOF
    (36) bloque -> . L_CURLY_BRACKET bloquep R_CURLY_BRACKET

    L_CURLY_BRACKET shift and go to state 41

    bloque                         shift and go to state 40

state 35

    (27) funcionp -> tipoRetorno ID create_func_scope L_PARENTHESIS parametro . R_PARENTHESIS var bloque funcion

    R_PARENTHESIS   shift and go to state 42


state 36

    (29) parametro -> tipo . ID save_param parametrop

    ID              shift and go to state 43


state 37

    (30) parametro -> empty .

    R_PARENTHESIS   reduce using rule 30 (parametro -> empty .)


state 38

    (8) varp -> tipo tipo_seen COLON ID variable_seen . varppp varpp delete_type SEMICOLON varpppp
    (15) varppp -> . dimDeclare
    (16) varppp -> . dimDeclare dimDeclare
    (17) varppp -> . empty
    (20) dimDeclare -> . L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET
    (121) empty -> .

    L_SQUARE_BRACKET shift and go to state 47
    COMMA           reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)

    varppp                         shift and go to state 44
    dimDeclare                     shift and go to state 45
    empty                          shift and go to state 46

state 39

    (9) varp -> tipo tipo_seen COLON ID error . varppp varpp delete_type SEMICOLON varpppp
    (15) varppp -> . dimDeclare
    (16) varppp -> . dimDeclare dimDeclare
    (17) varppp -> . empty
    (20) dimDeclare -> . L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET
    (121) empty -> .

    L_SQUARE_BRACKET shift and go to state 47
    COMMA           reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)

    varppp                         shift and go to state 48
    dimDeclare                     shift and go to state 45
    empty                          shift and go to state 46

state 40

    (2) programa -> PROGRAMA ID SEMICOLON jump var funcion clear_scope PRINCIPAL update_jump L_PARENTHESIS R_PARENTHESIS bloque . EOF

    EOF             shift and go to state 49


state 41

    (36) bloque -> L_CURLY_BRACKET . bloquep R_CURLY_BRACKET
    (37) bloquep -> . estatuto bloquep
    (38) bloquep -> . empty
    (39) estatuto -> . asignacion
    (40) estatuto -> . funcionVacia
    (41) estatuto -> . regresa
    (42) estatuto -> . lectura
    (43) estatuto -> . escritura
    (44) estatuto -> . decision
    (45) estatuto -> . cicloCondicional
    (46) estatuto -> . cicloNoCondicional
    (121) empty -> .
    (47) asignacion -> . ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON
    (97) funcionVacia -> . ID set_func_scope L_PARENTHESIS llamadaFuncionp R_PARENTHESIS SEMICOLON
    (99) regresa -> . REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON
    (100) lectura -> . LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON
    (104) escritura -> . ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON
    (109) decision -> . SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp
    (115) cicloCondicional -> . MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle
    (118) cicloNoCondicional -> . DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle

    R_CURLY_BRACKET reduce using rule 121 (empty -> .)
    ID              shift and go to state 61
    REGRESA         shift and go to state 62
    LECTURA         shift and go to state 63
    ESCRIBE         shift and go to state 64
    SI              shift and go to state 65
    MIENTRAS        shift and go to state 66
    DESDE           shift and go to state 67

    bloquep                        shift and go to state 50
    estatuto                       shift and go to state 51
    empty                          shift and go to state 52
    asignacion                     shift and go to state 53
    funcionVacia                   shift and go to state 54
    regresa                        shift and go to state 55
    lectura                        shift and go to state 56
    escritura                      shift and go to state 57
    decision                       shift and go to state 58
    cicloCondicional               shift and go to state 59
    cicloNoCondicional             shift and go to state 60

state 42

    (27) funcionp -> tipoRetorno ID create_func_scope L_PARENTHESIS parametro R_PARENTHESIS . var bloque funcion
    (5) var -> . VAR var_seen varp
    (6) var -> . empty
    (121) empty -> .

    VAR             shift and go to state 8
    L_CURLY_BRACKET reduce using rule 121 (empty -> .)

    var                            shift and go to state 68
    empty                          shift and go to state 9

state 43

    (29) parametro -> tipo ID . save_param parametrop
    (31) save_param -> .

    COMMA           reduce using rule 31 (save_param -> .)
    R_PARENTHESIS   reduce using rule 31 (save_param -> .)

    save_param                     shift and go to state 69

state 44

    (8) varp -> tipo tipo_seen COLON ID variable_seen varppp . varpp delete_type SEMICOLON varpppp
    (13) varpp -> . COMMA ID variable_seen varppp varpp
    (14) varpp -> . empty
    (121) empty -> .

    COMMA           shift and go to state 71
    SEMICOLON       reduce using rule 121 (empty -> .)

    varpp                          shift and go to state 70
    empty                          shift and go to state 72

state 45

    (15) varppp -> dimDeclare .
    (16) varppp -> dimDeclare . dimDeclare
    (20) dimDeclare -> . L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET

    COMMA           reduce using rule 15 (varppp -> dimDeclare .)
    SEMICOLON       reduce using rule 15 (varppp -> dimDeclare .)
    L_SQUARE_BRACKET shift and go to state 47

    dimDeclare                     shift and go to state 73

state 46

    (17) varppp -> empty .

    COMMA           reduce using rule 17 (varppp -> empty .)
    SEMICOLON       reduce using rule 17 (varppp -> empty .)


state 47

    (20) dimDeclare -> L_SQUARE_BRACKET . CTE_INT R_SQUARE_BRACKET

    CTE_INT         shift and go to state 74


state 48

    (9) varp -> tipo tipo_seen COLON ID error varppp . varpp delete_type SEMICOLON varpppp
    (13) varpp -> . COMMA ID variable_seen varppp varpp
    (14) varpp -> . empty
    (121) empty -> .

    COMMA           shift and go to state 71
    SEMICOLON       reduce using rule 121 (empty -> .)

    varpp                          shift and go to state 75
    empty                          shift and go to state 72

state 49

    (2) programa -> PROGRAMA ID SEMICOLON jump var funcion clear_scope PRINCIPAL update_jump L_PARENTHESIS R_PARENTHESIS bloque EOF .

    $end            reduce using rule 2 (programa -> PROGRAMA ID SEMICOLON jump var funcion clear_scope PRINCIPAL update_jump L_PARENTHESIS R_PARENTHESIS bloque EOF .)


state 50

    (36) bloque -> L_CURLY_BRACKET bloquep . R_CURLY_BRACKET

    R_CURLY_BRACKET shift and go to state 76


state 51

    (37) bloquep -> estatuto . bloquep
    (37) bloquep -> . estatuto bloquep
    (38) bloquep -> . empty
    (39) estatuto -> . asignacion
    (40) estatuto -> . funcionVacia
    (41) estatuto -> . regresa
    (42) estatuto -> . lectura
    (43) estatuto -> . escritura
    (44) estatuto -> . decision
    (45) estatuto -> . cicloCondicional
    (46) estatuto -> . cicloNoCondicional
    (121) empty -> .
    (47) asignacion -> . ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON
    (97) funcionVacia -> . ID set_func_scope L_PARENTHESIS llamadaFuncionp R_PARENTHESIS SEMICOLON
    (99) regresa -> . REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON
    (100) lectura -> . LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON
    (104) escritura -> . ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON
    (109) decision -> . SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp
    (115) cicloCondicional -> . MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle
    (118) cicloNoCondicional -> . DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle

    R_CURLY_BRACKET reduce using rule 121 (empty -> .)
    ID              shift and go to state 61
    REGRESA         shift and go to state 62
    LECTURA         shift and go to state 63
    ESCRIBE         shift and go to state 64
    SI              shift and go to state 65
    MIENTRAS        shift and go to state 66
    DESDE           shift and go to state 67

    estatuto                       shift and go to state 51
    bloquep                        shift and go to state 77
    empty                          shift and go to state 52
    asignacion                     shift and go to state 53
    funcionVacia                   shift and go to state 54
    regresa                        shift and go to state 55
    lectura                        shift and go to state 56
    escritura                      shift and go to state 57
    decision                       shift and go to state 58
    cicloCondicional               shift and go to state 59
    cicloNoCondicional             shift and go to state 60

state 52

    (38) bloquep -> empty .

    R_CURLY_BRACKET reduce using rule 38 (bloquep -> empty .)


state 53

    (39) estatuto -> asignacion .

    ID              reduce using rule 39 (estatuto -> asignacion .)
    REGRESA         reduce using rule 39 (estatuto -> asignacion .)
    LECTURA         reduce using rule 39 (estatuto -> asignacion .)
    ESCRIBE         reduce using rule 39 (estatuto -> asignacion .)
    SI              reduce using rule 39 (estatuto -> asignacion .)
    MIENTRAS        reduce using rule 39 (estatuto -> asignacion .)
    DESDE           reduce using rule 39 (estatuto -> asignacion .)
    R_CURLY_BRACKET reduce using rule 39 (estatuto -> asignacion .)


state 54

    (40) estatuto -> funcionVacia .

    ID              reduce using rule 40 (estatuto -> funcionVacia .)
    REGRESA         reduce using rule 40 (estatuto -> funcionVacia .)
    LECTURA         reduce using rule 40 (estatuto -> funcionVacia .)
    ESCRIBE         reduce using rule 40 (estatuto -> funcionVacia .)
    SI              reduce using rule 40 (estatuto -> funcionVacia .)
    MIENTRAS        reduce using rule 40 (estatuto -> funcionVacia .)
    DESDE           reduce using rule 40 (estatuto -> funcionVacia .)
    R_CURLY_BRACKET reduce using rule 40 (estatuto -> funcionVacia .)


state 55

    (41) estatuto -> regresa .

    ID              reduce using rule 41 (estatuto -> regresa .)
    REGRESA         reduce using rule 41 (estatuto -> regresa .)
    LECTURA         reduce using rule 41 (estatuto -> regresa .)
    ESCRIBE         reduce using rule 41 (estatuto -> regresa .)
    SI              reduce using rule 41 (estatuto -> regresa .)
    MIENTRAS        reduce using rule 41 (estatuto -> regresa .)
    DESDE           reduce using rule 41 (estatuto -> regresa .)
    R_CURLY_BRACKET reduce using rule 41 (estatuto -> regresa .)


state 56

    (42) estatuto -> lectura .

    ID              reduce using rule 42 (estatuto -> lectura .)
    REGRESA         reduce using rule 42 (estatuto -> lectura .)
    LECTURA         reduce using rule 42 (estatuto -> lectura .)
    ESCRIBE         reduce using rule 42 (estatuto -> lectura .)
    SI              reduce using rule 42 (estatuto -> lectura .)
    MIENTRAS        reduce using rule 42 (estatuto -> lectura .)
    DESDE           reduce using rule 42 (estatuto -> lectura .)
    R_CURLY_BRACKET reduce using rule 42 (estatuto -> lectura .)


state 57

    (43) estatuto -> escritura .

    ID              reduce using rule 43 (estatuto -> escritura .)
    REGRESA         reduce using rule 43 (estatuto -> escritura .)
    LECTURA         reduce using rule 43 (estatuto -> escritura .)
    ESCRIBE         reduce using rule 43 (estatuto -> escritura .)
    SI              reduce using rule 43 (estatuto -> escritura .)
    MIENTRAS        reduce using rule 43 (estatuto -> escritura .)
    DESDE           reduce using rule 43 (estatuto -> escritura .)
    R_CURLY_BRACKET reduce using rule 43 (estatuto -> escritura .)


state 58

    (44) estatuto -> decision .

    ID              reduce using rule 44 (estatuto -> decision .)
    REGRESA         reduce using rule 44 (estatuto -> decision .)
    LECTURA         reduce using rule 44 (estatuto -> decision .)
    ESCRIBE         reduce using rule 44 (estatuto -> decision .)
    SI              reduce using rule 44 (estatuto -> decision .)
    MIENTRAS        reduce using rule 44 (estatuto -> decision .)
    DESDE           reduce using rule 44 (estatuto -> decision .)
    R_CURLY_BRACKET reduce using rule 44 (estatuto -> decision .)


state 59

    (45) estatuto -> cicloCondicional .

    ID              reduce using rule 45 (estatuto -> cicloCondicional .)
    REGRESA         reduce using rule 45 (estatuto -> cicloCondicional .)
    LECTURA         reduce using rule 45 (estatuto -> cicloCondicional .)
    ESCRIBE         reduce using rule 45 (estatuto -> cicloCondicional .)
    SI              reduce using rule 45 (estatuto -> cicloCondicional .)
    MIENTRAS        reduce using rule 45 (estatuto -> cicloCondicional .)
    DESDE           reduce using rule 45 (estatuto -> cicloCondicional .)
    R_CURLY_BRACKET reduce using rule 45 (estatuto -> cicloCondicional .)


state 60

    (46) estatuto -> cicloNoCondicional .

    ID              reduce using rule 46 (estatuto -> cicloNoCondicional .)
    REGRESA         reduce using rule 46 (estatuto -> cicloNoCondicional .)
    LECTURA         reduce using rule 46 (estatuto -> cicloNoCondicional .)
    ESCRIBE         reduce using rule 46 (estatuto -> cicloNoCondicional .)
    SI              reduce using rule 46 (estatuto -> cicloNoCondicional .)
    MIENTRAS        reduce using rule 46 (estatuto -> cicloNoCondicional .)
    DESDE           reduce using rule 46 (estatuto -> cicloNoCondicional .)
    R_CURLY_BRACKET reduce using rule 46 (estatuto -> cicloNoCondicional .)


state 61

    (47) asignacion -> ID . operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON
    (97) funcionVacia -> ID . set_func_scope L_PARENTHESIS llamadaFuncionp R_PARENTHESIS SEMICOLON
    (48) operand_seen -> .
    (98) set_func_scope -> .

    L_SQUARE_BRACKET reduce using rule 48 (operand_seen -> .)
    ASSIGN          reduce using rule 48 (operand_seen -> .)
    L_PARENTHESIS   reduce using rule 98 (set_func_scope -> .)

    operand_seen                   shift and go to state 78
    set_func_scope                 shift and go to state 79

state 62

    (99) regresa -> REGRESA . L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON

    L_PARENTHESIS   shift and go to state 80


state 63

    (100) lectura -> LECTURA . L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON

    L_PARENTHESIS   shift and go to state 81


state 64

    (104) escritura -> ESCRIBE . L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON

    L_PARENTHESIS   shift and go to state 82


state 65

    (109) decision -> SI . L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp

    L_PARENTHESIS   shift and go to state 83


state 66

    (115) cicloCondicional -> MIENTRAS . jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle
    (116) jump_cycle -> .

    L_PARENTHESIS   reduce using rule 116 (jump_cycle -> .)

    jump_cycle                     shift and go to state 84

state 67

    (118) cicloNoCondicional -> DESDE . ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle

    ID              shift and go to state 85


state 68

    (27) funcionp -> tipoRetorno ID create_func_scope L_PARENTHESIS parametro R_PARENTHESIS var . bloque funcion
    (36) bloque -> . L_CURLY_BRACKET bloquep R_CURLY_BRACKET

    L_CURLY_BRACKET shift and go to state 41

    bloque                         shift and go to state 86

state 69

    (29) parametro -> tipo ID save_param . parametrop
    (32) parametrop -> . COMMA tipo ID save_param parametrop
    (33) parametrop -> . empty
    (121) empty -> .

    COMMA           shift and go to state 88
    R_PARENTHESIS   reduce using rule 121 (empty -> .)

    parametrop                     shift and go to state 87
    empty                          shift and go to state 89

state 70

    (8) varp -> tipo tipo_seen COLON ID variable_seen varppp varpp . delete_type SEMICOLON varpppp
    (12) delete_type -> .

    SEMICOLON       reduce using rule 12 (delete_type -> .)

    delete_type                    shift and go to state 90

state 71

    (13) varpp -> COMMA . ID variable_seen varppp varpp

    ID              shift and go to state 91


state 72

    (14) varpp -> empty .

    SEMICOLON       reduce using rule 14 (varpp -> empty .)


state 73

    (16) varppp -> dimDeclare dimDeclare .

    COMMA           reduce using rule 16 (varppp -> dimDeclare dimDeclare .)
    SEMICOLON       reduce using rule 16 (varppp -> dimDeclare dimDeclare .)


state 74

    (20) dimDeclare -> L_SQUARE_BRACKET CTE_INT . R_SQUARE_BRACKET

    R_SQUARE_BRACKET shift and go to state 92


state 75

    (9) varp -> tipo tipo_seen COLON ID error varppp varpp . delete_type SEMICOLON varpppp
    (12) delete_type -> .

    SEMICOLON       reduce using rule 12 (delete_type -> .)

    delete_type                    shift and go to state 93

state 76

    (36) bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .

    EOF             reduce using rule 36 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    FUNCION         reduce using rule 36 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    PRINCIPAL       reduce using rule 36 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    SINO            reduce using rule 36 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    ID              reduce using rule 36 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    REGRESA         reduce using rule 36 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    LECTURA         reduce using rule 36 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    ESCRIBE         reduce using rule 36 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    SI              reduce using rule 36 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    MIENTRAS        reduce using rule 36 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    DESDE           reduce using rule 36 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    R_CURLY_BRACKET reduce using rule 36 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)


state 77

    (37) bloquep -> estatuto bloquep .

    R_CURLY_BRACKET reduce using rule 37 (bloquep -> estatuto bloquep .)


state 78

    (47) asignacion -> ID operand_seen . dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON
    (50) dimId -> . dim
    (51) dimId -> . dim dim
    (52) dimId -> . empty
    (53) dim -> . L_SQUARE_BRACKET expresion R_SQUARE_BRACKET
    (121) empty -> .

    L_SQUARE_BRACKET shift and go to state 97
    ASSIGN          reduce using rule 121 (empty -> .)

    dimId                          shift and go to state 94
    dim                            shift and go to state 95
    empty                          shift and go to state 96

state 79

    (97) funcionVacia -> ID set_func_scope . L_PARENTHESIS llamadaFuncionp R_PARENTHESIS SEMICOLON

    L_PARENTHESIS   shift and go to state 98


state 80

    (99) regresa -> REGRESA L_PARENTHESIS . expresion R_PARENTHESIS SEMICOLON
    (54) expresion -> . relacional apply_operation_expresion expresionp
    (55) expresion -> . NOT relacional expresionp
    (60) relacional -> . aritmetica apply_operation_relational relacionalp
    (69) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (74) factor -> . matriz apply_operation_factor factorp
    (80) matriz -> . cte matrizp
    (85) cte -> . CTE_INT
    (86) cte -> . CTE_FLOAT
    (87) cte -> . CTE_CHAR
    (88) cte -> . llamadaFuncion
    (89) cte -> . ID operand_seen dimId
    (90) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (91) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    NOT             shift and go to state 102
    CTE_INT         shift and go to state 107
    CTE_FLOAT       shift and go to state 108
    CTE_CHAR        shift and go to state 109
    ID              shift and go to state 111
    L_PARENTHESIS   shift and go to state 99

    expresion                      shift and go to state 100
    relacional                     shift and go to state 101
    aritmetica                     shift and go to state 103
    factor                         shift and go to state 104
    matriz                         shift and go to state 105
    cte                            shift and go to state 106
    llamadaFuncion                 shift and go to state 110

state 81

    (100) lectura -> LECTURA L_PARENTHESIS . lecturap R_PARENTHESIS SEMICOLON
    (101) lecturap -> . ID dimId lecturapp

    ID              shift and go to state 113

    lecturap                       shift and go to state 112

state 82

    (104) escritura -> ESCRIBE L_PARENTHESIS . escriturap R_PARENTHESIS SEMICOLON
    (105) escriturap -> . LETRERO escriturapp
    (106) escriturap -> . expresion escriturapp
    (54) expresion -> . relacional apply_operation_expresion expresionp
    (55) expresion -> . NOT relacional expresionp
    (60) relacional -> . aritmetica apply_operation_relational relacionalp
    (69) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (74) factor -> . matriz apply_operation_factor factorp
    (80) matriz -> . cte matrizp
    (85) cte -> . CTE_INT
    (86) cte -> . CTE_FLOAT
    (87) cte -> . CTE_CHAR
    (88) cte -> . llamadaFuncion
    (89) cte -> . ID operand_seen dimId
    (90) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (91) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    LETRERO         shift and go to state 115
    NOT             shift and go to state 102
    CTE_INT         shift and go to state 107
    CTE_FLOAT       shift and go to state 108
    CTE_CHAR        shift and go to state 109
    ID              shift and go to state 111
    L_PARENTHESIS   shift and go to state 99

    escriturap                     shift and go to state 114
    expresion                      shift and go to state 116
    relacional                     shift and go to state 101
    aritmetica                     shift and go to state 103
    factor                         shift and go to state 104
    matriz                         shift and go to state 105
    cte                            shift and go to state 106
    llamadaFuncion                 shift and go to state 110

state 83

    (109) decision -> SI L_PARENTHESIS . expresion R_PARENTHESIS jump_false HAZ bloque decisionp
    (54) expresion -> . relacional apply_operation_expresion expresionp
    (55) expresion -> . NOT relacional expresionp
    (60) relacional -> . aritmetica apply_operation_relational relacionalp
    (69) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (74) factor -> . matriz apply_operation_factor factorp
    (80) matriz -> . cte matrizp
    (85) cte -> . CTE_INT
    (86) cte -> . CTE_FLOAT
    (87) cte -> . CTE_CHAR
    (88) cte -> . llamadaFuncion
    (89) cte -> . ID operand_seen dimId
    (90) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (91) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    NOT             shift and go to state 102
    CTE_INT         shift and go to state 107
    CTE_FLOAT       shift and go to state 108
    CTE_CHAR        shift and go to state 109
    ID              shift and go to state 111
    L_PARENTHESIS   shift and go to state 99

    expresion                      shift and go to state 117
    relacional                     shift and go to state 101
    aritmetica                     shift and go to state 103
    factor                         shift and go to state 104
    matriz                         shift and go to state 105
    cte                            shift and go to state 106
    llamadaFuncion                 shift and go to state 110

state 84

    (115) cicloCondicional -> MIENTRAS jump_cycle . L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle

    L_PARENTHESIS   shift and go to state 118


state 85

    (118) cicloNoCondicional -> DESDE ID . operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle
    (48) operand_seen -> .

    L_SQUARE_BRACKET reduce using rule 48 (operand_seen -> .)
    ASSIGN          reduce using rule 48 (operand_seen -> .)

    operand_seen                   shift and go to state 119

state 86

    (27) funcionp -> tipoRetorno ID create_func_scope L_PARENTHESIS parametro R_PARENTHESIS var bloque . funcion
    (24) funcion -> . FUNCION funcionp
    (25) funcion -> . FUNCION error
    (26) funcion -> . empty
    (121) empty -> .

    FUNCION         shift and go to state 11
    PRINCIPAL       reduce using rule 121 (empty -> .)

    funcion                        shift and go to state 120
    empty                          shift and go to state 12

state 87

    (29) parametro -> tipo ID save_param parametrop .

    R_PARENTHESIS   reduce using rule 29 (parametro -> tipo ID save_param parametrop .)


state 88

    (32) parametrop -> COMMA . tipo ID save_param parametrop
    (21) tipo -> . INT
    (22) tipo -> . FLOAT
    (23) tipo -> . CHAR

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22

    tipo                           shift and go to state 121

state 89

    (33) parametrop -> empty .

    R_PARENTHESIS   reduce using rule 33 (parametrop -> empty .)


state 90

    (8) varp -> tipo tipo_seen COLON ID variable_seen varppp varpp delete_type . SEMICOLON varpppp

    SEMICOLON       shift and go to state 122


state 91

    (13) varpp -> COMMA ID . variable_seen varppp varpp
    (11) variable_seen -> .

    L_SQUARE_BRACKET reduce using rule 11 (variable_seen -> .)
    COMMA           reduce using rule 11 (variable_seen -> .)
    SEMICOLON       reduce using rule 11 (variable_seen -> .)

    variable_seen                  shift and go to state 123

state 92

    (20) dimDeclare -> L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET .

    L_SQUARE_BRACKET reduce using rule 20 (dimDeclare -> L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET .)
    COMMA           reduce using rule 20 (dimDeclare -> L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET .)
    SEMICOLON       reduce using rule 20 (dimDeclare -> L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET .)


state 93

    (9) varp -> tipo tipo_seen COLON ID error varppp varpp delete_type . SEMICOLON varpppp

    SEMICOLON       shift and go to state 124


state 94

    (47) asignacion -> ID operand_seen dimId . ASSIGN operation_seen expresion apply_operation_assign SEMICOLON

    ASSIGN          shift and go to state 125


state 95

    (50) dimId -> dim .
    (51) dimId -> dim . dim
    (53) dim -> . L_SQUARE_BRACKET expresion R_SQUARE_BRACKET

    ASSIGN          reduce using rule 50 (dimId -> dim .)
    COMMA           reduce using rule 50 (dimId -> dim .)
    R_PARENTHESIS   reduce using rule 50 (dimId -> dim .)
    DETERMINANT     reduce using rule 50 (dimId -> dim .)
    TRANSPOSED      reduce using rule 50 (dimId -> dim .)
    INVERSE         reduce using rule 50 (dimId -> dim .)
    MULTIPLY        reduce using rule 50 (dimId -> dim .)
    DIVIDE          reduce using rule 50 (dimId -> dim .)
    SUM             reduce using rule 50 (dimId -> dim .)
    SUBTRACT        reduce using rule 50 (dimId -> dim .)
    EQUALS          reduce using rule 50 (dimId -> dim .)
    NOT_EQUAL       reduce using rule 50 (dimId -> dim .)
    LESS_THAN       reduce using rule 50 (dimId -> dim .)
    LESS_THAN_EQUAL reduce using rule 50 (dimId -> dim .)
    GREATER_THAN    reduce using rule 50 (dimId -> dim .)
    GREATER_THAN_EQUAL reduce using rule 50 (dimId -> dim .)
    AND             reduce using rule 50 (dimId -> dim .)
    OR              reduce using rule 50 (dimId -> dim .)
    R_SQUARE_BRACKET reduce using rule 50 (dimId -> dim .)
    NOT             reduce using rule 50 (dimId -> dim .)
    CTE_INT         reduce using rule 50 (dimId -> dim .)
    CTE_FLOAT       reduce using rule 50 (dimId -> dim .)
    CTE_CHAR        reduce using rule 50 (dimId -> dim .)
    ID              reduce using rule 50 (dimId -> dim .)
    L_PARENTHESIS   reduce using rule 50 (dimId -> dim .)
    SEMICOLON       reduce using rule 50 (dimId -> dim .)
    HASTA           reduce using rule 50 (dimId -> dim .)
    HACER           reduce using rule 50 (dimId -> dim .)
    L_SQUARE_BRACKET shift and go to state 97

    dim                            shift and go to state 126

state 96

    (52) dimId -> empty .

    ASSIGN          reduce using rule 52 (dimId -> empty .)
    COMMA           reduce using rule 52 (dimId -> empty .)
    R_PARENTHESIS   reduce using rule 52 (dimId -> empty .)
    DETERMINANT     reduce using rule 52 (dimId -> empty .)
    TRANSPOSED      reduce using rule 52 (dimId -> empty .)
    INVERSE         reduce using rule 52 (dimId -> empty .)
    MULTIPLY        reduce using rule 52 (dimId -> empty .)
    DIVIDE          reduce using rule 52 (dimId -> empty .)
    SUM             reduce using rule 52 (dimId -> empty .)
    SUBTRACT        reduce using rule 52 (dimId -> empty .)
    EQUALS          reduce using rule 52 (dimId -> empty .)
    NOT_EQUAL       reduce using rule 52 (dimId -> empty .)
    LESS_THAN       reduce using rule 52 (dimId -> empty .)
    LESS_THAN_EQUAL reduce using rule 52 (dimId -> empty .)
    GREATER_THAN    reduce using rule 52 (dimId -> empty .)
    GREATER_THAN_EQUAL reduce using rule 52 (dimId -> empty .)
    AND             reduce using rule 52 (dimId -> empty .)
    OR              reduce using rule 52 (dimId -> empty .)
    R_SQUARE_BRACKET reduce using rule 52 (dimId -> empty .)
    NOT             reduce using rule 52 (dimId -> empty .)
    CTE_INT         reduce using rule 52 (dimId -> empty .)
    CTE_FLOAT       reduce using rule 52 (dimId -> empty .)
    CTE_CHAR        reduce using rule 52 (dimId -> empty .)
    ID              reduce using rule 52 (dimId -> empty .)
    L_PARENTHESIS   reduce using rule 52 (dimId -> empty .)
    SEMICOLON       reduce using rule 52 (dimId -> empty .)
    HASTA           reduce using rule 52 (dimId -> empty .)
    HACER           reduce using rule 52 (dimId -> empty .)


state 97

    (53) dim -> L_SQUARE_BRACKET . expresion R_SQUARE_BRACKET
    (54) expresion -> . relacional apply_operation_expresion expresionp
    (55) expresion -> . NOT relacional expresionp
    (60) relacional -> . aritmetica apply_operation_relational relacionalp
    (69) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (74) factor -> . matriz apply_operation_factor factorp
    (80) matriz -> . cte matrizp
    (85) cte -> . CTE_INT
    (86) cte -> . CTE_FLOAT
    (87) cte -> . CTE_CHAR
    (88) cte -> . llamadaFuncion
    (89) cte -> . ID operand_seen dimId
    (90) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (91) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    NOT             shift and go to state 102
    CTE_INT         shift and go to state 107
    CTE_FLOAT       shift and go to state 108
    CTE_CHAR        shift and go to state 109
    ID              shift and go to state 111
    L_PARENTHESIS   shift and go to state 99

    expresion                      shift and go to state 127
    relacional                     shift and go to state 101
    aritmetica                     shift and go to state 103
    factor                         shift and go to state 104
    matriz                         shift and go to state 105
    cte                            shift and go to state 106
    llamadaFuncion                 shift and go to state 110

state 98

    (97) funcionVacia -> ID set_func_scope L_PARENTHESIS . llamadaFuncionp R_PARENTHESIS SEMICOLON
    (92) llamadaFuncionp -> . expresion verify_parameter llamadaFuncionpp
    (93) llamadaFuncionp -> . empty
    (54) expresion -> . relacional apply_operation_expresion expresionp
    (55) expresion -> . NOT relacional expresionp
    (121) empty -> .
    (60) relacional -> . aritmetica apply_operation_relational relacionalp
    (69) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (74) factor -> . matriz apply_operation_factor factorp
    (80) matriz -> . cte matrizp
    (85) cte -> . CTE_INT
    (86) cte -> . CTE_FLOAT
    (87) cte -> . CTE_CHAR
    (88) cte -> . llamadaFuncion
    (89) cte -> . ID operand_seen dimId
    (90) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (91) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    NOT             shift and go to state 102
    R_PARENTHESIS   reduce using rule 121 (empty -> .)
    CTE_INT         shift and go to state 107
    CTE_FLOAT       shift and go to state 108
    CTE_CHAR        shift and go to state 109
    ID              shift and go to state 111
    L_PARENTHESIS   shift and go to state 99

    llamadaFuncionp                shift and go to state 128
    expresion                      shift and go to state 129
    empty                          shift and go to state 130
    relacional                     shift and go to state 101
    aritmetica                     shift and go to state 103
    factor                         shift and go to state 104
    matriz                         shift and go to state 105
    cte                            shift and go to state 106
    llamadaFuncion                 shift and go to state 110

state 99

    (90) cte -> L_PARENTHESIS . operation_seen expresion R_PARENTHESIS operation_seen
    (79) operation_seen -> .

    NOT             reduce using rule 79 (operation_seen -> .)
    CTE_INT         reduce using rule 79 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 79 (operation_seen -> .)
    CTE_CHAR        reduce using rule 79 (operation_seen -> .)
    ID              reduce using rule 79 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 79 (operation_seen -> .)

    operation_seen                 shift and go to state 131

state 100

    (99) regresa -> REGRESA L_PARENTHESIS expresion . R_PARENTHESIS SEMICOLON

    R_PARENTHESIS   shift and go to state 132


state 101

    (54) expresion -> relacional . apply_operation_expresion expresionp
    (59) apply_operation_expresion -> .

    AND             reduce using rule 59 (apply_operation_expresion -> .)
    OR              reduce using rule 59 (apply_operation_expresion -> .)
    R_PARENTHESIS   reduce using rule 59 (apply_operation_expresion -> .)
    COMMA           reduce using rule 59 (apply_operation_expresion -> .)
    R_SQUARE_BRACKET reduce using rule 59 (apply_operation_expresion -> .)
    NOT             reduce using rule 59 (apply_operation_expresion -> .)
    CTE_INT         reduce using rule 59 (apply_operation_expresion -> .)
    CTE_FLOAT       reduce using rule 59 (apply_operation_expresion -> .)
    CTE_CHAR        reduce using rule 59 (apply_operation_expresion -> .)
    ID              reduce using rule 59 (apply_operation_expresion -> .)
    L_PARENTHESIS   reduce using rule 59 (apply_operation_expresion -> .)
    SEMICOLON       reduce using rule 59 (apply_operation_expresion -> .)
    HASTA           reduce using rule 59 (apply_operation_expresion -> .)
    HACER           reduce using rule 59 (apply_operation_expresion -> .)

    apply_operation_expresion      shift and go to state 133

state 102

    (55) expresion -> NOT . relacional expresionp
    (60) relacional -> . aritmetica apply_operation_relational relacionalp
    (69) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (74) factor -> . matriz apply_operation_factor factorp
    (80) matriz -> . cte matrizp
    (85) cte -> . CTE_INT
    (86) cte -> . CTE_FLOAT
    (87) cte -> . CTE_CHAR
    (88) cte -> . llamadaFuncion
    (89) cte -> . ID operand_seen dimId
    (90) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (91) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    CTE_INT         shift and go to state 107
    CTE_FLOAT       shift and go to state 108
    CTE_CHAR        shift and go to state 109
    ID              shift and go to state 111
    L_PARENTHESIS   shift and go to state 99

    relacional                     shift and go to state 134
    aritmetica                     shift and go to state 103
    factor                         shift and go to state 104
    matriz                         shift and go to state 105
    cte                            shift and go to state 106
    llamadaFuncion                 shift and go to state 110

state 103

    (60) relacional -> aritmetica . apply_operation_relational relacionalp
    (68) apply_operation_relational -> .

    EQUALS          reduce using rule 68 (apply_operation_relational -> .)
    NOT_EQUAL       reduce using rule 68 (apply_operation_relational -> .)
    LESS_THAN       reduce using rule 68 (apply_operation_relational -> .)
    LESS_THAN_EQUAL reduce using rule 68 (apply_operation_relational -> .)
    GREATER_THAN    reduce using rule 68 (apply_operation_relational -> .)
    GREATER_THAN_EQUAL reduce using rule 68 (apply_operation_relational -> .)
    AND             reduce using rule 68 (apply_operation_relational -> .)
    OR              reduce using rule 68 (apply_operation_relational -> .)
    R_PARENTHESIS   reduce using rule 68 (apply_operation_relational -> .)
    COMMA           reduce using rule 68 (apply_operation_relational -> .)
    R_SQUARE_BRACKET reduce using rule 68 (apply_operation_relational -> .)
    NOT             reduce using rule 68 (apply_operation_relational -> .)
    CTE_INT         reduce using rule 68 (apply_operation_relational -> .)
    CTE_FLOAT       reduce using rule 68 (apply_operation_relational -> .)
    CTE_CHAR        reduce using rule 68 (apply_operation_relational -> .)
    ID              reduce using rule 68 (apply_operation_relational -> .)
    L_PARENTHESIS   reduce using rule 68 (apply_operation_relational -> .)
    SEMICOLON       reduce using rule 68 (apply_operation_relational -> .)
    HASTA           reduce using rule 68 (apply_operation_relational -> .)
    HACER           reduce using rule 68 (apply_operation_relational -> .)

    apply_operation_relational     shift and go to state 135

state 104

    (69) aritmetica -> factor . apply_operation_aritmetica aritmeticap
    (73) apply_operation_aritmetica -> .

    SUM             reduce using rule 73 (apply_operation_aritmetica -> .)
    SUBTRACT        reduce using rule 73 (apply_operation_aritmetica -> .)
    EQUALS          reduce using rule 73 (apply_operation_aritmetica -> .)
    NOT_EQUAL       reduce using rule 73 (apply_operation_aritmetica -> .)
    LESS_THAN       reduce using rule 73 (apply_operation_aritmetica -> .)
    LESS_THAN_EQUAL reduce using rule 73 (apply_operation_aritmetica -> .)
    GREATER_THAN    reduce using rule 73 (apply_operation_aritmetica -> .)
    GREATER_THAN_EQUAL reduce using rule 73 (apply_operation_aritmetica -> .)
    AND             reduce using rule 73 (apply_operation_aritmetica -> .)
    OR              reduce using rule 73 (apply_operation_aritmetica -> .)
    R_PARENTHESIS   reduce using rule 73 (apply_operation_aritmetica -> .)
    COMMA           reduce using rule 73 (apply_operation_aritmetica -> .)
    R_SQUARE_BRACKET reduce using rule 73 (apply_operation_aritmetica -> .)
    NOT             reduce using rule 73 (apply_operation_aritmetica -> .)
    CTE_INT         reduce using rule 73 (apply_operation_aritmetica -> .)
    CTE_FLOAT       reduce using rule 73 (apply_operation_aritmetica -> .)
    CTE_CHAR        reduce using rule 73 (apply_operation_aritmetica -> .)
    ID              reduce using rule 73 (apply_operation_aritmetica -> .)
    L_PARENTHESIS   reduce using rule 73 (apply_operation_aritmetica -> .)
    SEMICOLON       reduce using rule 73 (apply_operation_aritmetica -> .)
    HASTA           reduce using rule 73 (apply_operation_aritmetica -> .)
    HACER           reduce using rule 73 (apply_operation_aritmetica -> .)

    apply_operation_aritmetica     shift and go to state 136

state 105

    (74) factor -> matriz . apply_operation_factor factorp
    (78) apply_operation_factor -> .

    MULTIPLY        reduce using rule 78 (apply_operation_factor -> .)
    DIVIDE          reduce using rule 78 (apply_operation_factor -> .)
    SUM             reduce using rule 78 (apply_operation_factor -> .)
    SUBTRACT        reduce using rule 78 (apply_operation_factor -> .)
    EQUALS          reduce using rule 78 (apply_operation_factor -> .)
    NOT_EQUAL       reduce using rule 78 (apply_operation_factor -> .)
    LESS_THAN       reduce using rule 78 (apply_operation_factor -> .)
    LESS_THAN_EQUAL reduce using rule 78 (apply_operation_factor -> .)
    GREATER_THAN    reduce using rule 78 (apply_operation_factor -> .)
    GREATER_THAN_EQUAL reduce using rule 78 (apply_operation_factor -> .)
    AND             reduce using rule 78 (apply_operation_factor -> .)
    OR              reduce using rule 78 (apply_operation_factor -> .)
    R_PARENTHESIS   reduce using rule 78 (apply_operation_factor -> .)
    COMMA           reduce using rule 78 (apply_operation_factor -> .)
    R_SQUARE_BRACKET reduce using rule 78 (apply_operation_factor -> .)
    NOT             reduce using rule 78 (apply_operation_factor -> .)
    CTE_INT         reduce using rule 78 (apply_operation_factor -> .)
    CTE_FLOAT       reduce using rule 78 (apply_operation_factor -> .)
    CTE_CHAR        reduce using rule 78 (apply_operation_factor -> .)
    ID              reduce using rule 78 (apply_operation_factor -> .)
    L_PARENTHESIS   reduce using rule 78 (apply_operation_factor -> .)
    SEMICOLON       reduce using rule 78 (apply_operation_factor -> .)
    HASTA           reduce using rule 78 (apply_operation_factor -> .)
    HACER           reduce using rule 78 (apply_operation_factor -> .)

    apply_operation_factor         shift and go to state 137

state 106

    (80) matriz -> cte . matrizp
    (81) matrizp -> . DETERMINANT
    (82) matrizp -> . TRANSPOSED
    (83) matrizp -> . INVERSE
    (84) matrizp -> . empty
    (121) empty -> .

    DETERMINANT     shift and go to state 139
    TRANSPOSED      shift and go to state 140
    INVERSE         shift and go to state 141
    MULTIPLY        reduce using rule 121 (empty -> .)
    DIVIDE          reduce using rule 121 (empty -> .)
    SUM             reduce using rule 121 (empty -> .)
    SUBTRACT        reduce using rule 121 (empty -> .)
    EQUALS          reduce using rule 121 (empty -> .)
    NOT_EQUAL       reduce using rule 121 (empty -> .)
    LESS_THAN       reduce using rule 121 (empty -> .)
    LESS_THAN_EQUAL reduce using rule 121 (empty -> .)
    GREATER_THAN    reduce using rule 121 (empty -> .)
    GREATER_THAN_EQUAL reduce using rule 121 (empty -> .)
    AND             reduce using rule 121 (empty -> .)
    OR              reduce using rule 121 (empty -> .)
    R_PARENTHESIS   reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    R_SQUARE_BRACKET reduce using rule 121 (empty -> .)
    NOT             reduce using rule 121 (empty -> .)
    CTE_INT         reduce using rule 121 (empty -> .)
    CTE_FLOAT       reduce using rule 121 (empty -> .)
    CTE_CHAR        reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)
    L_PARENTHESIS   reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    HASTA           reduce using rule 121 (empty -> .)
    HACER           reduce using rule 121 (empty -> .)

    matrizp                        shift and go to state 138
    empty                          shift and go to state 142

state 107

    (85) cte -> CTE_INT .

    DETERMINANT     reduce using rule 85 (cte -> CTE_INT .)
    TRANSPOSED      reduce using rule 85 (cte -> CTE_INT .)
    INVERSE         reduce using rule 85 (cte -> CTE_INT .)
    MULTIPLY        reduce using rule 85 (cte -> CTE_INT .)
    DIVIDE          reduce using rule 85 (cte -> CTE_INT .)
    SUM             reduce using rule 85 (cte -> CTE_INT .)
    SUBTRACT        reduce using rule 85 (cte -> CTE_INT .)
    EQUALS          reduce using rule 85 (cte -> CTE_INT .)
    NOT_EQUAL       reduce using rule 85 (cte -> CTE_INT .)
    LESS_THAN       reduce using rule 85 (cte -> CTE_INT .)
    LESS_THAN_EQUAL reduce using rule 85 (cte -> CTE_INT .)
    GREATER_THAN    reduce using rule 85 (cte -> CTE_INT .)
    GREATER_THAN_EQUAL reduce using rule 85 (cte -> CTE_INT .)
    AND             reduce using rule 85 (cte -> CTE_INT .)
    OR              reduce using rule 85 (cte -> CTE_INT .)
    R_PARENTHESIS   reduce using rule 85 (cte -> CTE_INT .)
    COMMA           reduce using rule 85 (cte -> CTE_INT .)
    R_SQUARE_BRACKET reduce using rule 85 (cte -> CTE_INT .)
    NOT             reduce using rule 85 (cte -> CTE_INT .)
    CTE_INT         reduce using rule 85 (cte -> CTE_INT .)
    CTE_FLOAT       reduce using rule 85 (cte -> CTE_INT .)
    CTE_CHAR        reduce using rule 85 (cte -> CTE_INT .)
    ID              reduce using rule 85 (cte -> CTE_INT .)
    L_PARENTHESIS   reduce using rule 85 (cte -> CTE_INT .)
    SEMICOLON       reduce using rule 85 (cte -> CTE_INT .)
    HASTA           reduce using rule 85 (cte -> CTE_INT .)
    HACER           reduce using rule 85 (cte -> CTE_INT .)


state 108

    (86) cte -> CTE_FLOAT .

    DETERMINANT     reduce using rule 86 (cte -> CTE_FLOAT .)
    TRANSPOSED      reduce using rule 86 (cte -> CTE_FLOAT .)
    INVERSE         reduce using rule 86 (cte -> CTE_FLOAT .)
    MULTIPLY        reduce using rule 86 (cte -> CTE_FLOAT .)
    DIVIDE          reduce using rule 86 (cte -> CTE_FLOAT .)
    SUM             reduce using rule 86 (cte -> CTE_FLOAT .)
    SUBTRACT        reduce using rule 86 (cte -> CTE_FLOAT .)
    EQUALS          reduce using rule 86 (cte -> CTE_FLOAT .)
    NOT_EQUAL       reduce using rule 86 (cte -> CTE_FLOAT .)
    LESS_THAN       reduce using rule 86 (cte -> CTE_FLOAT .)
    LESS_THAN_EQUAL reduce using rule 86 (cte -> CTE_FLOAT .)
    GREATER_THAN    reduce using rule 86 (cte -> CTE_FLOAT .)
    GREATER_THAN_EQUAL reduce using rule 86 (cte -> CTE_FLOAT .)
    AND             reduce using rule 86 (cte -> CTE_FLOAT .)
    OR              reduce using rule 86 (cte -> CTE_FLOAT .)
    R_PARENTHESIS   reduce using rule 86 (cte -> CTE_FLOAT .)
    COMMA           reduce using rule 86 (cte -> CTE_FLOAT .)
    R_SQUARE_BRACKET reduce using rule 86 (cte -> CTE_FLOAT .)
    NOT             reduce using rule 86 (cte -> CTE_FLOAT .)
    CTE_INT         reduce using rule 86 (cte -> CTE_FLOAT .)
    CTE_FLOAT       reduce using rule 86 (cte -> CTE_FLOAT .)
    CTE_CHAR        reduce using rule 86 (cte -> CTE_FLOAT .)
    ID              reduce using rule 86 (cte -> CTE_FLOAT .)
    L_PARENTHESIS   reduce using rule 86 (cte -> CTE_FLOAT .)
    SEMICOLON       reduce using rule 86 (cte -> CTE_FLOAT .)
    HASTA           reduce using rule 86 (cte -> CTE_FLOAT .)
    HACER           reduce using rule 86 (cte -> CTE_FLOAT .)


state 109

    (87) cte -> CTE_CHAR .

    DETERMINANT     reduce using rule 87 (cte -> CTE_CHAR .)
    TRANSPOSED      reduce using rule 87 (cte -> CTE_CHAR .)
    INVERSE         reduce using rule 87 (cte -> CTE_CHAR .)
    MULTIPLY        reduce using rule 87 (cte -> CTE_CHAR .)
    DIVIDE          reduce using rule 87 (cte -> CTE_CHAR .)
    SUM             reduce using rule 87 (cte -> CTE_CHAR .)
    SUBTRACT        reduce using rule 87 (cte -> CTE_CHAR .)
    EQUALS          reduce using rule 87 (cte -> CTE_CHAR .)
    NOT_EQUAL       reduce using rule 87 (cte -> CTE_CHAR .)
    LESS_THAN       reduce using rule 87 (cte -> CTE_CHAR .)
    LESS_THAN_EQUAL reduce using rule 87 (cte -> CTE_CHAR .)
    GREATER_THAN    reduce using rule 87 (cte -> CTE_CHAR .)
    GREATER_THAN_EQUAL reduce using rule 87 (cte -> CTE_CHAR .)
    AND             reduce using rule 87 (cte -> CTE_CHAR .)
    OR              reduce using rule 87 (cte -> CTE_CHAR .)
    R_PARENTHESIS   reduce using rule 87 (cte -> CTE_CHAR .)
    COMMA           reduce using rule 87 (cte -> CTE_CHAR .)
    R_SQUARE_BRACKET reduce using rule 87 (cte -> CTE_CHAR .)
    NOT             reduce using rule 87 (cte -> CTE_CHAR .)
    CTE_INT         reduce using rule 87 (cte -> CTE_CHAR .)
    CTE_FLOAT       reduce using rule 87 (cte -> CTE_CHAR .)
    CTE_CHAR        reduce using rule 87 (cte -> CTE_CHAR .)
    ID              reduce using rule 87 (cte -> CTE_CHAR .)
    L_PARENTHESIS   reduce using rule 87 (cte -> CTE_CHAR .)
    SEMICOLON       reduce using rule 87 (cte -> CTE_CHAR .)
    HASTA           reduce using rule 87 (cte -> CTE_CHAR .)
    HACER           reduce using rule 87 (cte -> CTE_CHAR .)


state 110

    (88) cte -> llamadaFuncion .

    DETERMINANT     reduce using rule 88 (cte -> llamadaFuncion .)
    TRANSPOSED      reduce using rule 88 (cte -> llamadaFuncion .)
    INVERSE         reduce using rule 88 (cte -> llamadaFuncion .)
    MULTIPLY        reduce using rule 88 (cte -> llamadaFuncion .)
    DIVIDE          reduce using rule 88 (cte -> llamadaFuncion .)
    SUM             reduce using rule 88 (cte -> llamadaFuncion .)
    SUBTRACT        reduce using rule 88 (cte -> llamadaFuncion .)
    EQUALS          reduce using rule 88 (cte -> llamadaFuncion .)
    NOT_EQUAL       reduce using rule 88 (cte -> llamadaFuncion .)
    LESS_THAN       reduce using rule 88 (cte -> llamadaFuncion .)
    LESS_THAN_EQUAL reduce using rule 88 (cte -> llamadaFuncion .)
    GREATER_THAN    reduce using rule 88 (cte -> llamadaFuncion .)
    GREATER_THAN_EQUAL reduce using rule 88 (cte -> llamadaFuncion .)
    AND             reduce using rule 88 (cte -> llamadaFuncion .)
    OR              reduce using rule 88 (cte -> llamadaFuncion .)
    R_PARENTHESIS   reduce using rule 88 (cte -> llamadaFuncion .)
    COMMA           reduce using rule 88 (cte -> llamadaFuncion .)
    R_SQUARE_BRACKET reduce using rule 88 (cte -> llamadaFuncion .)
    NOT             reduce using rule 88 (cte -> llamadaFuncion .)
    CTE_INT         reduce using rule 88 (cte -> llamadaFuncion .)
    CTE_FLOAT       reduce using rule 88 (cte -> llamadaFuncion .)
    CTE_CHAR        reduce using rule 88 (cte -> llamadaFuncion .)
    ID              reduce using rule 88 (cte -> llamadaFuncion .)
    L_PARENTHESIS   reduce using rule 88 (cte -> llamadaFuncion .)
    SEMICOLON       reduce using rule 88 (cte -> llamadaFuncion .)
    HASTA           reduce using rule 88 (cte -> llamadaFuncion .)
    HACER           reduce using rule 88 (cte -> llamadaFuncion .)


state 111

    (89) cte -> ID . operand_seen dimId
    (91) llamadaFuncion -> ID . L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS
    (48) operand_seen -> .

  ! shift/reduce conflict for L_PARENTHESIS resolved as shift
    L_PARENTHESIS   shift and go to state 144
    L_SQUARE_BRACKET reduce using rule 48 (operand_seen -> .)
    DETERMINANT     reduce using rule 48 (operand_seen -> .)
    TRANSPOSED      reduce using rule 48 (operand_seen -> .)
    INVERSE         reduce using rule 48 (operand_seen -> .)
    MULTIPLY        reduce using rule 48 (operand_seen -> .)
    DIVIDE          reduce using rule 48 (operand_seen -> .)
    SUM             reduce using rule 48 (operand_seen -> .)
    SUBTRACT        reduce using rule 48 (operand_seen -> .)
    EQUALS          reduce using rule 48 (operand_seen -> .)
    NOT_EQUAL       reduce using rule 48 (operand_seen -> .)
    LESS_THAN       reduce using rule 48 (operand_seen -> .)
    LESS_THAN_EQUAL reduce using rule 48 (operand_seen -> .)
    GREATER_THAN    reduce using rule 48 (operand_seen -> .)
    GREATER_THAN_EQUAL reduce using rule 48 (operand_seen -> .)
    AND             reduce using rule 48 (operand_seen -> .)
    OR              reduce using rule 48 (operand_seen -> .)
    R_PARENTHESIS   reduce using rule 48 (operand_seen -> .)
    COMMA           reduce using rule 48 (operand_seen -> .)
    R_SQUARE_BRACKET reduce using rule 48 (operand_seen -> .)
    NOT             reduce using rule 48 (operand_seen -> .)
    CTE_INT         reduce using rule 48 (operand_seen -> .)
    CTE_FLOAT       reduce using rule 48 (operand_seen -> .)
    CTE_CHAR        reduce using rule 48 (operand_seen -> .)
    ID              reduce using rule 48 (operand_seen -> .)
    SEMICOLON       reduce using rule 48 (operand_seen -> .)
    HASTA           reduce using rule 48 (operand_seen -> .)
    HACER           reduce using rule 48 (operand_seen -> .)

  ! L_PARENTHESIS   [ reduce using rule 48 (operand_seen -> .) ]

    operand_seen                   shift and go to state 143

state 112

    (100) lectura -> LECTURA L_PARENTHESIS lecturap . R_PARENTHESIS SEMICOLON

    R_PARENTHESIS   shift and go to state 145


state 113

    (101) lecturap -> ID . dimId lecturapp
    (50) dimId -> . dim
    (51) dimId -> . dim dim
    (52) dimId -> . empty
    (53) dim -> . L_SQUARE_BRACKET expresion R_SQUARE_BRACKET
    (121) empty -> .

    L_SQUARE_BRACKET shift and go to state 97
    COMMA           reduce using rule 121 (empty -> .)
    R_PARENTHESIS   reduce using rule 121 (empty -> .)

    dimId                          shift and go to state 146
    dim                            shift and go to state 95
    empty                          shift and go to state 96

state 114

    (104) escritura -> ESCRIBE L_PARENTHESIS escriturap . R_PARENTHESIS SEMICOLON

    R_PARENTHESIS   shift and go to state 147


state 115

    (105) escriturap -> LETRERO . escriturapp
    (107) escriturapp -> . COMMA escriturap
    (108) escriturapp -> . empty
    (121) empty -> .

    COMMA           shift and go to state 149
    R_PARENTHESIS   reduce using rule 121 (empty -> .)

    escriturapp                    shift and go to state 148
    empty                          shift and go to state 150

state 116

    (106) escriturap -> expresion . escriturapp
    (107) escriturapp -> . COMMA escriturap
    (108) escriturapp -> . empty
    (121) empty -> .

    COMMA           shift and go to state 149
    R_PARENTHESIS   reduce using rule 121 (empty -> .)

    escriturapp                    shift and go to state 151
    empty                          shift and go to state 150

state 117

    (109) decision -> SI L_PARENTHESIS expresion . R_PARENTHESIS jump_false HAZ bloque decisionp

    R_PARENTHESIS   shift and go to state 152


state 118

    (115) cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS . expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle
    (54) expresion -> . relacional apply_operation_expresion expresionp
    (55) expresion -> . NOT relacional expresionp
    (60) relacional -> . aritmetica apply_operation_relational relacionalp
    (69) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (74) factor -> . matriz apply_operation_factor factorp
    (80) matriz -> . cte matrizp
    (85) cte -> . CTE_INT
    (86) cte -> . CTE_FLOAT
    (87) cte -> . CTE_CHAR
    (88) cte -> . llamadaFuncion
    (89) cte -> . ID operand_seen dimId
    (90) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (91) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    NOT             shift and go to state 102
    CTE_INT         shift and go to state 107
    CTE_FLOAT       shift and go to state 108
    CTE_CHAR        shift and go to state 109
    ID              shift and go to state 111
    L_PARENTHESIS   shift and go to state 99

    expresion                      shift and go to state 153
    relacional                     shift and go to state 101
    aritmetica                     shift and go to state 103
    factor                         shift and go to state 104
    matriz                         shift and go to state 105
    cte                            shift and go to state 106
    llamadaFuncion                 shift and go to state 110

state 119

    (118) cicloNoCondicional -> DESDE ID operand_seen . dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle
    (50) dimId -> . dim
    (51) dimId -> . dim dim
    (52) dimId -> . empty
    (53) dim -> . L_SQUARE_BRACKET expresion R_SQUARE_BRACKET
    (121) empty -> .

    L_SQUARE_BRACKET shift and go to state 97
    ASSIGN          reduce using rule 121 (empty -> .)

    dimId                          shift and go to state 154
    dim                            shift and go to state 95
    empty                          shift and go to state 96

state 120

    (27) funcionp -> tipoRetorno ID create_func_scope L_PARENTHESIS parametro R_PARENTHESIS var bloque funcion .

    PRINCIPAL       reduce using rule 27 (funcionp -> tipoRetorno ID create_func_scope L_PARENTHESIS parametro R_PARENTHESIS var bloque funcion .)


state 121

    (32) parametrop -> COMMA tipo . ID save_param parametrop

    ID              shift and go to state 155


state 122

    (8) varp -> tipo tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON . varpppp
    (18) varpppp -> . varp
    (19) varpppp -> . empty
    (8) varp -> . tipo tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp
    (9) varp -> . tipo tipo_seen COLON ID error varppp varpp delete_type SEMICOLON varpppp
    (121) empty -> .
    (21) tipo -> . INT
    (22) tipo -> . FLOAT
    (23) tipo -> . CHAR

    FUNCION         reduce using rule 121 (empty -> .)
    PRINCIPAL       reduce using rule 121 (empty -> .)
    L_CURLY_BRACKET reduce using rule 121 (empty -> .)
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22

    tipo                           shift and go to state 24
    varpppp                        shift and go to state 156
    varp                           shift and go to state 157
    empty                          shift and go to state 158

state 123

    (13) varpp -> COMMA ID variable_seen . varppp varpp
    (15) varppp -> . dimDeclare
    (16) varppp -> . dimDeclare dimDeclare
    (17) varppp -> . empty
    (20) dimDeclare -> . L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET
    (121) empty -> .

    L_SQUARE_BRACKET shift and go to state 47
    COMMA           reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)

    varppp                         shift and go to state 159
    dimDeclare                     shift and go to state 45
    empty                          shift and go to state 46

state 124

    (9) varp -> tipo tipo_seen COLON ID error varppp varpp delete_type SEMICOLON . varpppp
    (18) varpppp -> . varp
    (19) varpppp -> . empty
    (8) varp -> . tipo tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp
    (9) varp -> . tipo tipo_seen COLON ID error varppp varpp delete_type SEMICOLON varpppp
    (121) empty -> .
    (21) tipo -> . INT
    (22) tipo -> . FLOAT
    (23) tipo -> . CHAR

    FUNCION         reduce using rule 121 (empty -> .)
    PRINCIPAL       reduce using rule 121 (empty -> .)
    L_CURLY_BRACKET reduce using rule 121 (empty -> .)
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22

    tipo                           shift and go to state 24
    varpppp                        shift and go to state 160
    varp                           shift and go to state 157
    empty                          shift and go to state 158

state 125

    (47) asignacion -> ID operand_seen dimId ASSIGN . operation_seen expresion apply_operation_assign SEMICOLON
    (79) operation_seen -> .

    NOT             reduce using rule 79 (operation_seen -> .)
    CTE_INT         reduce using rule 79 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 79 (operation_seen -> .)
    CTE_CHAR        reduce using rule 79 (operation_seen -> .)
    ID              reduce using rule 79 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 79 (operation_seen -> .)

    operation_seen                 shift and go to state 161

state 126

    (51) dimId -> dim dim .

    ASSIGN          reduce using rule 51 (dimId -> dim dim .)
    COMMA           reduce using rule 51 (dimId -> dim dim .)
    R_PARENTHESIS   reduce using rule 51 (dimId -> dim dim .)
    DETERMINANT     reduce using rule 51 (dimId -> dim dim .)
    TRANSPOSED      reduce using rule 51 (dimId -> dim dim .)
    INVERSE         reduce using rule 51 (dimId -> dim dim .)
    MULTIPLY        reduce using rule 51 (dimId -> dim dim .)
    DIVIDE          reduce using rule 51 (dimId -> dim dim .)
    SUM             reduce using rule 51 (dimId -> dim dim .)
    SUBTRACT        reduce using rule 51 (dimId -> dim dim .)
    EQUALS          reduce using rule 51 (dimId -> dim dim .)
    NOT_EQUAL       reduce using rule 51 (dimId -> dim dim .)
    LESS_THAN       reduce using rule 51 (dimId -> dim dim .)
    LESS_THAN_EQUAL reduce using rule 51 (dimId -> dim dim .)
    GREATER_THAN    reduce using rule 51 (dimId -> dim dim .)
    GREATER_THAN_EQUAL reduce using rule 51 (dimId -> dim dim .)
    AND             reduce using rule 51 (dimId -> dim dim .)
    OR              reduce using rule 51 (dimId -> dim dim .)
    R_SQUARE_BRACKET reduce using rule 51 (dimId -> dim dim .)
    NOT             reduce using rule 51 (dimId -> dim dim .)
    CTE_INT         reduce using rule 51 (dimId -> dim dim .)
    CTE_FLOAT       reduce using rule 51 (dimId -> dim dim .)
    CTE_CHAR        reduce using rule 51 (dimId -> dim dim .)
    ID              reduce using rule 51 (dimId -> dim dim .)
    L_PARENTHESIS   reduce using rule 51 (dimId -> dim dim .)
    SEMICOLON       reduce using rule 51 (dimId -> dim dim .)
    HASTA           reduce using rule 51 (dimId -> dim dim .)
    HACER           reduce using rule 51 (dimId -> dim dim .)


state 127

    (53) dim -> L_SQUARE_BRACKET expresion . R_SQUARE_BRACKET

    R_SQUARE_BRACKET shift and go to state 162


state 128

    (97) funcionVacia -> ID set_func_scope L_PARENTHESIS llamadaFuncionp . R_PARENTHESIS SEMICOLON

    R_PARENTHESIS   shift and go to state 163


state 129

    (92) llamadaFuncionp -> expresion . verify_parameter llamadaFuncionpp
    (96) verify_parameter -> .

    COMMA           reduce using rule 96 (verify_parameter -> .)
    R_PARENTHESIS   reduce using rule 96 (verify_parameter -> .)

    verify_parameter               shift and go to state 164

state 130

    (93) llamadaFuncionp -> empty .

    R_PARENTHESIS   reduce using rule 93 (llamadaFuncionp -> empty .)


state 131

    (90) cte -> L_PARENTHESIS operation_seen . expresion R_PARENTHESIS operation_seen
    (54) expresion -> . relacional apply_operation_expresion expresionp
    (55) expresion -> . NOT relacional expresionp
    (60) relacional -> . aritmetica apply_operation_relational relacionalp
    (69) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (74) factor -> . matriz apply_operation_factor factorp
    (80) matriz -> . cte matrizp
    (85) cte -> . CTE_INT
    (86) cte -> . CTE_FLOAT
    (87) cte -> . CTE_CHAR
    (88) cte -> . llamadaFuncion
    (89) cte -> . ID operand_seen dimId
    (90) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (91) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    NOT             shift and go to state 102
    CTE_INT         shift and go to state 107
    CTE_FLOAT       shift and go to state 108
    CTE_CHAR        shift and go to state 109
    ID              shift and go to state 111
    L_PARENTHESIS   shift and go to state 99

    expresion                      shift and go to state 165
    relacional                     shift and go to state 101
    aritmetica                     shift and go to state 103
    factor                         shift and go to state 104
    matriz                         shift and go to state 105
    cte                            shift and go to state 106
    llamadaFuncion                 shift and go to state 110

state 132

    (99) regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 166


state 133

    (54) expresion -> relacional apply_operation_expresion . expresionp
    (56) expresionp -> . AND operation_seen expresion
    (57) expresionp -> . OR operation_seen expresion
    (58) expresionp -> . empty
    (121) empty -> .

    AND             shift and go to state 168
    OR              shift and go to state 169
    R_PARENTHESIS   reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    R_SQUARE_BRACKET reduce using rule 121 (empty -> .)
    NOT             reduce using rule 121 (empty -> .)
    CTE_INT         reduce using rule 121 (empty -> .)
    CTE_FLOAT       reduce using rule 121 (empty -> .)
    CTE_CHAR        reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)
    L_PARENTHESIS   reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    HASTA           reduce using rule 121 (empty -> .)
    HACER           reduce using rule 121 (empty -> .)

    expresionp                     shift and go to state 167
    empty                          shift and go to state 170

state 134

    (55) expresion -> NOT relacional . expresionp
    (56) expresionp -> . AND operation_seen expresion
    (57) expresionp -> . OR operation_seen expresion
    (58) expresionp -> . empty
    (121) empty -> .

    AND             shift and go to state 168
    OR              shift and go to state 169
    R_PARENTHESIS   reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    R_SQUARE_BRACKET reduce using rule 121 (empty -> .)
    NOT             reduce using rule 121 (empty -> .)
    CTE_INT         reduce using rule 121 (empty -> .)
    CTE_FLOAT       reduce using rule 121 (empty -> .)
    CTE_CHAR        reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)
    L_PARENTHESIS   reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    HASTA           reduce using rule 121 (empty -> .)
    HACER           reduce using rule 121 (empty -> .)

    expresionp                     shift and go to state 171
    empty                          shift and go to state 170

state 135

    (60) relacional -> aritmetica apply_operation_relational . relacionalp
    (61) relacionalp -> . EQUALS operation_seen relacional
    (62) relacionalp -> . NOT_EQUAL operation_seen relacional
    (63) relacionalp -> . LESS_THAN operation_seen relacional
    (64) relacionalp -> . LESS_THAN_EQUAL operation_seen relacional
    (65) relacionalp -> . GREATER_THAN operation_seen relacional
    (66) relacionalp -> . GREATER_THAN_EQUAL operation_seen relacional
    (67) relacionalp -> . empty
    (121) empty -> .

    EQUALS          shift and go to state 173
    NOT_EQUAL       shift and go to state 174
    LESS_THAN       shift and go to state 175
    LESS_THAN_EQUAL shift and go to state 176
    GREATER_THAN    shift and go to state 177
    GREATER_THAN_EQUAL shift and go to state 178
    AND             reduce using rule 121 (empty -> .)
    OR              reduce using rule 121 (empty -> .)
    R_PARENTHESIS   reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    R_SQUARE_BRACKET reduce using rule 121 (empty -> .)
    NOT             reduce using rule 121 (empty -> .)
    CTE_INT         reduce using rule 121 (empty -> .)
    CTE_FLOAT       reduce using rule 121 (empty -> .)
    CTE_CHAR        reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)
    L_PARENTHESIS   reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    HASTA           reduce using rule 121 (empty -> .)
    HACER           reduce using rule 121 (empty -> .)

    relacionalp                    shift and go to state 172
    empty                          shift and go to state 179

state 136

    (69) aritmetica -> factor apply_operation_aritmetica . aritmeticap
    (70) aritmeticap -> . SUM operation_seen aritmetica
    (71) aritmeticap -> . SUBTRACT operation_seen aritmetica
    (72) aritmeticap -> . empty
    (121) empty -> .

    SUM             shift and go to state 181
    SUBTRACT        shift and go to state 182
    EQUALS          reduce using rule 121 (empty -> .)
    NOT_EQUAL       reduce using rule 121 (empty -> .)
    LESS_THAN       reduce using rule 121 (empty -> .)
    LESS_THAN_EQUAL reduce using rule 121 (empty -> .)
    GREATER_THAN    reduce using rule 121 (empty -> .)
    GREATER_THAN_EQUAL reduce using rule 121 (empty -> .)
    AND             reduce using rule 121 (empty -> .)
    OR              reduce using rule 121 (empty -> .)
    R_PARENTHESIS   reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    R_SQUARE_BRACKET reduce using rule 121 (empty -> .)
    NOT             reduce using rule 121 (empty -> .)
    CTE_INT         reduce using rule 121 (empty -> .)
    CTE_FLOAT       reduce using rule 121 (empty -> .)
    CTE_CHAR        reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)
    L_PARENTHESIS   reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    HASTA           reduce using rule 121 (empty -> .)
    HACER           reduce using rule 121 (empty -> .)

    aritmeticap                    shift and go to state 180
    empty                          shift and go to state 183

state 137

    (74) factor -> matriz apply_operation_factor . factorp
    (75) factorp -> . MULTIPLY operation_seen factor
    (76) factorp -> . DIVIDE operation_seen factor
    (77) factorp -> . empty
    (121) empty -> .

    MULTIPLY        shift and go to state 185
    DIVIDE          shift and go to state 186
    SUM             reduce using rule 121 (empty -> .)
    SUBTRACT        reduce using rule 121 (empty -> .)
    EQUALS          reduce using rule 121 (empty -> .)
    NOT_EQUAL       reduce using rule 121 (empty -> .)
    LESS_THAN       reduce using rule 121 (empty -> .)
    LESS_THAN_EQUAL reduce using rule 121 (empty -> .)
    GREATER_THAN    reduce using rule 121 (empty -> .)
    GREATER_THAN_EQUAL reduce using rule 121 (empty -> .)
    AND             reduce using rule 121 (empty -> .)
    OR              reduce using rule 121 (empty -> .)
    R_PARENTHESIS   reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    R_SQUARE_BRACKET reduce using rule 121 (empty -> .)
    NOT             reduce using rule 121 (empty -> .)
    CTE_INT         reduce using rule 121 (empty -> .)
    CTE_FLOAT       reduce using rule 121 (empty -> .)
    CTE_CHAR        reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)
    L_PARENTHESIS   reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    HASTA           reduce using rule 121 (empty -> .)
    HACER           reduce using rule 121 (empty -> .)

    factorp                        shift and go to state 184
    empty                          shift and go to state 187

state 138

    (80) matriz -> cte matrizp .

    MULTIPLY        reduce using rule 80 (matriz -> cte matrizp .)
    DIVIDE          reduce using rule 80 (matriz -> cte matrizp .)
    SUM             reduce using rule 80 (matriz -> cte matrizp .)
    SUBTRACT        reduce using rule 80 (matriz -> cte matrizp .)
    EQUALS          reduce using rule 80 (matriz -> cte matrizp .)
    NOT_EQUAL       reduce using rule 80 (matriz -> cte matrizp .)
    LESS_THAN       reduce using rule 80 (matriz -> cte matrizp .)
    LESS_THAN_EQUAL reduce using rule 80 (matriz -> cte matrizp .)
    GREATER_THAN    reduce using rule 80 (matriz -> cte matrizp .)
    GREATER_THAN_EQUAL reduce using rule 80 (matriz -> cte matrizp .)
    AND             reduce using rule 80 (matriz -> cte matrizp .)
    OR              reduce using rule 80 (matriz -> cte matrizp .)
    R_PARENTHESIS   reduce using rule 80 (matriz -> cte matrizp .)
    COMMA           reduce using rule 80 (matriz -> cte matrizp .)
    R_SQUARE_BRACKET reduce using rule 80 (matriz -> cte matrizp .)
    NOT             reduce using rule 80 (matriz -> cte matrizp .)
    CTE_INT         reduce using rule 80 (matriz -> cte matrizp .)
    CTE_FLOAT       reduce using rule 80 (matriz -> cte matrizp .)
    CTE_CHAR        reduce using rule 80 (matriz -> cte matrizp .)
    ID              reduce using rule 80 (matriz -> cte matrizp .)
    L_PARENTHESIS   reduce using rule 80 (matriz -> cte matrizp .)
    SEMICOLON       reduce using rule 80 (matriz -> cte matrizp .)
    HASTA           reduce using rule 80 (matriz -> cte matrizp .)
    HACER           reduce using rule 80 (matriz -> cte matrizp .)


state 139

    (81) matrizp -> DETERMINANT .

    MULTIPLY        reduce using rule 81 (matrizp -> DETERMINANT .)
    DIVIDE          reduce using rule 81 (matrizp -> DETERMINANT .)
    SUM             reduce using rule 81 (matrizp -> DETERMINANT .)
    SUBTRACT        reduce using rule 81 (matrizp -> DETERMINANT .)
    EQUALS          reduce using rule 81 (matrizp -> DETERMINANT .)
    NOT_EQUAL       reduce using rule 81 (matrizp -> DETERMINANT .)
    LESS_THAN       reduce using rule 81 (matrizp -> DETERMINANT .)
    LESS_THAN_EQUAL reduce using rule 81 (matrizp -> DETERMINANT .)
    GREATER_THAN    reduce using rule 81 (matrizp -> DETERMINANT .)
    GREATER_THAN_EQUAL reduce using rule 81 (matrizp -> DETERMINANT .)
    AND             reduce using rule 81 (matrizp -> DETERMINANT .)
    OR              reduce using rule 81 (matrizp -> DETERMINANT .)
    R_PARENTHESIS   reduce using rule 81 (matrizp -> DETERMINANT .)
    COMMA           reduce using rule 81 (matrizp -> DETERMINANT .)
    R_SQUARE_BRACKET reduce using rule 81 (matrizp -> DETERMINANT .)
    NOT             reduce using rule 81 (matrizp -> DETERMINANT .)
    CTE_INT         reduce using rule 81 (matrizp -> DETERMINANT .)
    CTE_FLOAT       reduce using rule 81 (matrizp -> DETERMINANT .)
    CTE_CHAR        reduce using rule 81 (matrizp -> DETERMINANT .)
    ID              reduce using rule 81 (matrizp -> DETERMINANT .)
    L_PARENTHESIS   reduce using rule 81 (matrizp -> DETERMINANT .)
    SEMICOLON       reduce using rule 81 (matrizp -> DETERMINANT .)
    HASTA           reduce using rule 81 (matrizp -> DETERMINANT .)
    HACER           reduce using rule 81 (matrizp -> DETERMINANT .)


state 140

    (82) matrizp -> TRANSPOSED .

    MULTIPLY        reduce using rule 82 (matrizp -> TRANSPOSED .)
    DIVIDE          reduce using rule 82 (matrizp -> TRANSPOSED .)
    SUM             reduce using rule 82 (matrizp -> TRANSPOSED .)
    SUBTRACT        reduce using rule 82 (matrizp -> TRANSPOSED .)
    EQUALS          reduce using rule 82 (matrizp -> TRANSPOSED .)
    NOT_EQUAL       reduce using rule 82 (matrizp -> TRANSPOSED .)
    LESS_THAN       reduce using rule 82 (matrizp -> TRANSPOSED .)
    LESS_THAN_EQUAL reduce using rule 82 (matrizp -> TRANSPOSED .)
    GREATER_THAN    reduce using rule 82 (matrizp -> TRANSPOSED .)
    GREATER_THAN_EQUAL reduce using rule 82 (matrizp -> TRANSPOSED .)
    AND             reduce using rule 82 (matrizp -> TRANSPOSED .)
    OR              reduce using rule 82 (matrizp -> TRANSPOSED .)
    R_PARENTHESIS   reduce using rule 82 (matrizp -> TRANSPOSED .)
    COMMA           reduce using rule 82 (matrizp -> TRANSPOSED .)
    R_SQUARE_BRACKET reduce using rule 82 (matrizp -> TRANSPOSED .)
    NOT             reduce using rule 82 (matrizp -> TRANSPOSED .)
    CTE_INT         reduce using rule 82 (matrizp -> TRANSPOSED .)
    CTE_FLOAT       reduce using rule 82 (matrizp -> TRANSPOSED .)
    CTE_CHAR        reduce using rule 82 (matrizp -> TRANSPOSED .)
    ID              reduce using rule 82 (matrizp -> TRANSPOSED .)
    L_PARENTHESIS   reduce using rule 82 (matrizp -> TRANSPOSED .)
    SEMICOLON       reduce using rule 82 (matrizp -> TRANSPOSED .)
    HASTA           reduce using rule 82 (matrizp -> TRANSPOSED .)
    HACER           reduce using rule 82 (matrizp -> TRANSPOSED .)


state 141

    (83) matrizp -> INVERSE .

    MULTIPLY        reduce using rule 83 (matrizp -> INVERSE .)
    DIVIDE          reduce using rule 83 (matrizp -> INVERSE .)
    SUM             reduce using rule 83 (matrizp -> INVERSE .)
    SUBTRACT        reduce using rule 83 (matrizp -> INVERSE .)
    EQUALS          reduce using rule 83 (matrizp -> INVERSE .)
    NOT_EQUAL       reduce using rule 83 (matrizp -> INVERSE .)
    LESS_THAN       reduce using rule 83 (matrizp -> INVERSE .)
    LESS_THAN_EQUAL reduce using rule 83 (matrizp -> INVERSE .)
    GREATER_THAN    reduce using rule 83 (matrizp -> INVERSE .)
    GREATER_THAN_EQUAL reduce using rule 83 (matrizp -> INVERSE .)
    AND             reduce using rule 83 (matrizp -> INVERSE .)
    OR              reduce using rule 83 (matrizp -> INVERSE .)
    R_PARENTHESIS   reduce using rule 83 (matrizp -> INVERSE .)
    COMMA           reduce using rule 83 (matrizp -> INVERSE .)
    R_SQUARE_BRACKET reduce using rule 83 (matrizp -> INVERSE .)
    NOT             reduce using rule 83 (matrizp -> INVERSE .)
    CTE_INT         reduce using rule 83 (matrizp -> INVERSE .)
    CTE_FLOAT       reduce using rule 83 (matrizp -> INVERSE .)
    CTE_CHAR        reduce using rule 83 (matrizp -> INVERSE .)
    ID              reduce using rule 83 (matrizp -> INVERSE .)
    L_PARENTHESIS   reduce using rule 83 (matrizp -> INVERSE .)
    SEMICOLON       reduce using rule 83 (matrizp -> INVERSE .)
    HASTA           reduce using rule 83 (matrizp -> INVERSE .)
    HACER           reduce using rule 83 (matrizp -> INVERSE .)


state 142

    (84) matrizp -> empty .

    MULTIPLY        reduce using rule 84 (matrizp -> empty .)
    DIVIDE          reduce using rule 84 (matrizp -> empty .)
    SUM             reduce using rule 84 (matrizp -> empty .)
    SUBTRACT        reduce using rule 84 (matrizp -> empty .)
    EQUALS          reduce using rule 84 (matrizp -> empty .)
    NOT_EQUAL       reduce using rule 84 (matrizp -> empty .)
    LESS_THAN       reduce using rule 84 (matrizp -> empty .)
    LESS_THAN_EQUAL reduce using rule 84 (matrizp -> empty .)
    GREATER_THAN    reduce using rule 84 (matrizp -> empty .)
    GREATER_THAN_EQUAL reduce using rule 84 (matrizp -> empty .)
    AND             reduce using rule 84 (matrizp -> empty .)
    OR              reduce using rule 84 (matrizp -> empty .)
    R_PARENTHESIS   reduce using rule 84 (matrizp -> empty .)
    COMMA           reduce using rule 84 (matrizp -> empty .)
    R_SQUARE_BRACKET reduce using rule 84 (matrizp -> empty .)
    NOT             reduce using rule 84 (matrizp -> empty .)
    CTE_INT         reduce using rule 84 (matrizp -> empty .)
    CTE_FLOAT       reduce using rule 84 (matrizp -> empty .)
    CTE_CHAR        reduce using rule 84 (matrizp -> empty .)
    ID              reduce using rule 84 (matrizp -> empty .)
    L_PARENTHESIS   reduce using rule 84 (matrizp -> empty .)
    SEMICOLON       reduce using rule 84 (matrizp -> empty .)
    HASTA           reduce using rule 84 (matrizp -> empty .)
    HACER           reduce using rule 84 (matrizp -> empty .)


state 143

    (89) cte -> ID operand_seen . dimId
    (50) dimId -> . dim
    (51) dimId -> . dim dim
    (52) dimId -> . empty
    (53) dim -> . L_SQUARE_BRACKET expresion R_SQUARE_BRACKET
    (121) empty -> .

    L_SQUARE_BRACKET shift and go to state 97
    DETERMINANT     reduce using rule 121 (empty -> .)
    TRANSPOSED      reduce using rule 121 (empty -> .)
    INVERSE         reduce using rule 121 (empty -> .)
    MULTIPLY        reduce using rule 121 (empty -> .)
    DIVIDE          reduce using rule 121 (empty -> .)
    SUM             reduce using rule 121 (empty -> .)
    SUBTRACT        reduce using rule 121 (empty -> .)
    EQUALS          reduce using rule 121 (empty -> .)
    NOT_EQUAL       reduce using rule 121 (empty -> .)
    LESS_THAN       reduce using rule 121 (empty -> .)
    LESS_THAN_EQUAL reduce using rule 121 (empty -> .)
    GREATER_THAN    reduce using rule 121 (empty -> .)
    GREATER_THAN_EQUAL reduce using rule 121 (empty -> .)
    AND             reduce using rule 121 (empty -> .)
    OR              reduce using rule 121 (empty -> .)
    R_PARENTHESIS   reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    R_SQUARE_BRACKET reduce using rule 121 (empty -> .)
    NOT             reduce using rule 121 (empty -> .)
    CTE_INT         reduce using rule 121 (empty -> .)
    CTE_FLOAT       reduce using rule 121 (empty -> .)
    CTE_CHAR        reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)
    L_PARENTHESIS   reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    HASTA           reduce using rule 121 (empty -> .)
    HACER           reduce using rule 121 (empty -> .)

    dimId                          shift and go to state 188
    dim                            shift and go to state 95
    empty                          shift and go to state 96

state 144

    (91) llamadaFuncion -> ID L_PARENTHESIS . expresion llamadaFuncionp R_PARENTHESIS
    (54) expresion -> . relacional apply_operation_expresion expresionp
    (55) expresion -> . NOT relacional expresionp
    (60) relacional -> . aritmetica apply_operation_relational relacionalp
    (69) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (74) factor -> . matriz apply_operation_factor factorp
    (80) matriz -> . cte matrizp
    (85) cte -> . CTE_INT
    (86) cte -> . CTE_FLOAT
    (87) cte -> . CTE_CHAR
    (88) cte -> . llamadaFuncion
    (89) cte -> . ID operand_seen dimId
    (90) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (91) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    NOT             shift and go to state 102
    CTE_INT         shift and go to state 107
    CTE_FLOAT       shift and go to state 108
    CTE_CHAR        shift and go to state 109
    ID              shift and go to state 111
    L_PARENTHESIS   shift and go to state 99

    expresion                      shift and go to state 189
    relacional                     shift and go to state 101
    aritmetica                     shift and go to state 103
    factor                         shift and go to state 104
    matriz                         shift and go to state 105
    cte                            shift and go to state 106
    llamadaFuncion                 shift and go to state 110

state 145

    (100) lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 190


state 146

    (101) lecturap -> ID dimId . lecturapp
    (102) lecturapp -> . COMMA lecturap
    (103) lecturapp -> . empty
    (121) empty -> .

    COMMA           shift and go to state 192
    R_PARENTHESIS   reduce using rule 121 (empty -> .)

    lecturapp                      shift and go to state 191
    empty                          shift and go to state 193

state 147

    (104) escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 194


state 148

    (105) escriturap -> LETRERO escriturapp .

    R_PARENTHESIS   reduce using rule 105 (escriturap -> LETRERO escriturapp .)


state 149

    (107) escriturapp -> COMMA . escriturap
    (105) escriturap -> . LETRERO escriturapp
    (106) escriturap -> . expresion escriturapp
    (54) expresion -> . relacional apply_operation_expresion expresionp
    (55) expresion -> . NOT relacional expresionp
    (60) relacional -> . aritmetica apply_operation_relational relacionalp
    (69) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (74) factor -> . matriz apply_operation_factor factorp
    (80) matriz -> . cte matrizp
    (85) cte -> . CTE_INT
    (86) cte -> . CTE_FLOAT
    (87) cte -> . CTE_CHAR
    (88) cte -> . llamadaFuncion
    (89) cte -> . ID operand_seen dimId
    (90) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (91) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    LETRERO         shift and go to state 115
    NOT             shift and go to state 102
    CTE_INT         shift and go to state 107
    CTE_FLOAT       shift and go to state 108
    CTE_CHAR        shift and go to state 109
    ID              shift and go to state 111
    L_PARENTHESIS   shift and go to state 99

    escriturap                     shift and go to state 195
    expresion                      shift and go to state 116
    relacional                     shift and go to state 101
    aritmetica                     shift and go to state 103
    factor                         shift and go to state 104
    matriz                         shift and go to state 105
    cte                            shift and go to state 106
    llamadaFuncion                 shift and go to state 110

state 150

    (108) escriturapp -> empty .

    R_PARENTHESIS   reduce using rule 108 (escriturapp -> empty .)


state 151

    (106) escriturap -> expresion escriturapp .

    R_PARENTHESIS   reduce using rule 106 (escriturap -> expresion escriturapp .)


state 152

    (109) decision -> SI L_PARENTHESIS expresion R_PARENTHESIS . jump_false HAZ bloque decisionp
    (110) jump_false -> .

    HAZ             reduce using rule 110 (jump_false -> .)

    jump_false                     shift and go to state 196

state 153

    (115) cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion . R_PARENTHESIS jump_false HAZ bloque update_jump_cycle

    R_PARENTHESIS   shift and go to state 197


state 154

    (118) cicloNoCondicional -> DESDE ID operand_seen dimId . ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle

    ASSIGN          shift and go to state 198


state 155

    (32) parametrop -> COMMA tipo ID . save_param parametrop
    (31) save_param -> .

    COMMA           reduce using rule 31 (save_param -> .)
    R_PARENTHESIS   reduce using rule 31 (save_param -> .)

    save_param                     shift and go to state 199

state 156

    (8) varp -> tipo tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp .

    FUNCION         reduce using rule 8 (varp -> tipo tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp .)
    PRINCIPAL       reduce using rule 8 (varp -> tipo tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp .)
    L_CURLY_BRACKET reduce using rule 8 (varp -> tipo tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp .)


state 157

    (18) varpppp -> varp .

    FUNCION         reduce using rule 18 (varpppp -> varp .)
    PRINCIPAL       reduce using rule 18 (varpppp -> varp .)
    L_CURLY_BRACKET reduce using rule 18 (varpppp -> varp .)


state 158

    (19) varpppp -> empty .

    FUNCION         reduce using rule 19 (varpppp -> empty .)
    PRINCIPAL       reduce using rule 19 (varpppp -> empty .)
    L_CURLY_BRACKET reduce using rule 19 (varpppp -> empty .)


state 159

    (13) varpp -> COMMA ID variable_seen varppp . varpp
    (13) varpp -> . COMMA ID variable_seen varppp varpp
    (14) varpp -> . empty
    (121) empty -> .

    COMMA           shift and go to state 71
    SEMICOLON       reduce using rule 121 (empty -> .)

    varpp                          shift and go to state 200
    empty                          shift and go to state 72

state 160

    (9) varp -> tipo tipo_seen COLON ID error varppp varpp delete_type SEMICOLON varpppp .

    FUNCION         reduce using rule 9 (varp -> tipo tipo_seen COLON ID error varppp varpp delete_type SEMICOLON varpppp .)
    PRINCIPAL       reduce using rule 9 (varp -> tipo tipo_seen COLON ID error varppp varpp delete_type SEMICOLON varpppp .)
    L_CURLY_BRACKET reduce using rule 9 (varp -> tipo tipo_seen COLON ID error varppp varpp delete_type SEMICOLON varpppp .)


state 161

    (47) asignacion -> ID operand_seen dimId ASSIGN operation_seen . expresion apply_operation_assign SEMICOLON
    (54) expresion -> . relacional apply_operation_expresion expresionp
    (55) expresion -> . NOT relacional expresionp
    (60) relacional -> . aritmetica apply_operation_relational relacionalp
    (69) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (74) factor -> . matriz apply_operation_factor factorp
    (80) matriz -> . cte matrizp
    (85) cte -> . CTE_INT
    (86) cte -> . CTE_FLOAT
    (87) cte -> . CTE_CHAR
    (88) cte -> . llamadaFuncion
    (89) cte -> . ID operand_seen dimId
    (90) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (91) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    NOT             shift and go to state 102
    CTE_INT         shift and go to state 107
    CTE_FLOAT       shift and go to state 108
    CTE_CHAR        shift and go to state 109
    ID              shift and go to state 111
    L_PARENTHESIS   shift and go to state 99

    expresion                      shift and go to state 201
    relacional                     shift and go to state 101
    aritmetica                     shift and go to state 103
    factor                         shift and go to state 104
    matriz                         shift and go to state 105
    cte                            shift and go to state 106
    llamadaFuncion                 shift and go to state 110

state 162

    (53) dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .

    L_SQUARE_BRACKET reduce using rule 53 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    ASSIGN          reduce using rule 53 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    COMMA           reduce using rule 53 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    R_PARENTHESIS   reduce using rule 53 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    DETERMINANT     reduce using rule 53 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    TRANSPOSED      reduce using rule 53 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    INVERSE         reduce using rule 53 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    MULTIPLY        reduce using rule 53 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    DIVIDE          reduce using rule 53 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    SUM             reduce using rule 53 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    SUBTRACT        reduce using rule 53 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    EQUALS          reduce using rule 53 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    NOT_EQUAL       reduce using rule 53 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    LESS_THAN       reduce using rule 53 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    LESS_THAN_EQUAL reduce using rule 53 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    GREATER_THAN    reduce using rule 53 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    GREATER_THAN_EQUAL reduce using rule 53 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    AND             reduce using rule 53 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    OR              reduce using rule 53 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    R_SQUARE_BRACKET reduce using rule 53 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    NOT             reduce using rule 53 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    CTE_INT         reduce using rule 53 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    CTE_FLOAT       reduce using rule 53 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    CTE_CHAR        reduce using rule 53 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    ID              reduce using rule 53 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    L_PARENTHESIS   reduce using rule 53 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    SEMICOLON       reduce using rule 53 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    HASTA           reduce using rule 53 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    HACER           reduce using rule 53 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)


state 163

    (97) funcionVacia -> ID set_func_scope L_PARENTHESIS llamadaFuncionp R_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 202


state 164

    (92) llamadaFuncionp -> expresion verify_parameter . llamadaFuncionpp
    (94) llamadaFuncionpp -> . COMMA expresion verify_parameter llamadaFuncionpp
    (95) llamadaFuncionpp -> . empty
    (121) empty -> .

    COMMA           shift and go to state 204
    R_PARENTHESIS   reduce using rule 121 (empty -> .)

    llamadaFuncionpp               shift and go to state 203
    empty                          shift and go to state 205

state 165

    (90) cte -> L_PARENTHESIS operation_seen expresion . R_PARENTHESIS operation_seen

    R_PARENTHESIS   shift and go to state 206


state 166

    (99) regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .

    ID              reduce using rule 99 (regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .)
    REGRESA         reduce using rule 99 (regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .)
    LECTURA         reduce using rule 99 (regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .)
    ESCRIBE         reduce using rule 99 (regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .)
    SI              reduce using rule 99 (regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .)
    MIENTRAS        reduce using rule 99 (regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .)
    DESDE           reduce using rule 99 (regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .)
    R_CURLY_BRACKET reduce using rule 99 (regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .)


state 167

    (54) expresion -> relacional apply_operation_expresion expresionp .

    R_PARENTHESIS   reduce using rule 54 (expresion -> relacional apply_operation_expresion expresionp .)
    COMMA           reduce using rule 54 (expresion -> relacional apply_operation_expresion expresionp .)
    R_SQUARE_BRACKET reduce using rule 54 (expresion -> relacional apply_operation_expresion expresionp .)
    NOT             reduce using rule 54 (expresion -> relacional apply_operation_expresion expresionp .)
    CTE_INT         reduce using rule 54 (expresion -> relacional apply_operation_expresion expresionp .)
    CTE_FLOAT       reduce using rule 54 (expresion -> relacional apply_operation_expresion expresionp .)
    CTE_CHAR        reduce using rule 54 (expresion -> relacional apply_operation_expresion expresionp .)
    ID              reduce using rule 54 (expresion -> relacional apply_operation_expresion expresionp .)
    L_PARENTHESIS   reduce using rule 54 (expresion -> relacional apply_operation_expresion expresionp .)
    SEMICOLON       reduce using rule 54 (expresion -> relacional apply_operation_expresion expresionp .)
    HASTA           reduce using rule 54 (expresion -> relacional apply_operation_expresion expresionp .)
    HACER           reduce using rule 54 (expresion -> relacional apply_operation_expresion expresionp .)


state 168

    (56) expresionp -> AND . operation_seen expresion
    (79) operation_seen -> .

    NOT             reduce using rule 79 (operation_seen -> .)
    CTE_INT         reduce using rule 79 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 79 (operation_seen -> .)
    CTE_CHAR        reduce using rule 79 (operation_seen -> .)
    ID              reduce using rule 79 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 79 (operation_seen -> .)

    operation_seen                 shift and go to state 207

state 169

    (57) expresionp -> OR . operation_seen expresion
    (79) operation_seen -> .

    NOT             reduce using rule 79 (operation_seen -> .)
    CTE_INT         reduce using rule 79 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 79 (operation_seen -> .)
    CTE_CHAR        reduce using rule 79 (operation_seen -> .)
    ID              reduce using rule 79 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 79 (operation_seen -> .)

    operation_seen                 shift and go to state 208

state 170

    (58) expresionp -> empty .

    R_PARENTHESIS   reduce using rule 58 (expresionp -> empty .)
    COMMA           reduce using rule 58 (expresionp -> empty .)
    R_SQUARE_BRACKET reduce using rule 58 (expresionp -> empty .)
    NOT             reduce using rule 58 (expresionp -> empty .)
    CTE_INT         reduce using rule 58 (expresionp -> empty .)
    CTE_FLOAT       reduce using rule 58 (expresionp -> empty .)
    CTE_CHAR        reduce using rule 58 (expresionp -> empty .)
    ID              reduce using rule 58 (expresionp -> empty .)
    L_PARENTHESIS   reduce using rule 58 (expresionp -> empty .)
    SEMICOLON       reduce using rule 58 (expresionp -> empty .)
    HASTA           reduce using rule 58 (expresionp -> empty .)
    HACER           reduce using rule 58 (expresionp -> empty .)


state 171

    (55) expresion -> NOT relacional expresionp .

    R_PARENTHESIS   reduce using rule 55 (expresion -> NOT relacional expresionp .)
    COMMA           reduce using rule 55 (expresion -> NOT relacional expresionp .)
    R_SQUARE_BRACKET reduce using rule 55 (expresion -> NOT relacional expresionp .)
    NOT             reduce using rule 55 (expresion -> NOT relacional expresionp .)
    CTE_INT         reduce using rule 55 (expresion -> NOT relacional expresionp .)
    CTE_FLOAT       reduce using rule 55 (expresion -> NOT relacional expresionp .)
    CTE_CHAR        reduce using rule 55 (expresion -> NOT relacional expresionp .)
    ID              reduce using rule 55 (expresion -> NOT relacional expresionp .)
    L_PARENTHESIS   reduce using rule 55 (expresion -> NOT relacional expresionp .)
    SEMICOLON       reduce using rule 55 (expresion -> NOT relacional expresionp .)
    HASTA           reduce using rule 55 (expresion -> NOT relacional expresionp .)
    HACER           reduce using rule 55 (expresion -> NOT relacional expresionp .)


state 172

    (60) relacional -> aritmetica apply_operation_relational relacionalp .

    AND             reduce using rule 60 (relacional -> aritmetica apply_operation_relational relacionalp .)
    OR              reduce using rule 60 (relacional -> aritmetica apply_operation_relational relacionalp .)
    R_PARENTHESIS   reduce using rule 60 (relacional -> aritmetica apply_operation_relational relacionalp .)
    COMMA           reduce using rule 60 (relacional -> aritmetica apply_operation_relational relacionalp .)
    R_SQUARE_BRACKET reduce using rule 60 (relacional -> aritmetica apply_operation_relational relacionalp .)
    NOT             reduce using rule 60 (relacional -> aritmetica apply_operation_relational relacionalp .)
    CTE_INT         reduce using rule 60 (relacional -> aritmetica apply_operation_relational relacionalp .)
    CTE_FLOAT       reduce using rule 60 (relacional -> aritmetica apply_operation_relational relacionalp .)
    CTE_CHAR        reduce using rule 60 (relacional -> aritmetica apply_operation_relational relacionalp .)
    ID              reduce using rule 60 (relacional -> aritmetica apply_operation_relational relacionalp .)
    L_PARENTHESIS   reduce using rule 60 (relacional -> aritmetica apply_operation_relational relacionalp .)
    SEMICOLON       reduce using rule 60 (relacional -> aritmetica apply_operation_relational relacionalp .)
    HASTA           reduce using rule 60 (relacional -> aritmetica apply_operation_relational relacionalp .)
    HACER           reduce using rule 60 (relacional -> aritmetica apply_operation_relational relacionalp .)


state 173

    (61) relacionalp -> EQUALS . operation_seen relacional
    (79) operation_seen -> .

    CTE_INT         reduce using rule 79 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 79 (operation_seen -> .)
    CTE_CHAR        reduce using rule 79 (operation_seen -> .)
    ID              reduce using rule 79 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 79 (operation_seen -> .)

    operation_seen                 shift and go to state 209

state 174

    (62) relacionalp -> NOT_EQUAL . operation_seen relacional
    (79) operation_seen -> .

    CTE_INT         reduce using rule 79 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 79 (operation_seen -> .)
    CTE_CHAR        reduce using rule 79 (operation_seen -> .)
    ID              reduce using rule 79 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 79 (operation_seen -> .)

    operation_seen                 shift and go to state 210

state 175

    (63) relacionalp -> LESS_THAN . operation_seen relacional
    (79) operation_seen -> .

    CTE_INT         reduce using rule 79 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 79 (operation_seen -> .)
    CTE_CHAR        reduce using rule 79 (operation_seen -> .)
    ID              reduce using rule 79 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 79 (operation_seen -> .)

    operation_seen                 shift and go to state 211

state 176

    (64) relacionalp -> LESS_THAN_EQUAL . operation_seen relacional
    (79) operation_seen -> .

    CTE_INT         reduce using rule 79 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 79 (operation_seen -> .)
    CTE_CHAR        reduce using rule 79 (operation_seen -> .)
    ID              reduce using rule 79 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 79 (operation_seen -> .)

    operation_seen                 shift and go to state 212

state 177

    (65) relacionalp -> GREATER_THAN . operation_seen relacional
    (79) operation_seen -> .

    CTE_INT         reduce using rule 79 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 79 (operation_seen -> .)
    CTE_CHAR        reduce using rule 79 (operation_seen -> .)
    ID              reduce using rule 79 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 79 (operation_seen -> .)

    operation_seen                 shift and go to state 213

state 178

    (66) relacionalp -> GREATER_THAN_EQUAL . operation_seen relacional
    (79) operation_seen -> .

    CTE_INT         reduce using rule 79 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 79 (operation_seen -> .)
    CTE_CHAR        reduce using rule 79 (operation_seen -> .)
    ID              reduce using rule 79 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 79 (operation_seen -> .)

    operation_seen                 shift and go to state 214

state 179

    (67) relacionalp -> empty .

    AND             reduce using rule 67 (relacionalp -> empty .)
    OR              reduce using rule 67 (relacionalp -> empty .)
    R_PARENTHESIS   reduce using rule 67 (relacionalp -> empty .)
    COMMA           reduce using rule 67 (relacionalp -> empty .)
    R_SQUARE_BRACKET reduce using rule 67 (relacionalp -> empty .)
    NOT             reduce using rule 67 (relacionalp -> empty .)
    CTE_INT         reduce using rule 67 (relacionalp -> empty .)
    CTE_FLOAT       reduce using rule 67 (relacionalp -> empty .)
    CTE_CHAR        reduce using rule 67 (relacionalp -> empty .)
    ID              reduce using rule 67 (relacionalp -> empty .)
    L_PARENTHESIS   reduce using rule 67 (relacionalp -> empty .)
    SEMICOLON       reduce using rule 67 (relacionalp -> empty .)
    HASTA           reduce using rule 67 (relacionalp -> empty .)
    HACER           reduce using rule 67 (relacionalp -> empty .)


state 180

    (69) aritmetica -> factor apply_operation_aritmetica aritmeticap .

    EQUALS          reduce using rule 69 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    NOT_EQUAL       reduce using rule 69 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    LESS_THAN       reduce using rule 69 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    LESS_THAN_EQUAL reduce using rule 69 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    GREATER_THAN    reduce using rule 69 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    GREATER_THAN_EQUAL reduce using rule 69 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    AND             reduce using rule 69 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    OR              reduce using rule 69 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    R_PARENTHESIS   reduce using rule 69 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    COMMA           reduce using rule 69 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    R_SQUARE_BRACKET reduce using rule 69 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    NOT             reduce using rule 69 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    CTE_INT         reduce using rule 69 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    CTE_FLOAT       reduce using rule 69 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    CTE_CHAR        reduce using rule 69 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    ID              reduce using rule 69 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    L_PARENTHESIS   reduce using rule 69 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    SEMICOLON       reduce using rule 69 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    HASTA           reduce using rule 69 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    HACER           reduce using rule 69 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)


state 181

    (70) aritmeticap -> SUM . operation_seen aritmetica
    (79) operation_seen -> .

    CTE_INT         reduce using rule 79 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 79 (operation_seen -> .)
    CTE_CHAR        reduce using rule 79 (operation_seen -> .)
    ID              reduce using rule 79 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 79 (operation_seen -> .)

    operation_seen                 shift and go to state 215

state 182

    (71) aritmeticap -> SUBTRACT . operation_seen aritmetica
    (79) operation_seen -> .

    CTE_INT         reduce using rule 79 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 79 (operation_seen -> .)
    CTE_CHAR        reduce using rule 79 (operation_seen -> .)
    ID              reduce using rule 79 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 79 (operation_seen -> .)

    operation_seen                 shift and go to state 216

state 183

    (72) aritmeticap -> empty .

    EQUALS          reduce using rule 72 (aritmeticap -> empty .)
    NOT_EQUAL       reduce using rule 72 (aritmeticap -> empty .)
    LESS_THAN       reduce using rule 72 (aritmeticap -> empty .)
    LESS_THAN_EQUAL reduce using rule 72 (aritmeticap -> empty .)
    GREATER_THAN    reduce using rule 72 (aritmeticap -> empty .)
    GREATER_THAN_EQUAL reduce using rule 72 (aritmeticap -> empty .)
    AND             reduce using rule 72 (aritmeticap -> empty .)
    OR              reduce using rule 72 (aritmeticap -> empty .)
    R_PARENTHESIS   reduce using rule 72 (aritmeticap -> empty .)
    COMMA           reduce using rule 72 (aritmeticap -> empty .)
    R_SQUARE_BRACKET reduce using rule 72 (aritmeticap -> empty .)
    NOT             reduce using rule 72 (aritmeticap -> empty .)
    CTE_INT         reduce using rule 72 (aritmeticap -> empty .)
    CTE_FLOAT       reduce using rule 72 (aritmeticap -> empty .)
    CTE_CHAR        reduce using rule 72 (aritmeticap -> empty .)
    ID              reduce using rule 72 (aritmeticap -> empty .)
    L_PARENTHESIS   reduce using rule 72 (aritmeticap -> empty .)
    SEMICOLON       reduce using rule 72 (aritmeticap -> empty .)
    HASTA           reduce using rule 72 (aritmeticap -> empty .)
    HACER           reduce using rule 72 (aritmeticap -> empty .)


state 184

    (74) factor -> matriz apply_operation_factor factorp .

    SUM             reduce using rule 74 (factor -> matriz apply_operation_factor factorp .)
    SUBTRACT        reduce using rule 74 (factor -> matriz apply_operation_factor factorp .)
    EQUALS          reduce using rule 74 (factor -> matriz apply_operation_factor factorp .)
    NOT_EQUAL       reduce using rule 74 (factor -> matriz apply_operation_factor factorp .)
    LESS_THAN       reduce using rule 74 (factor -> matriz apply_operation_factor factorp .)
    LESS_THAN_EQUAL reduce using rule 74 (factor -> matriz apply_operation_factor factorp .)
    GREATER_THAN    reduce using rule 74 (factor -> matriz apply_operation_factor factorp .)
    GREATER_THAN_EQUAL reduce using rule 74 (factor -> matriz apply_operation_factor factorp .)
    AND             reduce using rule 74 (factor -> matriz apply_operation_factor factorp .)
    OR              reduce using rule 74 (factor -> matriz apply_operation_factor factorp .)
    R_PARENTHESIS   reduce using rule 74 (factor -> matriz apply_operation_factor factorp .)
    COMMA           reduce using rule 74 (factor -> matriz apply_operation_factor factorp .)
    R_SQUARE_BRACKET reduce using rule 74 (factor -> matriz apply_operation_factor factorp .)
    NOT             reduce using rule 74 (factor -> matriz apply_operation_factor factorp .)
    CTE_INT         reduce using rule 74 (factor -> matriz apply_operation_factor factorp .)
    CTE_FLOAT       reduce using rule 74 (factor -> matriz apply_operation_factor factorp .)
    CTE_CHAR        reduce using rule 74 (factor -> matriz apply_operation_factor factorp .)
    ID              reduce using rule 74 (factor -> matriz apply_operation_factor factorp .)
    L_PARENTHESIS   reduce using rule 74 (factor -> matriz apply_operation_factor factorp .)
    SEMICOLON       reduce using rule 74 (factor -> matriz apply_operation_factor factorp .)
    HASTA           reduce using rule 74 (factor -> matriz apply_operation_factor factorp .)
    HACER           reduce using rule 74 (factor -> matriz apply_operation_factor factorp .)


state 185

    (75) factorp -> MULTIPLY . operation_seen factor
    (79) operation_seen -> .

    CTE_INT         reduce using rule 79 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 79 (operation_seen -> .)
    CTE_CHAR        reduce using rule 79 (operation_seen -> .)
    ID              reduce using rule 79 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 79 (operation_seen -> .)

    operation_seen                 shift and go to state 217

state 186

    (76) factorp -> DIVIDE . operation_seen factor
    (79) operation_seen -> .

    CTE_INT         reduce using rule 79 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 79 (operation_seen -> .)
    CTE_CHAR        reduce using rule 79 (operation_seen -> .)
    ID              reduce using rule 79 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 79 (operation_seen -> .)

    operation_seen                 shift and go to state 218

state 187

    (77) factorp -> empty .

    SUM             reduce using rule 77 (factorp -> empty .)
    SUBTRACT        reduce using rule 77 (factorp -> empty .)
    EQUALS          reduce using rule 77 (factorp -> empty .)
    NOT_EQUAL       reduce using rule 77 (factorp -> empty .)
    LESS_THAN       reduce using rule 77 (factorp -> empty .)
    LESS_THAN_EQUAL reduce using rule 77 (factorp -> empty .)
    GREATER_THAN    reduce using rule 77 (factorp -> empty .)
    GREATER_THAN_EQUAL reduce using rule 77 (factorp -> empty .)
    AND             reduce using rule 77 (factorp -> empty .)
    OR              reduce using rule 77 (factorp -> empty .)
    R_PARENTHESIS   reduce using rule 77 (factorp -> empty .)
    COMMA           reduce using rule 77 (factorp -> empty .)
    R_SQUARE_BRACKET reduce using rule 77 (factorp -> empty .)
    NOT             reduce using rule 77 (factorp -> empty .)
    CTE_INT         reduce using rule 77 (factorp -> empty .)
    CTE_FLOAT       reduce using rule 77 (factorp -> empty .)
    CTE_CHAR        reduce using rule 77 (factorp -> empty .)
    ID              reduce using rule 77 (factorp -> empty .)
    L_PARENTHESIS   reduce using rule 77 (factorp -> empty .)
    SEMICOLON       reduce using rule 77 (factorp -> empty .)
    HASTA           reduce using rule 77 (factorp -> empty .)
    HACER           reduce using rule 77 (factorp -> empty .)


state 188

    (89) cte -> ID operand_seen dimId .

    DETERMINANT     reduce using rule 89 (cte -> ID operand_seen dimId .)
    TRANSPOSED      reduce using rule 89 (cte -> ID operand_seen dimId .)
    INVERSE         reduce using rule 89 (cte -> ID operand_seen dimId .)
    MULTIPLY        reduce using rule 89 (cte -> ID operand_seen dimId .)
    DIVIDE          reduce using rule 89 (cte -> ID operand_seen dimId .)
    SUM             reduce using rule 89 (cte -> ID operand_seen dimId .)
    SUBTRACT        reduce using rule 89 (cte -> ID operand_seen dimId .)
    EQUALS          reduce using rule 89 (cte -> ID operand_seen dimId .)
    NOT_EQUAL       reduce using rule 89 (cte -> ID operand_seen dimId .)
    LESS_THAN       reduce using rule 89 (cte -> ID operand_seen dimId .)
    LESS_THAN_EQUAL reduce using rule 89 (cte -> ID operand_seen dimId .)
    GREATER_THAN    reduce using rule 89 (cte -> ID operand_seen dimId .)
    GREATER_THAN_EQUAL reduce using rule 89 (cte -> ID operand_seen dimId .)
    AND             reduce using rule 89 (cte -> ID operand_seen dimId .)
    OR              reduce using rule 89 (cte -> ID operand_seen dimId .)
    R_PARENTHESIS   reduce using rule 89 (cte -> ID operand_seen dimId .)
    COMMA           reduce using rule 89 (cte -> ID operand_seen dimId .)
    R_SQUARE_BRACKET reduce using rule 89 (cte -> ID operand_seen dimId .)
    NOT             reduce using rule 89 (cte -> ID operand_seen dimId .)
    CTE_INT         reduce using rule 89 (cte -> ID operand_seen dimId .)
    CTE_FLOAT       reduce using rule 89 (cte -> ID operand_seen dimId .)
    CTE_CHAR        reduce using rule 89 (cte -> ID operand_seen dimId .)
    ID              reduce using rule 89 (cte -> ID operand_seen dimId .)
    L_PARENTHESIS   reduce using rule 89 (cte -> ID operand_seen dimId .)
    SEMICOLON       reduce using rule 89 (cte -> ID operand_seen dimId .)
    HASTA           reduce using rule 89 (cte -> ID operand_seen dimId .)
    HACER           reduce using rule 89 (cte -> ID operand_seen dimId .)


state 189

    (91) llamadaFuncion -> ID L_PARENTHESIS expresion . llamadaFuncionp R_PARENTHESIS
    (92) llamadaFuncionp -> . expresion verify_parameter llamadaFuncionpp
    (93) llamadaFuncionp -> . empty
    (54) expresion -> . relacional apply_operation_expresion expresionp
    (55) expresion -> . NOT relacional expresionp
    (121) empty -> .
    (60) relacional -> . aritmetica apply_operation_relational relacionalp
    (69) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (74) factor -> . matriz apply_operation_factor factorp
    (80) matriz -> . cte matrizp
    (85) cte -> . CTE_INT
    (86) cte -> . CTE_FLOAT
    (87) cte -> . CTE_CHAR
    (88) cte -> . llamadaFuncion
    (89) cte -> . ID operand_seen dimId
    (90) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (91) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    NOT             shift and go to state 102
    R_PARENTHESIS   reduce using rule 121 (empty -> .)
    CTE_INT         shift and go to state 107
    CTE_FLOAT       shift and go to state 108
    CTE_CHAR        shift and go to state 109
    ID              shift and go to state 111
    L_PARENTHESIS   shift and go to state 99

    expresion                      shift and go to state 129
    llamadaFuncionp                shift and go to state 219
    empty                          shift and go to state 130
    relacional                     shift and go to state 101
    aritmetica                     shift and go to state 103
    factor                         shift and go to state 104
    matriz                         shift and go to state 105
    cte                            shift and go to state 106
    llamadaFuncion                 shift and go to state 110

state 190

    (100) lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .

    ID              reduce using rule 100 (lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .)
    REGRESA         reduce using rule 100 (lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .)
    LECTURA         reduce using rule 100 (lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .)
    ESCRIBE         reduce using rule 100 (lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .)
    SI              reduce using rule 100 (lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .)
    MIENTRAS        reduce using rule 100 (lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .)
    DESDE           reduce using rule 100 (lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .)
    R_CURLY_BRACKET reduce using rule 100 (lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .)


state 191

    (101) lecturap -> ID dimId lecturapp .

    R_PARENTHESIS   reduce using rule 101 (lecturap -> ID dimId lecturapp .)


state 192

    (102) lecturapp -> COMMA . lecturap
    (101) lecturap -> . ID dimId lecturapp

    ID              shift and go to state 113

    lecturap                       shift and go to state 220

state 193

    (103) lecturapp -> empty .

    R_PARENTHESIS   reduce using rule 103 (lecturapp -> empty .)


state 194

    (104) escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .

    ID              reduce using rule 104 (escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .)
    REGRESA         reduce using rule 104 (escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .)
    LECTURA         reduce using rule 104 (escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .)
    ESCRIBE         reduce using rule 104 (escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .)
    SI              reduce using rule 104 (escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .)
    MIENTRAS        reduce using rule 104 (escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .)
    DESDE           reduce using rule 104 (escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .)
    R_CURLY_BRACKET reduce using rule 104 (escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .)


state 195

    (107) escriturapp -> COMMA escriturap .

    R_PARENTHESIS   reduce using rule 107 (escriturapp -> COMMA escriturap .)


state 196

    (109) decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false . HAZ bloque decisionp

    HAZ             shift and go to state 221


state 197

    (115) cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS . jump_false HAZ bloque update_jump_cycle
    (110) jump_false -> .

    HAZ             reduce using rule 110 (jump_false -> .)

    jump_false                     shift and go to state 222

state 198

    (118) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN . operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle
    (79) operation_seen -> .

    NOT             reduce using rule 79 (operation_seen -> .)
    CTE_INT         reduce using rule 79 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 79 (operation_seen -> .)
    CTE_CHAR        reduce using rule 79 (operation_seen -> .)
    ID              reduce using rule 79 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 79 (operation_seen -> .)

    operation_seen                 shift and go to state 223

state 199

    (32) parametrop -> COMMA tipo ID save_param . parametrop
    (32) parametrop -> . COMMA tipo ID save_param parametrop
    (33) parametrop -> . empty
    (121) empty -> .

    COMMA           shift and go to state 88
    R_PARENTHESIS   reduce using rule 121 (empty -> .)

    parametrop                     shift and go to state 224
    empty                          shift and go to state 89

state 200

    (13) varpp -> COMMA ID variable_seen varppp varpp .

    SEMICOLON       reduce using rule 13 (varpp -> COMMA ID variable_seen varppp varpp .)


state 201

    (47) asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion . apply_operation_assign SEMICOLON
    (49) apply_operation_assign -> .

    SEMICOLON       reduce using rule 49 (apply_operation_assign -> .)

    apply_operation_assign         shift and go to state 225

state 202

    (97) funcionVacia -> ID set_func_scope L_PARENTHESIS llamadaFuncionp R_PARENTHESIS SEMICOLON .

    ID              reduce using rule 97 (funcionVacia -> ID set_func_scope L_PARENTHESIS llamadaFuncionp R_PARENTHESIS SEMICOLON .)
    REGRESA         reduce using rule 97 (funcionVacia -> ID set_func_scope L_PARENTHESIS llamadaFuncionp R_PARENTHESIS SEMICOLON .)
    LECTURA         reduce using rule 97 (funcionVacia -> ID set_func_scope L_PARENTHESIS llamadaFuncionp R_PARENTHESIS SEMICOLON .)
    ESCRIBE         reduce using rule 97 (funcionVacia -> ID set_func_scope L_PARENTHESIS llamadaFuncionp R_PARENTHESIS SEMICOLON .)
    SI              reduce using rule 97 (funcionVacia -> ID set_func_scope L_PARENTHESIS llamadaFuncionp R_PARENTHESIS SEMICOLON .)
    MIENTRAS        reduce using rule 97 (funcionVacia -> ID set_func_scope L_PARENTHESIS llamadaFuncionp R_PARENTHESIS SEMICOLON .)
    DESDE           reduce using rule 97 (funcionVacia -> ID set_func_scope L_PARENTHESIS llamadaFuncionp R_PARENTHESIS SEMICOLON .)
    R_CURLY_BRACKET reduce using rule 97 (funcionVacia -> ID set_func_scope L_PARENTHESIS llamadaFuncionp R_PARENTHESIS SEMICOLON .)


state 203

    (92) llamadaFuncionp -> expresion verify_parameter llamadaFuncionpp .

    R_PARENTHESIS   reduce using rule 92 (llamadaFuncionp -> expresion verify_parameter llamadaFuncionpp .)


state 204

    (94) llamadaFuncionpp -> COMMA . expresion verify_parameter llamadaFuncionpp
    (54) expresion -> . relacional apply_operation_expresion expresionp
    (55) expresion -> . NOT relacional expresionp
    (60) relacional -> . aritmetica apply_operation_relational relacionalp
    (69) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (74) factor -> . matriz apply_operation_factor factorp
    (80) matriz -> . cte matrizp
    (85) cte -> . CTE_INT
    (86) cte -> . CTE_FLOAT
    (87) cte -> . CTE_CHAR
    (88) cte -> . llamadaFuncion
    (89) cte -> . ID operand_seen dimId
    (90) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (91) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    NOT             shift and go to state 102
    CTE_INT         shift and go to state 107
    CTE_FLOAT       shift and go to state 108
    CTE_CHAR        shift and go to state 109
    ID              shift and go to state 111
    L_PARENTHESIS   shift and go to state 99

    expresion                      shift and go to state 226
    relacional                     shift and go to state 101
    aritmetica                     shift and go to state 103
    factor                         shift and go to state 104
    matriz                         shift and go to state 105
    cte                            shift and go to state 106
    llamadaFuncion                 shift and go to state 110

state 205

    (95) llamadaFuncionpp -> empty .

    R_PARENTHESIS   reduce using rule 95 (llamadaFuncionpp -> empty .)


state 206

    (90) cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS . operation_seen
    (79) operation_seen -> .

    DETERMINANT     reduce using rule 79 (operation_seen -> .)
    TRANSPOSED      reduce using rule 79 (operation_seen -> .)
    INVERSE         reduce using rule 79 (operation_seen -> .)
    MULTIPLY        reduce using rule 79 (operation_seen -> .)
    DIVIDE          reduce using rule 79 (operation_seen -> .)
    SUM             reduce using rule 79 (operation_seen -> .)
    SUBTRACT        reduce using rule 79 (operation_seen -> .)
    EQUALS          reduce using rule 79 (operation_seen -> .)
    NOT_EQUAL       reduce using rule 79 (operation_seen -> .)
    LESS_THAN       reduce using rule 79 (operation_seen -> .)
    LESS_THAN_EQUAL reduce using rule 79 (operation_seen -> .)
    GREATER_THAN    reduce using rule 79 (operation_seen -> .)
    GREATER_THAN_EQUAL reduce using rule 79 (operation_seen -> .)
    AND             reduce using rule 79 (operation_seen -> .)
    OR              reduce using rule 79 (operation_seen -> .)
    R_PARENTHESIS   reduce using rule 79 (operation_seen -> .)
    COMMA           reduce using rule 79 (operation_seen -> .)
    R_SQUARE_BRACKET reduce using rule 79 (operation_seen -> .)
    NOT             reduce using rule 79 (operation_seen -> .)
    CTE_INT         reduce using rule 79 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 79 (operation_seen -> .)
    CTE_CHAR        reduce using rule 79 (operation_seen -> .)
    ID              reduce using rule 79 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 79 (operation_seen -> .)
    SEMICOLON       reduce using rule 79 (operation_seen -> .)
    HASTA           reduce using rule 79 (operation_seen -> .)
    HACER           reduce using rule 79 (operation_seen -> .)

    operation_seen                 shift and go to state 227

state 207

    (56) expresionp -> AND operation_seen . expresion
    (54) expresion -> . relacional apply_operation_expresion expresionp
    (55) expresion -> . NOT relacional expresionp
    (60) relacional -> . aritmetica apply_operation_relational relacionalp
    (69) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (74) factor -> . matriz apply_operation_factor factorp
    (80) matriz -> . cte matrizp
    (85) cte -> . CTE_INT
    (86) cte -> . CTE_FLOAT
    (87) cte -> . CTE_CHAR
    (88) cte -> . llamadaFuncion
    (89) cte -> . ID operand_seen dimId
    (90) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (91) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    NOT             shift and go to state 102
    CTE_INT         shift and go to state 107
    CTE_FLOAT       shift and go to state 108
    CTE_CHAR        shift and go to state 109
    ID              shift and go to state 111
    L_PARENTHESIS   shift and go to state 99

    expresion                      shift and go to state 228
    relacional                     shift and go to state 101
    aritmetica                     shift and go to state 103
    factor                         shift and go to state 104
    matriz                         shift and go to state 105
    cte                            shift and go to state 106
    llamadaFuncion                 shift and go to state 110

state 208

    (57) expresionp -> OR operation_seen . expresion
    (54) expresion -> . relacional apply_operation_expresion expresionp
    (55) expresion -> . NOT relacional expresionp
    (60) relacional -> . aritmetica apply_operation_relational relacionalp
    (69) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (74) factor -> . matriz apply_operation_factor factorp
    (80) matriz -> . cte matrizp
    (85) cte -> . CTE_INT
    (86) cte -> . CTE_FLOAT
    (87) cte -> . CTE_CHAR
    (88) cte -> . llamadaFuncion
    (89) cte -> . ID operand_seen dimId
    (90) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (91) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    NOT             shift and go to state 102
    CTE_INT         shift and go to state 107
    CTE_FLOAT       shift and go to state 108
    CTE_CHAR        shift and go to state 109
    ID              shift and go to state 111
    L_PARENTHESIS   shift and go to state 99

    expresion                      shift and go to state 229
    relacional                     shift and go to state 101
    aritmetica                     shift and go to state 103
    factor                         shift and go to state 104
    matriz                         shift and go to state 105
    cte                            shift and go to state 106
    llamadaFuncion                 shift and go to state 110

state 209

    (61) relacionalp -> EQUALS operation_seen . relacional
    (60) relacional -> . aritmetica apply_operation_relational relacionalp
    (69) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (74) factor -> . matriz apply_operation_factor factorp
    (80) matriz -> . cte matrizp
    (85) cte -> . CTE_INT
    (86) cte -> . CTE_FLOAT
    (87) cte -> . CTE_CHAR
    (88) cte -> . llamadaFuncion
    (89) cte -> . ID operand_seen dimId
    (90) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (91) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    CTE_INT         shift and go to state 107
    CTE_FLOAT       shift and go to state 108
    CTE_CHAR        shift and go to state 109
    ID              shift and go to state 111
    L_PARENTHESIS   shift and go to state 99

    relacional                     shift and go to state 230
    aritmetica                     shift and go to state 103
    factor                         shift and go to state 104
    matriz                         shift and go to state 105
    cte                            shift and go to state 106
    llamadaFuncion                 shift and go to state 110

state 210

    (62) relacionalp -> NOT_EQUAL operation_seen . relacional
    (60) relacional -> . aritmetica apply_operation_relational relacionalp
    (69) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (74) factor -> . matriz apply_operation_factor factorp
    (80) matriz -> . cte matrizp
    (85) cte -> . CTE_INT
    (86) cte -> . CTE_FLOAT
    (87) cte -> . CTE_CHAR
    (88) cte -> . llamadaFuncion
    (89) cte -> . ID operand_seen dimId
    (90) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (91) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    CTE_INT         shift and go to state 107
    CTE_FLOAT       shift and go to state 108
    CTE_CHAR        shift and go to state 109
    ID              shift and go to state 111
    L_PARENTHESIS   shift and go to state 99

    relacional                     shift and go to state 231
    aritmetica                     shift and go to state 103
    factor                         shift and go to state 104
    matriz                         shift and go to state 105
    cte                            shift and go to state 106
    llamadaFuncion                 shift and go to state 110

state 211

    (63) relacionalp -> LESS_THAN operation_seen . relacional
    (60) relacional -> . aritmetica apply_operation_relational relacionalp
    (69) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (74) factor -> . matriz apply_operation_factor factorp
    (80) matriz -> . cte matrizp
    (85) cte -> . CTE_INT
    (86) cte -> . CTE_FLOAT
    (87) cte -> . CTE_CHAR
    (88) cte -> . llamadaFuncion
    (89) cte -> . ID operand_seen dimId
    (90) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (91) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    CTE_INT         shift and go to state 107
    CTE_FLOAT       shift and go to state 108
    CTE_CHAR        shift and go to state 109
    ID              shift and go to state 111
    L_PARENTHESIS   shift and go to state 99

    relacional                     shift and go to state 232
    aritmetica                     shift and go to state 103
    factor                         shift and go to state 104
    matriz                         shift and go to state 105
    cte                            shift and go to state 106
    llamadaFuncion                 shift and go to state 110

state 212

    (64) relacionalp -> LESS_THAN_EQUAL operation_seen . relacional
    (60) relacional -> . aritmetica apply_operation_relational relacionalp
    (69) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (74) factor -> . matriz apply_operation_factor factorp
    (80) matriz -> . cte matrizp
    (85) cte -> . CTE_INT
    (86) cte -> . CTE_FLOAT
    (87) cte -> . CTE_CHAR
    (88) cte -> . llamadaFuncion
    (89) cte -> . ID operand_seen dimId
    (90) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (91) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    CTE_INT         shift and go to state 107
    CTE_FLOAT       shift and go to state 108
    CTE_CHAR        shift and go to state 109
    ID              shift and go to state 111
    L_PARENTHESIS   shift and go to state 99

    relacional                     shift and go to state 233
    aritmetica                     shift and go to state 103
    factor                         shift and go to state 104
    matriz                         shift and go to state 105
    cte                            shift and go to state 106
    llamadaFuncion                 shift and go to state 110

state 213

    (65) relacionalp -> GREATER_THAN operation_seen . relacional
    (60) relacional -> . aritmetica apply_operation_relational relacionalp
    (69) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (74) factor -> . matriz apply_operation_factor factorp
    (80) matriz -> . cte matrizp
    (85) cte -> . CTE_INT
    (86) cte -> . CTE_FLOAT
    (87) cte -> . CTE_CHAR
    (88) cte -> . llamadaFuncion
    (89) cte -> . ID operand_seen dimId
    (90) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (91) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    CTE_INT         shift and go to state 107
    CTE_FLOAT       shift and go to state 108
    CTE_CHAR        shift and go to state 109
    ID              shift and go to state 111
    L_PARENTHESIS   shift and go to state 99

    relacional                     shift and go to state 234
    aritmetica                     shift and go to state 103
    factor                         shift and go to state 104
    matriz                         shift and go to state 105
    cte                            shift and go to state 106
    llamadaFuncion                 shift and go to state 110

state 214

    (66) relacionalp -> GREATER_THAN_EQUAL operation_seen . relacional
    (60) relacional -> . aritmetica apply_operation_relational relacionalp
    (69) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (74) factor -> . matriz apply_operation_factor factorp
    (80) matriz -> . cte matrizp
    (85) cte -> . CTE_INT
    (86) cte -> . CTE_FLOAT
    (87) cte -> . CTE_CHAR
    (88) cte -> . llamadaFuncion
    (89) cte -> . ID operand_seen dimId
    (90) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (91) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    CTE_INT         shift and go to state 107
    CTE_FLOAT       shift and go to state 108
    CTE_CHAR        shift and go to state 109
    ID              shift and go to state 111
    L_PARENTHESIS   shift and go to state 99

    relacional                     shift and go to state 235
    aritmetica                     shift and go to state 103
    factor                         shift and go to state 104
    matriz                         shift and go to state 105
    cte                            shift and go to state 106
    llamadaFuncion                 shift and go to state 110

state 215

    (70) aritmeticap -> SUM operation_seen . aritmetica
    (69) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (74) factor -> . matriz apply_operation_factor factorp
    (80) matriz -> . cte matrizp
    (85) cte -> . CTE_INT
    (86) cte -> . CTE_FLOAT
    (87) cte -> . CTE_CHAR
    (88) cte -> . llamadaFuncion
    (89) cte -> . ID operand_seen dimId
    (90) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (91) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    CTE_INT         shift and go to state 107
    CTE_FLOAT       shift and go to state 108
    CTE_CHAR        shift and go to state 109
    ID              shift and go to state 111
    L_PARENTHESIS   shift and go to state 99

    aritmetica                     shift and go to state 236
    factor                         shift and go to state 104
    matriz                         shift and go to state 105
    cte                            shift and go to state 106
    llamadaFuncion                 shift and go to state 110

state 216

    (71) aritmeticap -> SUBTRACT operation_seen . aritmetica
    (69) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (74) factor -> . matriz apply_operation_factor factorp
    (80) matriz -> . cte matrizp
    (85) cte -> . CTE_INT
    (86) cte -> . CTE_FLOAT
    (87) cte -> . CTE_CHAR
    (88) cte -> . llamadaFuncion
    (89) cte -> . ID operand_seen dimId
    (90) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (91) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    CTE_INT         shift and go to state 107
    CTE_FLOAT       shift and go to state 108
    CTE_CHAR        shift and go to state 109
    ID              shift and go to state 111
    L_PARENTHESIS   shift and go to state 99

    aritmetica                     shift and go to state 237
    factor                         shift and go to state 104
    matriz                         shift and go to state 105
    cte                            shift and go to state 106
    llamadaFuncion                 shift and go to state 110

state 217

    (75) factorp -> MULTIPLY operation_seen . factor
    (74) factor -> . matriz apply_operation_factor factorp
    (80) matriz -> . cte matrizp
    (85) cte -> . CTE_INT
    (86) cte -> . CTE_FLOAT
    (87) cte -> . CTE_CHAR
    (88) cte -> . llamadaFuncion
    (89) cte -> . ID operand_seen dimId
    (90) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (91) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    CTE_INT         shift and go to state 107
    CTE_FLOAT       shift and go to state 108
    CTE_CHAR        shift and go to state 109
    ID              shift and go to state 111
    L_PARENTHESIS   shift and go to state 99

    factor                         shift and go to state 238
    matriz                         shift and go to state 105
    cte                            shift and go to state 106
    llamadaFuncion                 shift and go to state 110

state 218

    (76) factorp -> DIVIDE operation_seen . factor
    (74) factor -> . matriz apply_operation_factor factorp
    (80) matriz -> . cte matrizp
    (85) cte -> . CTE_INT
    (86) cte -> . CTE_FLOAT
    (87) cte -> . CTE_CHAR
    (88) cte -> . llamadaFuncion
    (89) cte -> . ID operand_seen dimId
    (90) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (91) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    CTE_INT         shift and go to state 107
    CTE_FLOAT       shift and go to state 108
    CTE_CHAR        shift and go to state 109
    ID              shift and go to state 111
    L_PARENTHESIS   shift and go to state 99

    factor                         shift and go to state 239
    matriz                         shift and go to state 105
    cte                            shift and go to state 106
    llamadaFuncion                 shift and go to state 110

state 219

    (91) llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp . R_PARENTHESIS

    R_PARENTHESIS   shift and go to state 240


state 220

    (102) lecturapp -> COMMA lecturap .

    R_PARENTHESIS   reduce using rule 102 (lecturapp -> COMMA lecturap .)


state 221

    (109) decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ . bloque decisionp
    (36) bloque -> . L_CURLY_BRACKET bloquep R_CURLY_BRACKET

    L_CURLY_BRACKET shift and go to state 41

    bloque                         shift and go to state 241

state 222

    (115) cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false . HAZ bloque update_jump_cycle

    HAZ             shift and go to state 242


state 223

    (118) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen . expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle
    (54) expresion -> . relacional apply_operation_expresion expresionp
    (55) expresion -> . NOT relacional expresionp
    (60) relacional -> . aritmetica apply_operation_relational relacionalp
    (69) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (74) factor -> . matriz apply_operation_factor factorp
    (80) matriz -> . cte matrizp
    (85) cte -> . CTE_INT
    (86) cte -> . CTE_FLOAT
    (87) cte -> . CTE_CHAR
    (88) cte -> . llamadaFuncion
    (89) cte -> . ID operand_seen dimId
    (90) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (91) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    NOT             shift and go to state 102
    CTE_INT         shift and go to state 107
    CTE_FLOAT       shift and go to state 108
    CTE_CHAR        shift and go to state 109
    ID              shift and go to state 111
    L_PARENTHESIS   shift and go to state 99

    expresion                      shift and go to state 243
    relacional                     shift and go to state 101
    aritmetica                     shift and go to state 103
    factor                         shift and go to state 104
    matriz                         shift and go to state 105
    cte                            shift and go to state 106
    llamadaFuncion                 shift and go to state 110

state 224

    (32) parametrop -> COMMA tipo ID save_param parametrop .

    R_PARENTHESIS   reduce using rule 32 (parametrop -> COMMA tipo ID save_param parametrop .)


state 225

    (47) asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign . SEMICOLON

    SEMICOLON       shift and go to state 244


state 226

    (94) llamadaFuncionpp -> COMMA expresion . verify_parameter llamadaFuncionpp
    (96) verify_parameter -> .

    COMMA           reduce using rule 96 (verify_parameter -> .)
    R_PARENTHESIS   reduce using rule 96 (verify_parameter -> .)

    verify_parameter               shift and go to state 245

state 227

    (90) cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .

    DETERMINANT     reduce using rule 90 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    TRANSPOSED      reduce using rule 90 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    INVERSE         reduce using rule 90 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    MULTIPLY        reduce using rule 90 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    DIVIDE          reduce using rule 90 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    SUM             reduce using rule 90 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    SUBTRACT        reduce using rule 90 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    EQUALS          reduce using rule 90 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    NOT_EQUAL       reduce using rule 90 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    LESS_THAN       reduce using rule 90 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    LESS_THAN_EQUAL reduce using rule 90 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    GREATER_THAN    reduce using rule 90 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    GREATER_THAN_EQUAL reduce using rule 90 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    AND             reduce using rule 90 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    OR              reduce using rule 90 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    R_PARENTHESIS   reduce using rule 90 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    COMMA           reduce using rule 90 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    R_SQUARE_BRACKET reduce using rule 90 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    NOT             reduce using rule 90 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    CTE_INT         reduce using rule 90 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    CTE_FLOAT       reduce using rule 90 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    CTE_CHAR        reduce using rule 90 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    ID              reduce using rule 90 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    L_PARENTHESIS   reduce using rule 90 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    SEMICOLON       reduce using rule 90 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    HASTA           reduce using rule 90 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    HACER           reduce using rule 90 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)


state 228

    (56) expresionp -> AND operation_seen expresion .

    R_PARENTHESIS   reduce using rule 56 (expresionp -> AND operation_seen expresion .)
    COMMA           reduce using rule 56 (expresionp -> AND operation_seen expresion .)
    R_SQUARE_BRACKET reduce using rule 56 (expresionp -> AND operation_seen expresion .)
    NOT             reduce using rule 56 (expresionp -> AND operation_seen expresion .)
    CTE_INT         reduce using rule 56 (expresionp -> AND operation_seen expresion .)
    CTE_FLOAT       reduce using rule 56 (expresionp -> AND operation_seen expresion .)
    CTE_CHAR        reduce using rule 56 (expresionp -> AND operation_seen expresion .)
    ID              reduce using rule 56 (expresionp -> AND operation_seen expresion .)
    L_PARENTHESIS   reduce using rule 56 (expresionp -> AND operation_seen expresion .)
    SEMICOLON       reduce using rule 56 (expresionp -> AND operation_seen expresion .)
    HASTA           reduce using rule 56 (expresionp -> AND operation_seen expresion .)
    HACER           reduce using rule 56 (expresionp -> AND operation_seen expresion .)


state 229

    (57) expresionp -> OR operation_seen expresion .

    R_PARENTHESIS   reduce using rule 57 (expresionp -> OR operation_seen expresion .)
    COMMA           reduce using rule 57 (expresionp -> OR operation_seen expresion .)
    R_SQUARE_BRACKET reduce using rule 57 (expresionp -> OR operation_seen expresion .)
    NOT             reduce using rule 57 (expresionp -> OR operation_seen expresion .)
    CTE_INT         reduce using rule 57 (expresionp -> OR operation_seen expresion .)
    CTE_FLOAT       reduce using rule 57 (expresionp -> OR operation_seen expresion .)
    CTE_CHAR        reduce using rule 57 (expresionp -> OR operation_seen expresion .)
    ID              reduce using rule 57 (expresionp -> OR operation_seen expresion .)
    L_PARENTHESIS   reduce using rule 57 (expresionp -> OR operation_seen expresion .)
    SEMICOLON       reduce using rule 57 (expresionp -> OR operation_seen expresion .)
    HASTA           reduce using rule 57 (expresionp -> OR operation_seen expresion .)
    HACER           reduce using rule 57 (expresionp -> OR operation_seen expresion .)


state 230

    (61) relacionalp -> EQUALS operation_seen relacional .

    AND             reduce using rule 61 (relacionalp -> EQUALS operation_seen relacional .)
    OR              reduce using rule 61 (relacionalp -> EQUALS operation_seen relacional .)
    R_PARENTHESIS   reduce using rule 61 (relacionalp -> EQUALS operation_seen relacional .)
    COMMA           reduce using rule 61 (relacionalp -> EQUALS operation_seen relacional .)
    R_SQUARE_BRACKET reduce using rule 61 (relacionalp -> EQUALS operation_seen relacional .)
    NOT             reduce using rule 61 (relacionalp -> EQUALS operation_seen relacional .)
    CTE_INT         reduce using rule 61 (relacionalp -> EQUALS operation_seen relacional .)
    CTE_FLOAT       reduce using rule 61 (relacionalp -> EQUALS operation_seen relacional .)
    CTE_CHAR        reduce using rule 61 (relacionalp -> EQUALS operation_seen relacional .)
    ID              reduce using rule 61 (relacionalp -> EQUALS operation_seen relacional .)
    L_PARENTHESIS   reduce using rule 61 (relacionalp -> EQUALS operation_seen relacional .)
    SEMICOLON       reduce using rule 61 (relacionalp -> EQUALS operation_seen relacional .)
    HASTA           reduce using rule 61 (relacionalp -> EQUALS operation_seen relacional .)
    HACER           reduce using rule 61 (relacionalp -> EQUALS operation_seen relacional .)


state 231

    (62) relacionalp -> NOT_EQUAL operation_seen relacional .

    AND             reduce using rule 62 (relacionalp -> NOT_EQUAL operation_seen relacional .)
    OR              reduce using rule 62 (relacionalp -> NOT_EQUAL operation_seen relacional .)
    R_PARENTHESIS   reduce using rule 62 (relacionalp -> NOT_EQUAL operation_seen relacional .)
    COMMA           reduce using rule 62 (relacionalp -> NOT_EQUAL operation_seen relacional .)
    R_SQUARE_BRACKET reduce using rule 62 (relacionalp -> NOT_EQUAL operation_seen relacional .)
    NOT             reduce using rule 62 (relacionalp -> NOT_EQUAL operation_seen relacional .)
    CTE_INT         reduce using rule 62 (relacionalp -> NOT_EQUAL operation_seen relacional .)
    CTE_FLOAT       reduce using rule 62 (relacionalp -> NOT_EQUAL operation_seen relacional .)
    CTE_CHAR        reduce using rule 62 (relacionalp -> NOT_EQUAL operation_seen relacional .)
    ID              reduce using rule 62 (relacionalp -> NOT_EQUAL operation_seen relacional .)
    L_PARENTHESIS   reduce using rule 62 (relacionalp -> NOT_EQUAL operation_seen relacional .)
    SEMICOLON       reduce using rule 62 (relacionalp -> NOT_EQUAL operation_seen relacional .)
    HASTA           reduce using rule 62 (relacionalp -> NOT_EQUAL operation_seen relacional .)
    HACER           reduce using rule 62 (relacionalp -> NOT_EQUAL operation_seen relacional .)


state 232

    (63) relacionalp -> LESS_THAN operation_seen relacional .

    AND             reduce using rule 63 (relacionalp -> LESS_THAN operation_seen relacional .)
    OR              reduce using rule 63 (relacionalp -> LESS_THAN operation_seen relacional .)
    R_PARENTHESIS   reduce using rule 63 (relacionalp -> LESS_THAN operation_seen relacional .)
    COMMA           reduce using rule 63 (relacionalp -> LESS_THAN operation_seen relacional .)
    R_SQUARE_BRACKET reduce using rule 63 (relacionalp -> LESS_THAN operation_seen relacional .)
    NOT             reduce using rule 63 (relacionalp -> LESS_THAN operation_seen relacional .)
    CTE_INT         reduce using rule 63 (relacionalp -> LESS_THAN operation_seen relacional .)
    CTE_FLOAT       reduce using rule 63 (relacionalp -> LESS_THAN operation_seen relacional .)
    CTE_CHAR        reduce using rule 63 (relacionalp -> LESS_THAN operation_seen relacional .)
    ID              reduce using rule 63 (relacionalp -> LESS_THAN operation_seen relacional .)
    L_PARENTHESIS   reduce using rule 63 (relacionalp -> LESS_THAN operation_seen relacional .)
    SEMICOLON       reduce using rule 63 (relacionalp -> LESS_THAN operation_seen relacional .)
    HASTA           reduce using rule 63 (relacionalp -> LESS_THAN operation_seen relacional .)
    HACER           reduce using rule 63 (relacionalp -> LESS_THAN operation_seen relacional .)


state 233

    (64) relacionalp -> LESS_THAN_EQUAL operation_seen relacional .

    AND             reduce using rule 64 (relacionalp -> LESS_THAN_EQUAL operation_seen relacional .)
    OR              reduce using rule 64 (relacionalp -> LESS_THAN_EQUAL operation_seen relacional .)
    R_PARENTHESIS   reduce using rule 64 (relacionalp -> LESS_THAN_EQUAL operation_seen relacional .)
    COMMA           reduce using rule 64 (relacionalp -> LESS_THAN_EQUAL operation_seen relacional .)
    R_SQUARE_BRACKET reduce using rule 64 (relacionalp -> LESS_THAN_EQUAL operation_seen relacional .)
    NOT             reduce using rule 64 (relacionalp -> LESS_THAN_EQUAL operation_seen relacional .)
    CTE_INT         reduce using rule 64 (relacionalp -> LESS_THAN_EQUAL operation_seen relacional .)
    CTE_FLOAT       reduce using rule 64 (relacionalp -> LESS_THAN_EQUAL operation_seen relacional .)
    CTE_CHAR        reduce using rule 64 (relacionalp -> LESS_THAN_EQUAL operation_seen relacional .)
    ID              reduce using rule 64 (relacionalp -> LESS_THAN_EQUAL operation_seen relacional .)
    L_PARENTHESIS   reduce using rule 64 (relacionalp -> LESS_THAN_EQUAL operation_seen relacional .)
    SEMICOLON       reduce using rule 64 (relacionalp -> LESS_THAN_EQUAL operation_seen relacional .)
    HASTA           reduce using rule 64 (relacionalp -> LESS_THAN_EQUAL operation_seen relacional .)
    HACER           reduce using rule 64 (relacionalp -> LESS_THAN_EQUAL operation_seen relacional .)


state 234

    (65) relacionalp -> GREATER_THAN operation_seen relacional .

    AND             reduce using rule 65 (relacionalp -> GREATER_THAN operation_seen relacional .)
    OR              reduce using rule 65 (relacionalp -> GREATER_THAN operation_seen relacional .)
    R_PARENTHESIS   reduce using rule 65 (relacionalp -> GREATER_THAN operation_seen relacional .)
    COMMA           reduce using rule 65 (relacionalp -> GREATER_THAN operation_seen relacional .)
    R_SQUARE_BRACKET reduce using rule 65 (relacionalp -> GREATER_THAN operation_seen relacional .)
    NOT             reduce using rule 65 (relacionalp -> GREATER_THAN operation_seen relacional .)
    CTE_INT         reduce using rule 65 (relacionalp -> GREATER_THAN operation_seen relacional .)
    CTE_FLOAT       reduce using rule 65 (relacionalp -> GREATER_THAN operation_seen relacional .)
    CTE_CHAR        reduce using rule 65 (relacionalp -> GREATER_THAN operation_seen relacional .)
    ID              reduce using rule 65 (relacionalp -> GREATER_THAN operation_seen relacional .)
    L_PARENTHESIS   reduce using rule 65 (relacionalp -> GREATER_THAN operation_seen relacional .)
    SEMICOLON       reduce using rule 65 (relacionalp -> GREATER_THAN operation_seen relacional .)
    HASTA           reduce using rule 65 (relacionalp -> GREATER_THAN operation_seen relacional .)
    HACER           reduce using rule 65 (relacionalp -> GREATER_THAN operation_seen relacional .)


state 235

    (66) relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .

    AND             reduce using rule 66 (relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .)
    OR              reduce using rule 66 (relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .)
    R_PARENTHESIS   reduce using rule 66 (relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .)
    COMMA           reduce using rule 66 (relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .)
    R_SQUARE_BRACKET reduce using rule 66 (relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .)
    NOT             reduce using rule 66 (relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .)
    CTE_INT         reduce using rule 66 (relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .)
    CTE_FLOAT       reduce using rule 66 (relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .)
    CTE_CHAR        reduce using rule 66 (relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .)
    ID              reduce using rule 66 (relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .)
    L_PARENTHESIS   reduce using rule 66 (relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .)
    SEMICOLON       reduce using rule 66 (relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .)
    HASTA           reduce using rule 66 (relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .)
    HACER           reduce using rule 66 (relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .)


state 236

    (70) aritmeticap -> SUM operation_seen aritmetica .

    EQUALS          reduce using rule 70 (aritmeticap -> SUM operation_seen aritmetica .)
    NOT_EQUAL       reduce using rule 70 (aritmeticap -> SUM operation_seen aritmetica .)
    LESS_THAN       reduce using rule 70 (aritmeticap -> SUM operation_seen aritmetica .)
    LESS_THAN_EQUAL reduce using rule 70 (aritmeticap -> SUM operation_seen aritmetica .)
    GREATER_THAN    reduce using rule 70 (aritmeticap -> SUM operation_seen aritmetica .)
    GREATER_THAN_EQUAL reduce using rule 70 (aritmeticap -> SUM operation_seen aritmetica .)
    AND             reduce using rule 70 (aritmeticap -> SUM operation_seen aritmetica .)
    OR              reduce using rule 70 (aritmeticap -> SUM operation_seen aritmetica .)
    R_PARENTHESIS   reduce using rule 70 (aritmeticap -> SUM operation_seen aritmetica .)
    COMMA           reduce using rule 70 (aritmeticap -> SUM operation_seen aritmetica .)
    R_SQUARE_BRACKET reduce using rule 70 (aritmeticap -> SUM operation_seen aritmetica .)
    NOT             reduce using rule 70 (aritmeticap -> SUM operation_seen aritmetica .)
    CTE_INT         reduce using rule 70 (aritmeticap -> SUM operation_seen aritmetica .)
    CTE_FLOAT       reduce using rule 70 (aritmeticap -> SUM operation_seen aritmetica .)
    CTE_CHAR        reduce using rule 70 (aritmeticap -> SUM operation_seen aritmetica .)
    ID              reduce using rule 70 (aritmeticap -> SUM operation_seen aritmetica .)
    L_PARENTHESIS   reduce using rule 70 (aritmeticap -> SUM operation_seen aritmetica .)
    SEMICOLON       reduce using rule 70 (aritmeticap -> SUM operation_seen aritmetica .)
    HASTA           reduce using rule 70 (aritmeticap -> SUM operation_seen aritmetica .)
    HACER           reduce using rule 70 (aritmeticap -> SUM operation_seen aritmetica .)


state 237

    (71) aritmeticap -> SUBTRACT operation_seen aritmetica .

    EQUALS          reduce using rule 71 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    NOT_EQUAL       reduce using rule 71 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    LESS_THAN       reduce using rule 71 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    LESS_THAN_EQUAL reduce using rule 71 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    GREATER_THAN    reduce using rule 71 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    GREATER_THAN_EQUAL reduce using rule 71 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    AND             reduce using rule 71 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    OR              reduce using rule 71 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    R_PARENTHESIS   reduce using rule 71 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    COMMA           reduce using rule 71 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    R_SQUARE_BRACKET reduce using rule 71 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    NOT             reduce using rule 71 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    CTE_INT         reduce using rule 71 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    CTE_FLOAT       reduce using rule 71 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    CTE_CHAR        reduce using rule 71 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    ID              reduce using rule 71 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    L_PARENTHESIS   reduce using rule 71 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    SEMICOLON       reduce using rule 71 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    HASTA           reduce using rule 71 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    HACER           reduce using rule 71 (aritmeticap -> SUBTRACT operation_seen aritmetica .)


state 238

    (75) factorp -> MULTIPLY operation_seen factor .

    SUM             reduce using rule 75 (factorp -> MULTIPLY operation_seen factor .)
    SUBTRACT        reduce using rule 75 (factorp -> MULTIPLY operation_seen factor .)
    EQUALS          reduce using rule 75 (factorp -> MULTIPLY operation_seen factor .)
    NOT_EQUAL       reduce using rule 75 (factorp -> MULTIPLY operation_seen factor .)
    LESS_THAN       reduce using rule 75 (factorp -> MULTIPLY operation_seen factor .)
    LESS_THAN_EQUAL reduce using rule 75 (factorp -> MULTIPLY operation_seen factor .)
    GREATER_THAN    reduce using rule 75 (factorp -> MULTIPLY operation_seen factor .)
    GREATER_THAN_EQUAL reduce using rule 75 (factorp -> MULTIPLY operation_seen factor .)
    AND             reduce using rule 75 (factorp -> MULTIPLY operation_seen factor .)
    OR              reduce using rule 75 (factorp -> MULTIPLY operation_seen factor .)
    R_PARENTHESIS   reduce using rule 75 (factorp -> MULTIPLY operation_seen factor .)
    COMMA           reduce using rule 75 (factorp -> MULTIPLY operation_seen factor .)
    R_SQUARE_BRACKET reduce using rule 75 (factorp -> MULTIPLY operation_seen factor .)
    NOT             reduce using rule 75 (factorp -> MULTIPLY operation_seen factor .)
    CTE_INT         reduce using rule 75 (factorp -> MULTIPLY operation_seen factor .)
    CTE_FLOAT       reduce using rule 75 (factorp -> MULTIPLY operation_seen factor .)
    CTE_CHAR        reduce using rule 75 (factorp -> MULTIPLY operation_seen factor .)
    ID              reduce using rule 75 (factorp -> MULTIPLY operation_seen factor .)
    L_PARENTHESIS   reduce using rule 75 (factorp -> MULTIPLY operation_seen factor .)
    SEMICOLON       reduce using rule 75 (factorp -> MULTIPLY operation_seen factor .)
    HASTA           reduce using rule 75 (factorp -> MULTIPLY operation_seen factor .)
    HACER           reduce using rule 75 (factorp -> MULTIPLY operation_seen factor .)


state 239

    (76) factorp -> DIVIDE operation_seen factor .

    SUM             reduce using rule 76 (factorp -> DIVIDE operation_seen factor .)
    SUBTRACT        reduce using rule 76 (factorp -> DIVIDE operation_seen factor .)
    EQUALS          reduce using rule 76 (factorp -> DIVIDE operation_seen factor .)
    NOT_EQUAL       reduce using rule 76 (factorp -> DIVIDE operation_seen factor .)
    LESS_THAN       reduce using rule 76 (factorp -> DIVIDE operation_seen factor .)
    LESS_THAN_EQUAL reduce using rule 76 (factorp -> DIVIDE operation_seen factor .)
    GREATER_THAN    reduce using rule 76 (factorp -> DIVIDE operation_seen factor .)
    GREATER_THAN_EQUAL reduce using rule 76 (factorp -> DIVIDE operation_seen factor .)
    AND             reduce using rule 76 (factorp -> DIVIDE operation_seen factor .)
    OR              reduce using rule 76 (factorp -> DIVIDE operation_seen factor .)
    R_PARENTHESIS   reduce using rule 76 (factorp -> DIVIDE operation_seen factor .)
    COMMA           reduce using rule 76 (factorp -> DIVIDE operation_seen factor .)
    R_SQUARE_BRACKET reduce using rule 76 (factorp -> DIVIDE operation_seen factor .)
    NOT             reduce using rule 76 (factorp -> DIVIDE operation_seen factor .)
    CTE_INT         reduce using rule 76 (factorp -> DIVIDE operation_seen factor .)
    CTE_FLOAT       reduce using rule 76 (factorp -> DIVIDE operation_seen factor .)
    CTE_CHAR        reduce using rule 76 (factorp -> DIVIDE operation_seen factor .)
    ID              reduce using rule 76 (factorp -> DIVIDE operation_seen factor .)
    L_PARENTHESIS   reduce using rule 76 (factorp -> DIVIDE operation_seen factor .)
    SEMICOLON       reduce using rule 76 (factorp -> DIVIDE operation_seen factor .)
    HASTA           reduce using rule 76 (factorp -> DIVIDE operation_seen factor .)
    HACER           reduce using rule 76 (factorp -> DIVIDE operation_seen factor .)


state 240

    (91) llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .

    DETERMINANT     reduce using rule 91 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    TRANSPOSED      reduce using rule 91 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    INVERSE         reduce using rule 91 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    MULTIPLY        reduce using rule 91 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    DIVIDE          reduce using rule 91 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    SUM             reduce using rule 91 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    SUBTRACT        reduce using rule 91 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    EQUALS          reduce using rule 91 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    NOT_EQUAL       reduce using rule 91 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    LESS_THAN       reduce using rule 91 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    LESS_THAN_EQUAL reduce using rule 91 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    GREATER_THAN    reduce using rule 91 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    GREATER_THAN_EQUAL reduce using rule 91 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    AND             reduce using rule 91 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    OR              reduce using rule 91 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    R_PARENTHESIS   reduce using rule 91 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    COMMA           reduce using rule 91 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    R_SQUARE_BRACKET reduce using rule 91 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    NOT             reduce using rule 91 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    CTE_INT         reduce using rule 91 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    CTE_FLOAT       reduce using rule 91 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    CTE_CHAR        reduce using rule 91 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    ID              reduce using rule 91 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    L_PARENTHESIS   reduce using rule 91 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    SEMICOLON       reduce using rule 91 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    HASTA           reduce using rule 91 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    HACER           reduce using rule 91 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)


state 241

    (109) decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque . decisionp
    (112) decisionp -> . SINO jump_else bloque update_jump
    (113) decisionp -> . empty update_jump
    (121) empty -> .

    SINO            shift and go to state 247
    ID              reduce using rule 121 (empty -> .)
    REGRESA         reduce using rule 121 (empty -> .)
    LECTURA         reduce using rule 121 (empty -> .)
    ESCRIBE         reduce using rule 121 (empty -> .)
    SI              reduce using rule 121 (empty -> .)
    MIENTRAS        reduce using rule 121 (empty -> .)
    DESDE           reduce using rule 121 (empty -> .)
    R_CURLY_BRACKET reduce using rule 121 (empty -> .)

    decisionp                      shift and go to state 246
    empty                          shift and go to state 248

state 242

    (115) cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ . bloque update_jump_cycle
    (36) bloque -> . L_CURLY_BRACKET bloquep R_CURLY_BRACKET

    L_CURLY_BRACKET shift and go to state 41

    bloque                         shift and go to state 249

state 243

    (118) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion . apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle
    (49) apply_operation_assign -> .

    HASTA           reduce using rule 49 (apply_operation_assign -> .)

    apply_operation_assign         shift and go to state 250

state 244

    (47) asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON .

    ID              reduce using rule 47 (asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON .)
    REGRESA         reduce using rule 47 (asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON .)
    LECTURA         reduce using rule 47 (asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON .)
    ESCRIBE         reduce using rule 47 (asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON .)
    SI              reduce using rule 47 (asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON .)
    MIENTRAS        reduce using rule 47 (asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON .)
    DESDE           reduce using rule 47 (asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON .)
    R_CURLY_BRACKET reduce using rule 47 (asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON .)


state 245

    (94) llamadaFuncionpp -> COMMA expresion verify_parameter . llamadaFuncionpp
    (94) llamadaFuncionpp -> . COMMA expresion verify_parameter llamadaFuncionpp
    (95) llamadaFuncionpp -> . empty
    (121) empty -> .

    COMMA           shift and go to state 204
    R_PARENTHESIS   reduce using rule 121 (empty -> .)

    llamadaFuncionpp               shift and go to state 251
    empty                          shift and go to state 205

state 246

    (109) decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp .

    ID              reduce using rule 109 (decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp .)
    REGRESA         reduce using rule 109 (decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp .)
    LECTURA         reduce using rule 109 (decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp .)
    ESCRIBE         reduce using rule 109 (decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp .)
    SI              reduce using rule 109 (decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp .)
    MIENTRAS        reduce using rule 109 (decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp .)
    DESDE           reduce using rule 109 (decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp .)
    R_CURLY_BRACKET reduce using rule 109 (decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp .)


state 247

    (112) decisionp -> SINO . jump_else bloque update_jump
    (114) jump_else -> .

    L_CURLY_BRACKET reduce using rule 114 (jump_else -> .)

    jump_else                      shift and go to state 252

state 248

    (113) decisionp -> empty . update_jump
    (111) update_jump -> .

    ID              reduce using rule 111 (update_jump -> .)
    REGRESA         reduce using rule 111 (update_jump -> .)
    LECTURA         reduce using rule 111 (update_jump -> .)
    ESCRIBE         reduce using rule 111 (update_jump -> .)
    SI              reduce using rule 111 (update_jump -> .)
    MIENTRAS        reduce using rule 111 (update_jump -> .)
    DESDE           reduce using rule 111 (update_jump -> .)
    R_CURLY_BRACKET reduce using rule 111 (update_jump -> .)

    update_jump                    shift and go to state 253

state 249

    (115) cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque . update_jump_cycle
    (117) update_jump_cycle -> .

    ID              reduce using rule 117 (update_jump_cycle -> .)
    REGRESA         reduce using rule 117 (update_jump_cycle -> .)
    LECTURA         reduce using rule 117 (update_jump_cycle -> .)
    ESCRIBE         reduce using rule 117 (update_jump_cycle -> .)
    SI              reduce using rule 117 (update_jump_cycle -> .)
    MIENTRAS        reduce using rule 117 (update_jump_cycle -> .)
    DESDE           reduce using rule 117 (update_jump_cycle -> .)
    R_CURLY_BRACKET reduce using rule 117 (update_jump_cycle -> .)

    update_jump_cycle              shift and go to state 254

state 250

    (118) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign . HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle

    HASTA           shift and go to state 255


state 251

    (94) llamadaFuncionpp -> COMMA expresion verify_parameter llamadaFuncionpp .

    R_PARENTHESIS   reduce using rule 94 (llamadaFuncionpp -> COMMA expresion verify_parameter llamadaFuncionpp .)


state 252

    (112) decisionp -> SINO jump_else . bloque update_jump
    (36) bloque -> . L_CURLY_BRACKET bloquep R_CURLY_BRACKET

    L_CURLY_BRACKET shift and go to state 41

    bloque                         shift and go to state 256

state 253

    (113) decisionp -> empty update_jump .

    ID              reduce using rule 113 (decisionp -> empty update_jump .)
    REGRESA         reduce using rule 113 (decisionp -> empty update_jump .)
    LECTURA         reduce using rule 113 (decisionp -> empty update_jump .)
    ESCRIBE         reduce using rule 113 (decisionp -> empty update_jump .)
    SI              reduce using rule 113 (decisionp -> empty update_jump .)
    MIENTRAS        reduce using rule 113 (decisionp -> empty update_jump .)
    DESDE           reduce using rule 113 (decisionp -> empty update_jump .)
    R_CURLY_BRACKET reduce using rule 113 (decisionp -> empty update_jump .)


state 254

    (115) cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle .

    ID              reduce using rule 115 (cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle .)
    REGRESA         reduce using rule 115 (cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle .)
    LECTURA         reduce using rule 115 (cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle .)
    ESCRIBE         reduce using rule 115 (cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle .)
    SI              reduce using rule 115 (cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle .)
    MIENTRAS        reduce using rule 115 (cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle .)
    DESDE           reduce using rule 115 (cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle .)
    R_CURLY_BRACKET reduce using rule 115 (cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle .)


state 255

    (118) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA . expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle
    (54) expresion -> . relacional apply_operation_expresion expresionp
    (55) expresion -> . NOT relacional expresionp
    (60) relacional -> . aritmetica apply_operation_relational relacionalp
    (69) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (74) factor -> . matriz apply_operation_factor factorp
    (80) matriz -> . cte matrizp
    (85) cte -> . CTE_INT
    (86) cte -> . CTE_FLOAT
    (87) cte -> . CTE_CHAR
    (88) cte -> . llamadaFuncion
    (89) cte -> . ID operand_seen dimId
    (90) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (91) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    NOT             shift and go to state 102
    CTE_INT         shift and go to state 107
    CTE_FLOAT       shift and go to state 108
    CTE_CHAR        shift and go to state 109
    ID              shift and go to state 111
    L_PARENTHESIS   shift and go to state 99

    expresion                      shift and go to state 257
    relacional                     shift and go to state 101
    aritmetica                     shift and go to state 103
    factor                         shift and go to state 104
    matriz                         shift and go to state 105
    cte                            shift and go to state 106
    llamadaFuncion                 shift and go to state 110

state 256

    (112) decisionp -> SINO jump_else bloque . update_jump
    (111) update_jump -> .

    ID              reduce using rule 111 (update_jump -> .)
    REGRESA         reduce using rule 111 (update_jump -> .)
    LECTURA         reduce using rule 111 (update_jump -> .)
    ESCRIBE         reduce using rule 111 (update_jump -> .)
    SI              reduce using rule 111 (update_jump -> .)
    MIENTRAS        reduce using rule 111 (update_jump -> .)
    DESDE           reduce using rule 111 (update_jump -> .)
    R_CURLY_BRACKET reduce using rule 111 (update_jump -> .)

    update_jump                    shift and go to state 258

state 257

    (118) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion . jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle
    (116) jump_cycle -> .

    HACER           reduce using rule 116 (jump_cycle -> .)

    jump_cycle                     shift and go to state 259

state 258

    (112) decisionp -> SINO jump_else bloque update_jump .

    ID              reduce using rule 112 (decisionp -> SINO jump_else bloque update_jump .)
    REGRESA         reduce using rule 112 (decisionp -> SINO jump_else bloque update_jump .)
    LECTURA         reduce using rule 112 (decisionp -> SINO jump_else bloque update_jump .)
    ESCRIBE         reduce using rule 112 (decisionp -> SINO jump_else bloque update_jump .)
    SI              reduce using rule 112 (decisionp -> SINO jump_else bloque update_jump .)
    MIENTRAS        reduce using rule 112 (decisionp -> SINO jump_else bloque update_jump .)
    DESDE           reduce using rule 112 (decisionp -> SINO jump_else bloque update_jump .)
    R_CURLY_BRACKET reduce using rule 112 (decisionp -> SINO jump_else bloque update_jump .)


state 259

    (118) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle . add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle
    (119) add_gt -> .

    HACER           reduce using rule 119 (add_gt -> .)

    add_gt                         shift and go to state 260

state 260

    (118) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt . apply_operation_relational jump_false HACER bloque add_one update_jump_cycle
    (68) apply_operation_relational -> .

    HACER           reduce using rule 68 (apply_operation_relational -> .)

    apply_operation_relational     shift and go to state 261

state 261

    (118) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational . jump_false HACER bloque add_one update_jump_cycle
    (110) jump_false -> .

    HACER           reduce using rule 110 (jump_false -> .)

    jump_false                     shift and go to state 262

state 262

    (118) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false . HACER bloque add_one update_jump_cycle

    HACER           shift and go to state 263


state 263

    (118) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER . bloque add_one update_jump_cycle
    (36) bloque -> . L_CURLY_BRACKET bloquep R_CURLY_BRACKET

    L_CURLY_BRACKET shift and go to state 41

    bloque                         shift and go to state 264

state 264

    (118) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque . add_one update_jump_cycle
    (120) add_one -> .

    ID              reduce using rule 120 (add_one -> .)
    REGRESA         reduce using rule 120 (add_one -> .)
    LECTURA         reduce using rule 120 (add_one -> .)
    ESCRIBE         reduce using rule 120 (add_one -> .)
    SI              reduce using rule 120 (add_one -> .)
    MIENTRAS        reduce using rule 120 (add_one -> .)
    DESDE           reduce using rule 120 (add_one -> .)
    R_CURLY_BRACKET reduce using rule 120 (add_one -> .)

    add_one                        shift and go to state 265

state 265

    (118) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one . update_jump_cycle
    (117) update_jump_cycle -> .

    ID              reduce using rule 117 (update_jump_cycle -> .)
    REGRESA         reduce using rule 117 (update_jump_cycle -> .)
    LECTURA         reduce using rule 117 (update_jump_cycle -> .)
    ESCRIBE         reduce using rule 117 (update_jump_cycle -> .)
    SI              reduce using rule 117 (update_jump_cycle -> .)
    MIENTRAS        reduce using rule 117 (update_jump_cycle -> .)
    DESDE           reduce using rule 117 (update_jump_cycle -> .)
    R_CURLY_BRACKET reduce using rule 117 (update_jump_cycle -> .)

    update_jump_cycle              shift and go to state 266

state 266

    (118) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle .

    ID              reduce using rule 118 (cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle .)
    REGRESA         reduce using rule 118 (cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle .)
    LECTURA         reduce using rule 118 (cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle .)
    ESCRIBE         reduce using rule 118 (cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle .)
    SI              reduce using rule 118 (cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle .)
    MIENTRAS        reduce using rule 118 (cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle .)
    DESDE           reduce using rule 118 (cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle .)
    R_CURLY_BRACKET reduce using rule 118 (cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for L_PARENTHESIS in state 111 resolved as shift
