Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> programa
Rule 2     programa -> PROGRAMA ID SEMICOLON var funcion PRINCIPAL L_PARENTHESIS R_PARENTHESIS bloque EOF
Rule 3     var -> VAR var_seen varp
Rule 4     var -> empty
Rule 5     var_seen -> <empty>
Rule 6     varp -> tipo tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp
Rule 7     varp -> tipo tipo_seen COLON ID error varppp varpp delete_type SEMICOLON varpppp
Rule 8     tipo_seen -> <empty>
Rule 9     variable_seen -> <empty>
Rule 10    delete_type -> <empty>
Rule 11    varpp -> COMMA ID variable_seen varppp varpp
Rule 12    varpp -> empty
Rule 13    varppp -> dimDeclare
Rule 14    varppp -> dimDeclare dimDeclare
Rule 15    varppp -> empty
Rule 16    varpppp -> varp
Rule 17    varpppp -> empty
Rule 18    dimDeclare -> L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET
Rule 19    tipo -> INT
Rule 20    tipo -> FLOAT
Rule 21    tipo -> CHAR
Rule 22    funcion -> FUNCION funcionp
Rule 23    funcion -> FUNCION error
Rule 24    funcion -> empty
Rule 25    funcionp -> tipoRetorno ID create_func_scope L_PARENTHESIS parametro R_PARENTHESIS var bloque funcion
Rule 26    create_func_scope -> <empty>
Rule 27    clear_current_scope -> <empty>
Rule 28    parametro -> tipo ID save_param parametrop
Rule 29    parametro -> empty
Rule 30    save_param -> <empty>
Rule 31    parametrop -> COMMA tipo ID save_param parametrop
Rule 32    parametrop -> empty
Rule 33    tipoRetorno -> tipo
Rule 34    tipoRetorno -> VOID
Rule 35    bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET
Rule 36    bloquep -> estatuto bloquep
Rule 37    bloquep -> empty
Rule 38    estatuto -> asignacion
Rule 39    estatuto -> funcionVacia
Rule 40    estatuto -> regresa
Rule 41    estatuto -> lectura
Rule 42    estatuto -> escritura
Rule 43    estatuto -> decision
Rule 44    estatuto -> cicloCondicional
Rule 45    estatuto -> cicloNoCondicional
Rule 46    asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON
Rule 47    operand_seen -> <empty>
Rule 48    apply_operation_assign -> <empty>
Rule 49    dimId -> dim
Rule 50    dimId -> dim dim
Rule 51    dimId -> empty
Rule 52    dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET
Rule 53    expresion -> relacional apply_operation_expresion expresionp
Rule 54    expresion -> NOT relacional expresionp
Rule 55    expresionp -> AND operation_seen expresion
Rule 56    expresionp -> OR operation_seen expresion
Rule 57    expresionp -> empty
Rule 58    apply_operation_expresion -> <empty>
Rule 59    relacional -> aritmetica apply_operation_relational relacionalp
Rule 60    relacionalp -> EQUALS operation_seen relacional
Rule 61    relacionalp -> NOT_EQUAL operation_seen relacional
Rule 62    relacionalp -> LESS_THAN operation_seen relacional
Rule 63    relacionalp -> LESS_THAN_EQUAL operation_seen relacional
Rule 64    relacionalp -> GREATER_THAN operation_seen relacional
Rule 65    relacionalp -> GREATER_THAN_EQUAL operation_seen relacional
Rule 66    relacionalp -> empty
Rule 67    apply_operation_relational -> <empty>
Rule 68    aritmetica -> factor apply_operation_aritmetica aritmeticap
Rule 69    aritmeticap -> SUM operation_seen aritmetica
Rule 70    aritmeticap -> SUBTRACT operation_seen aritmetica
Rule 71    aritmeticap -> empty
Rule 72    apply_operation_aritmetica -> <empty>
Rule 73    factor -> matriz apply_operation_factor factorp
Rule 74    factorp -> MULTIPLY operation_seen factor
Rule 75    factorp -> DIVIDE operation_seen factor
Rule 76    factorp -> empty
Rule 77    apply_operation_factor -> <empty>
Rule 78    operation_seen -> <empty>
Rule 79    matriz -> cte matrizp
Rule 80    matrizp -> DETERMINANT
Rule 81    matrizp -> TRANSPOSED
Rule 82    matrizp -> INVERSE
Rule 83    matrizp -> empty
Rule 84    cte -> CTE_INT
Rule 85    cte -> CTE_FLOAT
Rule 86    cte -> CTE_CHAR
Rule 87    cte -> llamadaFuncion
Rule 88    cte -> ID operand_seen dimId
Rule 89    cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
Rule 90    llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS
Rule 91    llamadaFuncionp -> COMMA expresion
Rule 92    llamadaFuncionp -> empty
Rule 93    funcionVacia -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS SEMICOLON
Rule 94    regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON
Rule 95    lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON
Rule 96    lecturap -> ID dimId lecturapp
Rule 97    lecturapp -> COMMA lecturap
Rule 98    lecturapp -> empty
Rule 99    escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON
Rule 100   escriturap -> LETRERO escriturapp
Rule 101   escriturap -> expresion escriturapp
Rule 102   escriturapp -> COMMA escriturap
Rule 103   escriturapp -> empty
Rule 104   decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp
Rule 105   jump_false -> <empty>
Rule 106   update_jump -> <empty>
Rule 107   decisionp -> SINO jump_else bloque update_jump
Rule 108   decisionp -> empty update_jump
Rule 109   jump_else -> <empty>
Rule 110   cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle
Rule 111   jump_cycle -> <empty>
Rule 112   update_jump_cycle -> <empty>
Rule 113   cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle
Rule 114   add_gt -> <empty>
Rule 115   add_one -> <empty>
Rule 116   empty -> <empty>

Terminals, with rules where they appear

AND                  : 55
ASSIGN               : 46 113
CHAR                 : 21
COLON                : 6 7
COMMA                : 11 31 91 97 102
CTE_CHAR             : 86
CTE_FLOAT            : 85
CTE_INT              : 18 84
DESDE                : 113
DETERMINANT          : 80
DIVIDE               : 75
EOF                  : 2
EQUALS               : 60
ESCRIBE              : 99
FLOAT                : 20
FUNCION              : 22 23
GREATER_THAN         : 64
GREATER_THAN_EQUAL   : 65
HACER                : 113
HASTA                : 113
HAZ                  : 104 110
ID                   : 2 6 7 11 25 28 31 46 88 90 93 96 113
INT                  : 19
INVERSE              : 82
LECTURA              : 95
LESS_THAN            : 62
LESS_THAN_EQUAL      : 63
LETRERO              : 100
L_CURLY_BRACKET      : 35
L_PARENTHESIS        : 2 25 89 90 93 94 95 99 104 110
L_SQUARE_BRACKET     : 18 52
MIENTRAS             : 110
MULTIPLY             : 74
NOT                  : 54
NOT_EQUAL            : 61
OR                   : 56
PRINCIPAL            : 2
PROGRAMA             : 2
REGRESA              : 94
R_CURLY_BRACKET      : 35
R_PARENTHESIS        : 2 25 89 90 93 94 95 99 104 110
R_SQUARE_BRACKET     : 18 52
SEMICOLON            : 2 6 7 46 93 94 95 99
SI                   : 104
SINO                 : 107
SUBTRACT             : 70
SUM                  : 69
TRANSPOSED           : 81
VAR                  : 3
VOID                 : 34
error                : 7 23

Nonterminals, with rules where they appear

add_gt               : 113
add_one              : 113
apply_operation_aritmetica : 68
apply_operation_assign : 46 113
apply_operation_expresion : 53
apply_operation_factor : 73
apply_operation_relational : 59 113
aritmetica           : 59 69 70
aritmeticap          : 68
asignacion           : 38
bloque               : 2 25 104 107 110 113
bloquep              : 35 36
cicloCondicional     : 44
cicloNoCondicional   : 45
clear_current_scope  : 
create_func_scope    : 25
cte                  : 79
decision             : 43
decisionp            : 104
delete_type          : 6 7
dim                  : 49 50 50
dimDeclare           : 13 14 14
dimId                : 46 88 96 113
empty                : 4 12 15 17 24 29 32 37 51 57 66 71 76 83 92 98 103 108
escritura            : 42
escriturap           : 99 102
escriturapp          : 100 101
estatuto             : 36
expresion            : 46 52 55 56 89 90 91 93 94 101 104 110 113 113
expresionp           : 53 54
factor               : 68 74 75
factorp              : 73
funcion              : 2 25
funcionVacia         : 39
funcionp             : 22
jump_cycle           : 110 113
jump_else            : 107
jump_false           : 104 110 113
lectura              : 41
lecturap             : 95 97
lecturapp            : 96
llamadaFuncion       : 87
llamadaFuncionp      : 90 93
matriz               : 73
matrizp              : 79
operand_seen         : 46 88 113
operation_seen       : 46 55 56 60 61 62 63 64 65 69 70 74 75 89 89 113
parametro            : 25
parametrop           : 28 31
programa             : 1
regresa              : 40
relacional           : 53 54 60 61 62 63 64 65
relacionalp          : 59
save_param           : 28 31
start                : 0
tipo                 : 6 7 28 31 33
tipoRetorno          : 25
tipo_seen            : 6 7
update_jump          : 107 108
update_jump_cycle    : 110 113
var                  : 2 25
var_seen             : 3
variable_seen        : 6 11
varp                 : 3 16
varpp                : 6 7 11
varppp               : 6 7 11
varpppp              : 6 7

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . programa
    (2) programa -> . PROGRAMA ID SEMICOLON var funcion PRINCIPAL L_PARENTHESIS R_PARENTHESIS bloque EOF

    PROGRAMA        shift and go to state 3

    start                          shift and go to state 1
    programa                       shift and go to state 2

state 1

    (0) S' -> start .



state 2

    (1) start -> programa .

    $end            reduce using rule 1 (start -> programa .)


state 3

    (2) programa -> PROGRAMA . ID SEMICOLON var funcion PRINCIPAL L_PARENTHESIS R_PARENTHESIS bloque EOF

    ID              shift and go to state 4


state 4

    (2) programa -> PROGRAMA ID . SEMICOLON var funcion PRINCIPAL L_PARENTHESIS R_PARENTHESIS bloque EOF

    SEMICOLON       shift and go to state 5


state 5

    (2) programa -> PROGRAMA ID SEMICOLON . var funcion PRINCIPAL L_PARENTHESIS R_PARENTHESIS bloque EOF
    (3) var -> . VAR var_seen varp
    (4) var -> . empty
    (116) empty -> .

    VAR             shift and go to state 7
    FUNCION         reduce using rule 116 (empty -> .)
    PRINCIPAL       reduce using rule 116 (empty -> .)

    var                            shift and go to state 6
    empty                          shift and go to state 8

state 6

    (2) programa -> PROGRAMA ID SEMICOLON var . funcion PRINCIPAL L_PARENTHESIS R_PARENTHESIS bloque EOF
    (22) funcion -> . FUNCION funcionp
    (23) funcion -> . FUNCION error
    (24) funcion -> . empty
    (116) empty -> .

    FUNCION         shift and go to state 10
    PRINCIPAL       reduce using rule 116 (empty -> .)

    funcion                        shift and go to state 9
    empty                          shift and go to state 11

state 7

    (3) var -> VAR . var_seen varp
    (5) var_seen -> .

    INT             reduce using rule 5 (var_seen -> .)
    FLOAT           reduce using rule 5 (var_seen -> .)
    CHAR            reduce using rule 5 (var_seen -> .)

    var_seen                       shift and go to state 12

state 8

    (4) var -> empty .

    FUNCION         reduce using rule 4 (var -> empty .)
    PRINCIPAL       reduce using rule 4 (var -> empty .)
    L_CURLY_BRACKET reduce using rule 4 (var -> empty .)


state 9

    (2) programa -> PROGRAMA ID SEMICOLON var funcion . PRINCIPAL L_PARENTHESIS R_PARENTHESIS bloque EOF

    PRINCIPAL       shift and go to state 13


state 10

    (22) funcion -> FUNCION . funcionp
    (23) funcion -> FUNCION . error
    (25) funcionp -> . tipoRetorno ID create_func_scope L_PARENTHESIS parametro R_PARENTHESIS var bloque funcion
    (33) tipoRetorno -> . tipo
    (34) tipoRetorno -> . VOID
    (19) tipo -> . INT
    (20) tipo -> . FLOAT
    (21) tipo -> . CHAR

    error           shift and go to state 15
    VOID            shift and go to state 18
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21

    funcionp                       shift and go to state 14
    tipoRetorno                    shift and go to state 16
    tipo                           shift and go to state 17

state 11

    (24) funcion -> empty .

    PRINCIPAL       reduce using rule 24 (funcion -> empty .)


state 12

    (3) var -> VAR var_seen . varp
    (6) varp -> . tipo tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp
    (7) varp -> . tipo tipo_seen COLON ID error varppp varpp delete_type SEMICOLON varpppp
    (19) tipo -> . INT
    (20) tipo -> . FLOAT
    (21) tipo -> . CHAR

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21

    varp                           shift and go to state 22
    tipo                           shift and go to state 23

state 13

    (2) programa -> PROGRAMA ID SEMICOLON var funcion PRINCIPAL . L_PARENTHESIS R_PARENTHESIS bloque EOF

    L_PARENTHESIS   shift and go to state 24


state 14

    (22) funcion -> FUNCION funcionp .

    PRINCIPAL       reduce using rule 22 (funcion -> FUNCION funcionp .)


state 15

    (23) funcion -> FUNCION error .

    PRINCIPAL       reduce using rule 23 (funcion -> FUNCION error .)


state 16

    (25) funcionp -> tipoRetorno . ID create_func_scope L_PARENTHESIS parametro R_PARENTHESIS var bloque funcion

    ID              shift and go to state 25


state 17

    (33) tipoRetorno -> tipo .

    ID              reduce using rule 33 (tipoRetorno -> tipo .)


state 18

    (34) tipoRetorno -> VOID .

    ID              reduce using rule 34 (tipoRetorno -> VOID .)


state 19

    (19) tipo -> INT .

    ID              reduce using rule 19 (tipo -> INT .)
    COLON           reduce using rule 19 (tipo -> INT .)


state 20

    (20) tipo -> FLOAT .

    ID              reduce using rule 20 (tipo -> FLOAT .)
    COLON           reduce using rule 20 (tipo -> FLOAT .)


state 21

    (21) tipo -> CHAR .

    ID              reduce using rule 21 (tipo -> CHAR .)
    COLON           reduce using rule 21 (tipo -> CHAR .)


state 22

    (3) var -> VAR var_seen varp .

    FUNCION         reduce using rule 3 (var -> VAR var_seen varp .)
    PRINCIPAL       reduce using rule 3 (var -> VAR var_seen varp .)
    L_CURLY_BRACKET reduce using rule 3 (var -> VAR var_seen varp .)


state 23

    (6) varp -> tipo . tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp
    (7) varp -> tipo . tipo_seen COLON ID error varppp varpp delete_type SEMICOLON varpppp
    (8) tipo_seen -> .

    COLON           reduce using rule 8 (tipo_seen -> .)

    tipo_seen                      shift and go to state 26

state 24

    (2) programa -> PROGRAMA ID SEMICOLON var funcion PRINCIPAL L_PARENTHESIS . R_PARENTHESIS bloque EOF

    R_PARENTHESIS   shift and go to state 27


state 25

    (25) funcionp -> tipoRetorno ID . create_func_scope L_PARENTHESIS parametro R_PARENTHESIS var bloque funcion
    (26) create_func_scope -> .

    L_PARENTHESIS   reduce using rule 26 (create_func_scope -> .)

    create_func_scope              shift and go to state 28

state 26

    (6) varp -> tipo tipo_seen . COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp
    (7) varp -> tipo tipo_seen . COLON ID error varppp varpp delete_type SEMICOLON varpppp

    COLON           shift and go to state 29


state 27

    (2) programa -> PROGRAMA ID SEMICOLON var funcion PRINCIPAL L_PARENTHESIS R_PARENTHESIS . bloque EOF
    (35) bloque -> . L_CURLY_BRACKET bloquep R_CURLY_BRACKET

    L_CURLY_BRACKET shift and go to state 31

    bloque                         shift and go to state 30

state 28

    (25) funcionp -> tipoRetorno ID create_func_scope . L_PARENTHESIS parametro R_PARENTHESIS var bloque funcion

    L_PARENTHESIS   shift and go to state 32


state 29

    (6) varp -> tipo tipo_seen COLON . ID variable_seen varppp varpp delete_type SEMICOLON varpppp
    (7) varp -> tipo tipo_seen COLON . ID error varppp varpp delete_type SEMICOLON varpppp

    ID              shift and go to state 33


state 30

    (2) programa -> PROGRAMA ID SEMICOLON var funcion PRINCIPAL L_PARENTHESIS R_PARENTHESIS bloque . EOF

    EOF             shift and go to state 34


state 31

    (35) bloque -> L_CURLY_BRACKET . bloquep R_CURLY_BRACKET
    (36) bloquep -> . estatuto bloquep
    (37) bloquep -> . empty
    (38) estatuto -> . asignacion
    (39) estatuto -> . funcionVacia
    (40) estatuto -> . regresa
    (41) estatuto -> . lectura
    (42) estatuto -> . escritura
    (43) estatuto -> . decision
    (44) estatuto -> . cicloCondicional
    (45) estatuto -> . cicloNoCondicional
    (116) empty -> .
    (46) asignacion -> . ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON
    (93) funcionVacia -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS SEMICOLON
    (94) regresa -> . REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON
    (95) lectura -> . LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON
    (99) escritura -> . ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON
    (104) decision -> . SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp
    (110) cicloCondicional -> . MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle
    (113) cicloNoCondicional -> . DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle

    R_CURLY_BRACKET reduce using rule 116 (empty -> .)
    ID              shift and go to state 46
    REGRESA         shift and go to state 47
    LECTURA         shift and go to state 48
    ESCRIBE         shift and go to state 49
    SI              shift and go to state 50
    MIENTRAS        shift and go to state 51
    DESDE           shift and go to state 52

    bloquep                        shift and go to state 35
    estatuto                       shift and go to state 36
    empty                          shift and go to state 37
    asignacion                     shift and go to state 38
    funcionVacia                   shift and go to state 39
    regresa                        shift and go to state 40
    lectura                        shift and go to state 41
    escritura                      shift and go to state 42
    decision                       shift and go to state 43
    cicloCondicional               shift and go to state 44
    cicloNoCondicional             shift and go to state 45

state 32

    (25) funcionp -> tipoRetorno ID create_func_scope L_PARENTHESIS . parametro R_PARENTHESIS var bloque funcion
    (28) parametro -> . tipo ID save_param parametrop
    (29) parametro -> . empty
    (19) tipo -> . INT
    (20) tipo -> . FLOAT
    (21) tipo -> . CHAR
    (116) empty -> .

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21
    R_PARENTHESIS   reduce using rule 116 (empty -> .)

    parametro                      shift and go to state 53
    tipo                           shift and go to state 54
    empty                          shift and go to state 55

state 33

    (6) varp -> tipo tipo_seen COLON ID . variable_seen varppp varpp delete_type SEMICOLON varpppp
    (7) varp -> tipo tipo_seen COLON ID . error varppp varpp delete_type SEMICOLON varpppp
    (9) variable_seen -> .

    error           shift and go to state 57
    L_SQUARE_BRACKET reduce using rule 9 (variable_seen -> .)
    COMMA           reduce using rule 9 (variable_seen -> .)
    SEMICOLON       reduce using rule 9 (variable_seen -> .)

    variable_seen                  shift and go to state 56

state 34

    (2) programa -> PROGRAMA ID SEMICOLON var funcion PRINCIPAL L_PARENTHESIS R_PARENTHESIS bloque EOF .

    $end            reduce using rule 2 (programa -> PROGRAMA ID SEMICOLON var funcion PRINCIPAL L_PARENTHESIS R_PARENTHESIS bloque EOF .)


state 35

    (35) bloque -> L_CURLY_BRACKET bloquep . R_CURLY_BRACKET

    R_CURLY_BRACKET shift and go to state 58


state 36

    (36) bloquep -> estatuto . bloquep
    (36) bloquep -> . estatuto bloquep
    (37) bloquep -> . empty
    (38) estatuto -> . asignacion
    (39) estatuto -> . funcionVacia
    (40) estatuto -> . regresa
    (41) estatuto -> . lectura
    (42) estatuto -> . escritura
    (43) estatuto -> . decision
    (44) estatuto -> . cicloCondicional
    (45) estatuto -> . cicloNoCondicional
    (116) empty -> .
    (46) asignacion -> . ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON
    (93) funcionVacia -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS SEMICOLON
    (94) regresa -> . REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON
    (95) lectura -> . LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON
    (99) escritura -> . ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON
    (104) decision -> . SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp
    (110) cicloCondicional -> . MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle
    (113) cicloNoCondicional -> . DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle

    R_CURLY_BRACKET reduce using rule 116 (empty -> .)
    ID              shift and go to state 46
    REGRESA         shift and go to state 47
    LECTURA         shift and go to state 48
    ESCRIBE         shift and go to state 49
    SI              shift and go to state 50
    MIENTRAS        shift and go to state 51
    DESDE           shift and go to state 52

    estatuto                       shift and go to state 36
    bloquep                        shift and go to state 59
    empty                          shift and go to state 37
    asignacion                     shift and go to state 38
    funcionVacia                   shift and go to state 39
    regresa                        shift and go to state 40
    lectura                        shift and go to state 41
    escritura                      shift and go to state 42
    decision                       shift and go to state 43
    cicloCondicional               shift and go to state 44
    cicloNoCondicional             shift and go to state 45

state 37

    (37) bloquep -> empty .

    R_CURLY_BRACKET reduce using rule 37 (bloquep -> empty .)


state 38

    (38) estatuto -> asignacion .

    ID              reduce using rule 38 (estatuto -> asignacion .)
    REGRESA         reduce using rule 38 (estatuto -> asignacion .)
    LECTURA         reduce using rule 38 (estatuto -> asignacion .)
    ESCRIBE         reduce using rule 38 (estatuto -> asignacion .)
    SI              reduce using rule 38 (estatuto -> asignacion .)
    MIENTRAS        reduce using rule 38 (estatuto -> asignacion .)
    DESDE           reduce using rule 38 (estatuto -> asignacion .)
    R_CURLY_BRACKET reduce using rule 38 (estatuto -> asignacion .)


state 39

    (39) estatuto -> funcionVacia .

    ID              reduce using rule 39 (estatuto -> funcionVacia .)
    REGRESA         reduce using rule 39 (estatuto -> funcionVacia .)
    LECTURA         reduce using rule 39 (estatuto -> funcionVacia .)
    ESCRIBE         reduce using rule 39 (estatuto -> funcionVacia .)
    SI              reduce using rule 39 (estatuto -> funcionVacia .)
    MIENTRAS        reduce using rule 39 (estatuto -> funcionVacia .)
    DESDE           reduce using rule 39 (estatuto -> funcionVacia .)
    R_CURLY_BRACKET reduce using rule 39 (estatuto -> funcionVacia .)


state 40

    (40) estatuto -> regresa .

    ID              reduce using rule 40 (estatuto -> regresa .)
    REGRESA         reduce using rule 40 (estatuto -> regresa .)
    LECTURA         reduce using rule 40 (estatuto -> regresa .)
    ESCRIBE         reduce using rule 40 (estatuto -> regresa .)
    SI              reduce using rule 40 (estatuto -> regresa .)
    MIENTRAS        reduce using rule 40 (estatuto -> regresa .)
    DESDE           reduce using rule 40 (estatuto -> regresa .)
    R_CURLY_BRACKET reduce using rule 40 (estatuto -> regresa .)


state 41

    (41) estatuto -> lectura .

    ID              reduce using rule 41 (estatuto -> lectura .)
    REGRESA         reduce using rule 41 (estatuto -> lectura .)
    LECTURA         reduce using rule 41 (estatuto -> lectura .)
    ESCRIBE         reduce using rule 41 (estatuto -> lectura .)
    SI              reduce using rule 41 (estatuto -> lectura .)
    MIENTRAS        reduce using rule 41 (estatuto -> lectura .)
    DESDE           reduce using rule 41 (estatuto -> lectura .)
    R_CURLY_BRACKET reduce using rule 41 (estatuto -> lectura .)


state 42

    (42) estatuto -> escritura .

    ID              reduce using rule 42 (estatuto -> escritura .)
    REGRESA         reduce using rule 42 (estatuto -> escritura .)
    LECTURA         reduce using rule 42 (estatuto -> escritura .)
    ESCRIBE         reduce using rule 42 (estatuto -> escritura .)
    SI              reduce using rule 42 (estatuto -> escritura .)
    MIENTRAS        reduce using rule 42 (estatuto -> escritura .)
    DESDE           reduce using rule 42 (estatuto -> escritura .)
    R_CURLY_BRACKET reduce using rule 42 (estatuto -> escritura .)


state 43

    (43) estatuto -> decision .

    ID              reduce using rule 43 (estatuto -> decision .)
    REGRESA         reduce using rule 43 (estatuto -> decision .)
    LECTURA         reduce using rule 43 (estatuto -> decision .)
    ESCRIBE         reduce using rule 43 (estatuto -> decision .)
    SI              reduce using rule 43 (estatuto -> decision .)
    MIENTRAS        reduce using rule 43 (estatuto -> decision .)
    DESDE           reduce using rule 43 (estatuto -> decision .)
    R_CURLY_BRACKET reduce using rule 43 (estatuto -> decision .)


state 44

    (44) estatuto -> cicloCondicional .

    ID              reduce using rule 44 (estatuto -> cicloCondicional .)
    REGRESA         reduce using rule 44 (estatuto -> cicloCondicional .)
    LECTURA         reduce using rule 44 (estatuto -> cicloCondicional .)
    ESCRIBE         reduce using rule 44 (estatuto -> cicloCondicional .)
    SI              reduce using rule 44 (estatuto -> cicloCondicional .)
    MIENTRAS        reduce using rule 44 (estatuto -> cicloCondicional .)
    DESDE           reduce using rule 44 (estatuto -> cicloCondicional .)
    R_CURLY_BRACKET reduce using rule 44 (estatuto -> cicloCondicional .)


state 45

    (45) estatuto -> cicloNoCondicional .

    ID              reduce using rule 45 (estatuto -> cicloNoCondicional .)
    REGRESA         reduce using rule 45 (estatuto -> cicloNoCondicional .)
    LECTURA         reduce using rule 45 (estatuto -> cicloNoCondicional .)
    ESCRIBE         reduce using rule 45 (estatuto -> cicloNoCondicional .)
    SI              reduce using rule 45 (estatuto -> cicloNoCondicional .)
    MIENTRAS        reduce using rule 45 (estatuto -> cicloNoCondicional .)
    DESDE           reduce using rule 45 (estatuto -> cicloNoCondicional .)
    R_CURLY_BRACKET reduce using rule 45 (estatuto -> cicloNoCondicional .)


state 46

    (46) asignacion -> ID . operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON
    (93) funcionVacia -> ID . L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS SEMICOLON
    (47) operand_seen -> .

    L_PARENTHESIS   shift and go to state 61
    L_SQUARE_BRACKET reduce using rule 47 (operand_seen -> .)
    ASSIGN          reduce using rule 47 (operand_seen -> .)

    operand_seen                   shift and go to state 60

state 47

    (94) regresa -> REGRESA . L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON

    L_PARENTHESIS   shift and go to state 62


state 48

    (95) lectura -> LECTURA . L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON

    L_PARENTHESIS   shift and go to state 63


state 49

    (99) escritura -> ESCRIBE . L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON

    L_PARENTHESIS   shift and go to state 64


state 50

    (104) decision -> SI . L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp

    L_PARENTHESIS   shift and go to state 65


state 51

    (110) cicloCondicional -> MIENTRAS . jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle
    (111) jump_cycle -> .

    L_PARENTHESIS   reduce using rule 111 (jump_cycle -> .)

    jump_cycle                     shift and go to state 66

state 52

    (113) cicloNoCondicional -> DESDE . ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle

    ID              shift and go to state 67


state 53

    (25) funcionp -> tipoRetorno ID create_func_scope L_PARENTHESIS parametro . R_PARENTHESIS var bloque funcion

    R_PARENTHESIS   shift and go to state 68


state 54

    (28) parametro -> tipo . ID save_param parametrop

    ID              shift and go to state 69


state 55

    (29) parametro -> empty .

    R_PARENTHESIS   reduce using rule 29 (parametro -> empty .)


state 56

    (6) varp -> tipo tipo_seen COLON ID variable_seen . varppp varpp delete_type SEMICOLON varpppp
    (13) varppp -> . dimDeclare
    (14) varppp -> . dimDeclare dimDeclare
    (15) varppp -> . empty
    (18) dimDeclare -> . L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET
    (116) empty -> .

    L_SQUARE_BRACKET shift and go to state 73
    COMMA           reduce using rule 116 (empty -> .)
    SEMICOLON       reduce using rule 116 (empty -> .)

    varppp                         shift and go to state 70
    dimDeclare                     shift and go to state 71
    empty                          shift and go to state 72

state 57

    (7) varp -> tipo tipo_seen COLON ID error . varppp varpp delete_type SEMICOLON varpppp
    (13) varppp -> . dimDeclare
    (14) varppp -> . dimDeclare dimDeclare
    (15) varppp -> . empty
    (18) dimDeclare -> . L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET
    (116) empty -> .

    L_SQUARE_BRACKET shift and go to state 73
    COMMA           reduce using rule 116 (empty -> .)
    SEMICOLON       reduce using rule 116 (empty -> .)

    varppp                         shift and go to state 74
    dimDeclare                     shift and go to state 71
    empty                          shift and go to state 72

state 58

    (35) bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .

    EOF             reduce using rule 35 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    FUNCION         reduce using rule 35 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    PRINCIPAL       reduce using rule 35 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    SINO            reduce using rule 35 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    ID              reduce using rule 35 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    REGRESA         reduce using rule 35 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    LECTURA         reduce using rule 35 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    ESCRIBE         reduce using rule 35 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    SI              reduce using rule 35 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    MIENTRAS        reduce using rule 35 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    DESDE           reduce using rule 35 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    R_CURLY_BRACKET reduce using rule 35 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)


state 59

    (36) bloquep -> estatuto bloquep .

    R_CURLY_BRACKET reduce using rule 36 (bloquep -> estatuto bloquep .)


state 60

    (46) asignacion -> ID operand_seen . dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON
    (49) dimId -> . dim
    (50) dimId -> . dim dim
    (51) dimId -> . empty
    (52) dim -> . L_SQUARE_BRACKET expresion R_SQUARE_BRACKET
    (116) empty -> .

    L_SQUARE_BRACKET shift and go to state 78
    ASSIGN          reduce using rule 116 (empty -> .)

    dimId                          shift and go to state 75
    dim                            shift and go to state 76
    empty                          shift and go to state 77

state 61

    (93) funcionVacia -> ID L_PARENTHESIS . expresion llamadaFuncionp R_PARENTHESIS SEMICOLON
    (53) expresion -> . relacional apply_operation_expresion expresionp
    (54) expresion -> . NOT relacional expresionp
    (59) relacional -> . aritmetica apply_operation_relational relacionalp
    (68) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (73) factor -> . matriz apply_operation_factor factorp
    (79) matriz -> . cte matrizp
    (84) cte -> . CTE_INT
    (85) cte -> . CTE_FLOAT
    (86) cte -> . CTE_CHAR
    (87) cte -> . llamadaFuncion
    (88) cte -> . ID operand_seen dimId
    (89) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (90) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    NOT             shift and go to state 83
    CTE_INT         shift and go to state 88
    CTE_FLOAT       shift and go to state 89
    CTE_CHAR        shift and go to state 90
    ID              shift and go to state 79
    L_PARENTHESIS   shift and go to state 80

    expresion                      shift and go to state 81
    relacional                     shift and go to state 82
    aritmetica                     shift and go to state 84
    factor                         shift and go to state 85
    matriz                         shift and go to state 86
    cte                            shift and go to state 87
    llamadaFuncion                 shift and go to state 91

state 62

    (94) regresa -> REGRESA L_PARENTHESIS . expresion R_PARENTHESIS SEMICOLON
    (53) expresion -> . relacional apply_operation_expresion expresionp
    (54) expresion -> . NOT relacional expresionp
    (59) relacional -> . aritmetica apply_operation_relational relacionalp
    (68) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (73) factor -> . matriz apply_operation_factor factorp
    (79) matriz -> . cte matrizp
    (84) cte -> . CTE_INT
    (85) cte -> . CTE_FLOAT
    (86) cte -> . CTE_CHAR
    (87) cte -> . llamadaFuncion
    (88) cte -> . ID operand_seen dimId
    (89) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (90) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    NOT             shift and go to state 83
    CTE_INT         shift and go to state 88
    CTE_FLOAT       shift and go to state 89
    CTE_CHAR        shift and go to state 90
    ID              shift and go to state 79
    L_PARENTHESIS   shift and go to state 80

    expresion                      shift and go to state 92
    relacional                     shift and go to state 82
    aritmetica                     shift and go to state 84
    factor                         shift and go to state 85
    matriz                         shift and go to state 86
    cte                            shift and go to state 87
    llamadaFuncion                 shift and go to state 91

state 63

    (95) lectura -> LECTURA L_PARENTHESIS . lecturap R_PARENTHESIS SEMICOLON
    (96) lecturap -> . ID dimId lecturapp

    ID              shift and go to state 94

    lecturap                       shift and go to state 93

state 64

    (99) escritura -> ESCRIBE L_PARENTHESIS . escriturap R_PARENTHESIS SEMICOLON
    (100) escriturap -> . LETRERO escriturapp
    (101) escriturap -> . expresion escriturapp
    (53) expresion -> . relacional apply_operation_expresion expresionp
    (54) expresion -> . NOT relacional expresionp
    (59) relacional -> . aritmetica apply_operation_relational relacionalp
    (68) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (73) factor -> . matriz apply_operation_factor factorp
    (79) matriz -> . cte matrizp
    (84) cte -> . CTE_INT
    (85) cte -> . CTE_FLOAT
    (86) cte -> . CTE_CHAR
    (87) cte -> . llamadaFuncion
    (88) cte -> . ID operand_seen dimId
    (89) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (90) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    LETRERO         shift and go to state 96
    NOT             shift and go to state 83
    CTE_INT         shift and go to state 88
    CTE_FLOAT       shift and go to state 89
    CTE_CHAR        shift and go to state 90
    ID              shift and go to state 79
    L_PARENTHESIS   shift and go to state 80

    escriturap                     shift and go to state 95
    expresion                      shift and go to state 97
    relacional                     shift and go to state 82
    aritmetica                     shift and go to state 84
    factor                         shift and go to state 85
    matriz                         shift and go to state 86
    cte                            shift and go to state 87
    llamadaFuncion                 shift and go to state 91

state 65

    (104) decision -> SI L_PARENTHESIS . expresion R_PARENTHESIS jump_false HAZ bloque decisionp
    (53) expresion -> . relacional apply_operation_expresion expresionp
    (54) expresion -> . NOT relacional expresionp
    (59) relacional -> . aritmetica apply_operation_relational relacionalp
    (68) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (73) factor -> . matriz apply_operation_factor factorp
    (79) matriz -> . cte matrizp
    (84) cte -> . CTE_INT
    (85) cte -> . CTE_FLOAT
    (86) cte -> . CTE_CHAR
    (87) cte -> . llamadaFuncion
    (88) cte -> . ID operand_seen dimId
    (89) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (90) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    NOT             shift and go to state 83
    CTE_INT         shift and go to state 88
    CTE_FLOAT       shift and go to state 89
    CTE_CHAR        shift and go to state 90
    ID              shift and go to state 79
    L_PARENTHESIS   shift and go to state 80

    expresion                      shift and go to state 98
    relacional                     shift and go to state 82
    aritmetica                     shift and go to state 84
    factor                         shift and go to state 85
    matriz                         shift and go to state 86
    cte                            shift and go to state 87
    llamadaFuncion                 shift and go to state 91

state 66

    (110) cicloCondicional -> MIENTRAS jump_cycle . L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle

    L_PARENTHESIS   shift and go to state 99


state 67

    (113) cicloNoCondicional -> DESDE ID . operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle
    (47) operand_seen -> .

    L_SQUARE_BRACKET reduce using rule 47 (operand_seen -> .)
    ASSIGN          reduce using rule 47 (operand_seen -> .)

    operand_seen                   shift and go to state 100

state 68

    (25) funcionp -> tipoRetorno ID create_func_scope L_PARENTHESIS parametro R_PARENTHESIS . var bloque funcion
    (3) var -> . VAR var_seen varp
    (4) var -> . empty
    (116) empty -> .

    VAR             shift and go to state 7
    L_CURLY_BRACKET reduce using rule 116 (empty -> .)

    var                            shift and go to state 101
    empty                          shift and go to state 8

state 69

    (28) parametro -> tipo ID . save_param parametrop
    (30) save_param -> .

    COMMA           reduce using rule 30 (save_param -> .)
    R_PARENTHESIS   reduce using rule 30 (save_param -> .)

    save_param                     shift and go to state 102

state 70

    (6) varp -> tipo tipo_seen COLON ID variable_seen varppp . varpp delete_type SEMICOLON varpppp
    (11) varpp -> . COMMA ID variable_seen varppp varpp
    (12) varpp -> . empty
    (116) empty -> .

    COMMA           shift and go to state 104
    SEMICOLON       reduce using rule 116 (empty -> .)

    varpp                          shift and go to state 103
    empty                          shift and go to state 105

state 71

    (13) varppp -> dimDeclare .
    (14) varppp -> dimDeclare . dimDeclare
    (18) dimDeclare -> . L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET

    COMMA           reduce using rule 13 (varppp -> dimDeclare .)
    SEMICOLON       reduce using rule 13 (varppp -> dimDeclare .)
    L_SQUARE_BRACKET shift and go to state 73

    dimDeclare                     shift and go to state 106

state 72

    (15) varppp -> empty .

    COMMA           reduce using rule 15 (varppp -> empty .)
    SEMICOLON       reduce using rule 15 (varppp -> empty .)


state 73

    (18) dimDeclare -> L_SQUARE_BRACKET . CTE_INT R_SQUARE_BRACKET

    CTE_INT         shift and go to state 107


state 74

    (7) varp -> tipo tipo_seen COLON ID error varppp . varpp delete_type SEMICOLON varpppp
    (11) varpp -> . COMMA ID variable_seen varppp varpp
    (12) varpp -> . empty
    (116) empty -> .

    COMMA           shift and go to state 104
    SEMICOLON       reduce using rule 116 (empty -> .)

    varpp                          shift and go to state 108
    empty                          shift and go to state 105

state 75

    (46) asignacion -> ID operand_seen dimId . ASSIGN operation_seen expresion apply_operation_assign SEMICOLON

    ASSIGN          shift and go to state 109


state 76

    (49) dimId -> dim .
    (50) dimId -> dim . dim
    (52) dim -> . L_SQUARE_BRACKET expresion R_SQUARE_BRACKET

    ASSIGN          reduce using rule 49 (dimId -> dim .)
    COMMA           reduce using rule 49 (dimId -> dim .)
    R_PARENTHESIS   reduce using rule 49 (dimId -> dim .)
    DETERMINANT     reduce using rule 49 (dimId -> dim .)
    TRANSPOSED      reduce using rule 49 (dimId -> dim .)
    INVERSE         reduce using rule 49 (dimId -> dim .)
    MULTIPLY        reduce using rule 49 (dimId -> dim .)
    DIVIDE          reduce using rule 49 (dimId -> dim .)
    SUM             reduce using rule 49 (dimId -> dim .)
    SUBTRACT        reduce using rule 49 (dimId -> dim .)
    EQUALS          reduce using rule 49 (dimId -> dim .)
    NOT_EQUAL       reduce using rule 49 (dimId -> dim .)
    LESS_THAN       reduce using rule 49 (dimId -> dim .)
    LESS_THAN_EQUAL reduce using rule 49 (dimId -> dim .)
    GREATER_THAN    reduce using rule 49 (dimId -> dim .)
    GREATER_THAN_EQUAL reduce using rule 49 (dimId -> dim .)
    AND             reduce using rule 49 (dimId -> dim .)
    OR              reduce using rule 49 (dimId -> dim .)
    R_SQUARE_BRACKET reduce using rule 49 (dimId -> dim .)
    SEMICOLON       reduce using rule 49 (dimId -> dim .)
    HASTA           reduce using rule 49 (dimId -> dim .)
    HACER           reduce using rule 49 (dimId -> dim .)
    L_SQUARE_BRACKET shift and go to state 78

    dim                            shift and go to state 110

state 77

    (51) dimId -> empty .

    ASSIGN          reduce using rule 51 (dimId -> empty .)
    COMMA           reduce using rule 51 (dimId -> empty .)
    R_PARENTHESIS   reduce using rule 51 (dimId -> empty .)
    DETERMINANT     reduce using rule 51 (dimId -> empty .)
    TRANSPOSED      reduce using rule 51 (dimId -> empty .)
    INVERSE         reduce using rule 51 (dimId -> empty .)
    MULTIPLY        reduce using rule 51 (dimId -> empty .)
    DIVIDE          reduce using rule 51 (dimId -> empty .)
    SUM             reduce using rule 51 (dimId -> empty .)
    SUBTRACT        reduce using rule 51 (dimId -> empty .)
    EQUALS          reduce using rule 51 (dimId -> empty .)
    NOT_EQUAL       reduce using rule 51 (dimId -> empty .)
    LESS_THAN       reduce using rule 51 (dimId -> empty .)
    LESS_THAN_EQUAL reduce using rule 51 (dimId -> empty .)
    GREATER_THAN    reduce using rule 51 (dimId -> empty .)
    GREATER_THAN_EQUAL reduce using rule 51 (dimId -> empty .)
    AND             reduce using rule 51 (dimId -> empty .)
    OR              reduce using rule 51 (dimId -> empty .)
    R_SQUARE_BRACKET reduce using rule 51 (dimId -> empty .)
    SEMICOLON       reduce using rule 51 (dimId -> empty .)
    HASTA           reduce using rule 51 (dimId -> empty .)
    HACER           reduce using rule 51 (dimId -> empty .)


state 78

    (52) dim -> L_SQUARE_BRACKET . expresion R_SQUARE_BRACKET
    (53) expresion -> . relacional apply_operation_expresion expresionp
    (54) expresion -> . NOT relacional expresionp
    (59) relacional -> . aritmetica apply_operation_relational relacionalp
    (68) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (73) factor -> . matriz apply_operation_factor factorp
    (79) matriz -> . cte matrizp
    (84) cte -> . CTE_INT
    (85) cte -> . CTE_FLOAT
    (86) cte -> . CTE_CHAR
    (87) cte -> . llamadaFuncion
    (88) cte -> . ID operand_seen dimId
    (89) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (90) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    NOT             shift and go to state 83
    CTE_INT         shift and go to state 88
    CTE_FLOAT       shift and go to state 89
    CTE_CHAR        shift and go to state 90
    ID              shift and go to state 79
    L_PARENTHESIS   shift and go to state 80

    expresion                      shift and go to state 111
    relacional                     shift and go to state 82
    aritmetica                     shift and go to state 84
    factor                         shift and go to state 85
    matriz                         shift and go to state 86
    cte                            shift and go to state 87
    llamadaFuncion                 shift and go to state 91

state 79

    (88) cte -> ID . operand_seen dimId
    (90) llamadaFuncion -> ID . L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS
    (47) operand_seen -> .

    L_PARENTHESIS   shift and go to state 113
    L_SQUARE_BRACKET reduce using rule 47 (operand_seen -> .)
    DETERMINANT     reduce using rule 47 (operand_seen -> .)
    TRANSPOSED      reduce using rule 47 (operand_seen -> .)
    INVERSE         reduce using rule 47 (operand_seen -> .)
    MULTIPLY        reduce using rule 47 (operand_seen -> .)
    DIVIDE          reduce using rule 47 (operand_seen -> .)
    SUM             reduce using rule 47 (operand_seen -> .)
    SUBTRACT        reduce using rule 47 (operand_seen -> .)
    EQUALS          reduce using rule 47 (operand_seen -> .)
    NOT_EQUAL       reduce using rule 47 (operand_seen -> .)
    LESS_THAN       reduce using rule 47 (operand_seen -> .)
    LESS_THAN_EQUAL reduce using rule 47 (operand_seen -> .)
    GREATER_THAN    reduce using rule 47 (operand_seen -> .)
    GREATER_THAN_EQUAL reduce using rule 47 (operand_seen -> .)
    AND             reduce using rule 47 (operand_seen -> .)
    OR              reduce using rule 47 (operand_seen -> .)
    COMMA           reduce using rule 47 (operand_seen -> .)
    R_PARENTHESIS   reduce using rule 47 (operand_seen -> .)
    R_SQUARE_BRACKET reduce using rule 47 (operand_seen -> .)
    SEMICOLON       reduce using rule 47 (operand_seen -> .)
    HASTA           reduce using rule 47 (operand_seen -> .)
    HACER           reduce using rule 47 (operand_seen -> .)

    operand_seen                   shift and go to state 112

state 80

    (89) cte -> L_PARENTHESIS . operation_seen expresion R_PARENTHESIS operation_seen
    (78) operation_seen -> .

    NOT             reduce using rule 78 (operation_seen -> .)
    CTE_INT         reduce using rule 78 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 78 (operation_seen -> .)
    CTE_CHAR        reduce using rule 78 (operation_seen -> .)
    ID              reduce using rule 78 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 78 (operation_seen -> .)

    operation_seen                 shift and go to state 114

state 81

    (93) funcionVacia -> ID L_PARENTHESIS expresion . llamadaFuncionp R_PARENTHESIS SEMICOLON
    (91) llamadaFuncionp -> . COMMA expresion
    (92) llamadaFuncionp -> . empty
    (116) empty -> .

    COMMA           shift and go to state 116
    R_PARENTHESIS   reduce using rule 116 (empty -> .)

    llamadaFuncionp                shift and go to state 115
    empty                          shift and go to state 117

state 82

    (53) expresion -> relacional . apply_operation_expresion expresionp
    (58) apply_operation_expresion -> .

    AND             reduce using rule 58 (apply_operation_expresion -> .)
    OR              reduce using rule 58 (apply_operation_expresion -> .)
    COMMA           reduce using rule 58 (apply_operation_expresion -> .)
    R_PARENTHESIS   reduce using rule 58 (apply_operation_expresion -> .)
    R_SQUARE_BRACKET reduce using rule 58 (apply_operation_expresion -> .)
    SEMICOLON       reduce using rule 58 (apply_operation_expresion -> .)
    HASTA           reduce using rule 58 (apply_operation_expresion -> .)
    HACER           reduce using rule 58 (apply_operation_expresion -> .)

    apply_operation_expresion      shift and go to state 118

state 83

    (54) expresion -> NOT . relacional expresionp
    (59) relacional -> . aritmetica apply_operation_relational relacionalp
    (68) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (73) factor -> . matriz apply_operation_factor factorp
    (79) matriz -> . cte matrizp
    (84) cte -> . CTE_INT
    (85) cte -> . CTE_FLOAT
    (86) cte -> . CTE_CHAR
    (87) cte -> . llamadaFuncion
    (88) cte -> . ID operand_seen dimId
    (89) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (90) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    CTE_INT         shift and go to state 88
    CTE_FLOAT       shift and go to state 89
    CTE_CHAR        shift and go to state 90
    ID              shift and go to state 79
    L_PARENTHESIS   shift and go to state 80

    relacional                     shift and go to state 119
    aritmetica                     shift and go to state 84
    factor                         shift and go to state 85
    matriz                         shift and go to state 86
    cte                            shift and go to state 87
    llamadaFuncion                 shift and go to state 91

state 84

    (59) relacional -> aritmetica . apply_operation_relational relacionalp
    (67) apply_operation_relational -> .

    EQUALS          reduce using rule 67 (apply_operation_relational -> .)
    NOT_EQUAL       reduce using rule 67 (apply_operation_relational -> .)
    LESS_THAN       reduce using rule 67 (apply_operation_relational -> .)
    LESS_THAN_EQUAL reduce using rule 67 (apply_operation_relational -> .)
    GREATER_THAN    reduce using rule 67 (apply_operation_relational -> .)
    GREATER_THAN_EQUAL reduce using rule 67 (apply_operation_relational -> .)
    AND             reduce using rule 67 (apply_operation_relational -> .)
    OR              reduce using rule 67 (apply_operation_relational -> .)
    COMMA           reduce using rule 67 (apply_operation_relational -> .)
    R_PARENTHESIS   reduce using rule 67 (apply_operation_relational -> .)
    R_SQUARE_BRACKET reduce using rule 67 (apply_operation_relational -> .)
    SEMICOLON       reduce using rule 67 (apply_operation_relational -> .)
    HASTA           reduce using rule 67 (apply_operation_relational -> .)
    HACER           reduce using rule 67 (apply_operation_relational -> .)

    apply_operation_relational     shift and go to state 120

state 85

    (68) aritmetica -> factor . apply_operation_aritmetica aritmeticap
    (72) apply_operation_aritmetica -> .

    SUM             reduce using rule 72 (apply_operation_aritmetica -> .)
    SUBTRACT        reduce using rule 72 (apply_operation_aritmetica -> .)
    EQUALS          reduce using rule 72 (apply_operation_aritmetica -> .)
    NOT_EQUAL       reduce using rule 72 (apply_operation_aritmetica -> .)
    LESS_THAN       reduce using rule 72 (apply_operation_aritmetica -> .)
    LESS_THAN_EQUAL reduce using rule 72 (apply_operation_aritmetica -> .)
    GREATER_THAN    reduce using rule 72 (apply_operation_aritmetica -> .)
    GREATER_THAN_EQUAL reduce using rule 72 (apply_operation_aritmetica -> .)
    AND             reduce using rule 72 (apply_operation_aritmetica -> .)
    OR              reduce using rule 72 (apply_operation_aritmetica -> .)
    COMMA           reduce using rule 72 (apply_operation_aritmetica -> .)
    R_PARENTHESIS   reduce using rule 72 (apply_operation_aritmetica -> .)
    R_SQUARE_BRACKET reduce using rule 72 (apply_operation_aritmetica -> .)
    SEMICOLON       reduce using rule 72 (apply_operation_aritmetica -> .)
    HASTA           reduce using rule 72 (apply_operation_aritmetica -> .)
    HACER           reduce using rule 72 (apply_operation_aritmetica -> .)

    apply_operation_aritmetica     shift and go to state 121

state 86

    (73) factor -> matriz . apply_operation_factor factorp
    (77) apply_operation_factor -> .

    MULTIPLY        reduce using rule 77 (apply_operation_factor -> .)
    DIVIDE          reduce using rule 77 (apply_operation_factor -> .)
    SUM             reduce using rule 77 (apply_operation_factor -> .)
    SUBTRACT        reduce using rule 77 (apply_operation_factor -> .)
    EQUALS          reduce using rule 77 (apply_operation_factor -> .)
    NOT_EQUAL       reduce using rule 77 (apply_operation_factor -> .)
    LESS_THAN       reduce using rule 77 (apply_operation_factor -> .)
    LESS_THAN_EQUAL reduce using rule 77 (apply_operation_factor -> .)
    GREATER_THAN    reduce using rule 77 (apply_operation_factor -> .)
    GREATER_THAN_EQUAL reduce using rule 77 (apply_operation_factor -> .)
    AND             reduce using rule 77 (apply_operation_factor -> .)
    OR              reduce using rule 77 (apply_operation_factor -> .)
    COMMA           reduce using rule 77 (apply_operation_factor -> .)
    R_PARENTHESIS   reduce using rule 77 (apply_operation_factor -> .)
    R_SQUARE_BRACKET reduce using rule 77 (apply_operation_factor -> .)
    SEMICOLON       reduce using rule 77 (apply_operation_factor -> .)
    HASTA           reduce using rule 77 (apply_operation_factor -> .)
    HACER           reduce using rule 77 (apply_operation_factor -> .)

    apply_operation_factor         shift and go to state 122

state 87

    (79) matriz -> cte . matrizp
    (80) matrizp -> . DETERMINANT
    (81) matrizp -> . TRANSPOSED
    (82) matrizp -> . INVERSE
    (83) matrizp -> . empty
    (116) empty -> .

    DETERMINANT     shift and go to state 124
    TRANSPOSED      shift and go to state 125
    INVERSE         shift and go to state 126
    MULTIPLY        reduce using rule 116 (empty -> .)
    DIVIDE          reduce using rule 116 (empty -> .)
    SUM             reduce using rule 116 (empty -> .)
    SUBTRACT        reduce using rule 116 (empty -> .)
    EQUALS          reduce using rule 116 (empty -> .)
    NOT_EQUAL       reduce using rule 116 (empty -> .)
    LESS_THAN       reduce using rule 116 (empty -> .)
    LESS_THAN_EQUAL reduce using rule 116 (empty -> .)
    GREATER_THAN    reduce using rule 116 (empty -> .)
    GREATER_THAN_EQUAL reduce using rule 116 (empty -> .)
    AND             reduce using rule 116 (empty -> .)
    OR              reduce using rule 116 (empty -> .)
    COMMA           reduce using rule 116 (empty -> .)
    R_PARENTHESIS   reduce using rule 116 (empty -> .)
    R_SQUARE_BRACKET reduce using rule 116 (empty -> .)
    SEMICOLON       reduce using rule 116 (empty -> .)
    HASTA           reduce using rule 116 (empty -> .)
    HACER           reduce using rule 116 (empty -> .)

    matrizp                        shift and go to state 123
    empty                          shift and go to state 127

state 88

    (84) cte -> CTE_INT .

    DETERMINANT     reduce using rule 84 (cte -> CTE_INT .)
    TRANSPOSED      reduce using rule 84 (cte -> CTE_INT .)
    INVERSE         reduce using rule 84 (cte -> CTE_INT .)
    MULTIPLY        reduce using rule 84 (cte -> CTE_INT .)
    DIVIDE          reduce using rule 84 (cte -> CTE_INT .)
    SUM             reduce using rule 84 (cte -> CTE_INT .)
    SUBTRACT        reduce using rule 84 (cte -> CTE_INT .)
    EQUALS          reduce using rule 84 (cte -> CTE_INT .)
    NOT_EQUAL       reduce using rule 84 (cte -> CTE_INT .)
    LESS_THAN       reduce using rule 84 (cte -> CTE_INT .)
    LESS_THAN_EQUAL reduce using rule 84 (cte -> CTE_INT .)
    GREATER_THAN    reduce using rule 84 (cte -> CTE_INT .)
    GREATER_THAN_EQUAL reduce using rule 84 (cte -> CTE_INT .)
    AND             reduce using rule 84 (cte -> CTE_INT .)
    OR              reduce using rule 84 (cte -> CTE_INT .)
    COMMA           reduce using rule 84 (cte -> CTE_INT .)
    R_PARENTHESIS   reduce using rule 84 (cte -> CTE_INT .)
    R_SQUARE_BRACKET reduce using rule 84 (cte -> CTE_INT .)
    SEMICOLON       reduce using rule 84 (cte -> CTE_INT .)
    HASTA           reduce using rule 84 (cte -> CTE_INT .)
    HACER           reduce using rule 84 (cte -> CTE_INT .)


state 89

    (85) cte -> CTE_FLOAT .

    DETERMINANT     reduce using rule 85 (cte -> CTE_FLOAT .)
    TRANSPOSED      reduce using rule 85 (cte -> CTE_FLOAT .)
    INVERSE         reduce using rule 85 (cte -> CTE_FLOAT .)
    MULTIPLY        reduce using rule 85 (cte -> CTE_FLOAT .)
    DIVIDE          reduce using rule 85 (cte -> CTE_FLOAT .)
    SUM             reduce using rule 85 (cte -> CTE_FLOAT .)
    SUBTRACT        reduce using rule 85 (cte -> CTE_FLOAT .)
    EQUALS          reduce using rule 85 (cte -> CTE_FLOAT .)
    NOT_EQUAL       reduce using rule 85 (cte -> CTE_FLOAT .)
    LESS_THAN       reduce using rule 85 (cte -> CTE_FLOAT .)
    LESS_THAN_EQUAL reduce using rule 85 (cte -> CTE_FLOAT .)
    GREATER_THAN    reduce using rule 85 (cte -> CTE_FLOAT .)
    GREATER_THAN_EQUAL reduce using rule 85 (cte -> CTE_FLOAT .)
    AND             reduce using rule 85 (cte -> CTE_FLOAT .)
    OR              reduce using rule 85 (cte -> CTE_FLOAT .)
    COMMA           reduce using rule 85 (cte -> CTE_FLOAT .)
    R_PARENTHESIS   reduce using rule 85 (cte -> CTE_FLOAT .)
    R_SQUARE_BRACKET reduce using rule 85 (cte -> CTE_FLOAT .)
    SEMICOLON       reduce using rule 85 (cte -> CTE_FLOAT .)
    HASTA           reduce using rule 85 (cte -> CTE_FLOAT .)
    HACER           reduce using rule 85 (cte -> CTE_FLOAT .)


state 90

    (86) cte -> CTE_CHAR .

    DETERMINANT     reduce using rule 86 (cte -> CTE_CHAR .)
    TRANSPOSED      reduce using rule 86 (cte -> CTE_CHAR .)
    INVERSE         reduce using rule 86 (cte -> CTE_CHAR .)
    MULTIPLY        reduce using rule 86 (cte -> CTE_CHAR .)
    DIVIDE          reduce using rule 86 (cte -> CTE_CHAR .)
    SUM             reduce using rule 86 (cte -> CTE_CHAR .)
    SUBTRACT        reduce using rule 86 (cte -> CTE_CHAR .)
    EQUALS          reduce using rule 86 (cte -> CTE_CHAR .)
    NOT_EQUAL       reduce using rule 86 (cte -> CTE_CHAR .)
    LESS_THAN       reduce using rule 86 (cte -> CTE_CHAR .)
    LESS_THAN_EQUAL reduce using rule 86 (cte -> CTE_CHAR .)
    GREATER_THAN    reduce using rule 86 (cte -> CTE_CHAR .)
    GREATER_THAN_EQUAL reduce using rule 86 (cte -> CTE_CHAR .)
    AND             reduce using rule 86 (cte -> CTE_CHAR .)
    OR              reduce using rule 86 (cte -> CTE_CHAR .)
    COMMA           reduce using rule 86 (cte -> CTE_CHAR .)
    R_PARENTHESIS   reduce using rule 86 (cte -> CTE_CHAR .)
    R_SQUARE_BRACKET reduce using rule 86 (cte -> CTE_CHAR .)
    SEMICOLON       reduce using rule 86 (cte -> CTE_CHAR .)
    HASTA           reduce using rule 86 (cte -> CTE_CHAR .)
    HACER           reduce using rule 86 (cte -> CTE_CHAR .)


state 91

    (87) cte -> llamadaFuncion .

    DETERMINANT     reduce using rule 87 (cte -> llamadaFuncion .)
    TRANSPOSED      reduce using rule 87 (cte -> llamadaFuncion .)
    INVERSE         reduce using rule 87 (cte -> llamadaFuncion .)
    MULTIPLY        reduce using rule 87 (cte -> llamadaFuncion .)
    DIVIDE          reduce using rule 87 (cte -> llamadaFuncion .)
    SUM             reduce using rule 87 (cte -> llamadaFuncion .)
    SUBTRACT        reduce using rule 87 (cte -> llamadaFuncion .)
    EQUALS          reduce using rule 87 (cte -> llamadaFuncion .)
    NOT_EQUAL       reduce using rule 87 (cte -> llamadaFuncion .)
    LESS_THAN       reduce using rule 87 (cte -> llamadaFuncion .)
    LESS_THAN_EQUAL reduce using rule 87 (cte -> llamadaFuncion .)
    GREATER_THAN    reduce using rule 87 (cte -> llamadaFuncion .)
    GREATER_THAN_EQUAL reduce using rule 87 (cte -> llamadaFuncion .)
    AND             reduce using rule 87 (cte -> llamadaFuncion .)
    OR              reduce using rule 87 (cte -> llamadaFuncion .)
    COMMA           reduce using rule 87 (cte -> llamadaFuncion .)
    R_PARENTHESIS   reduce using rule 87 (cte -> llamadaFuncion .)
    R_SQUARE_BRACKET reduce using rule 87 (cte -> llamadaFuncion .)
    SEMICOLON       reduce using rule 87 (cte -> llamadaFuncion .)
    HASTA           reduce using rule 87 (cte -> llamadaFuncion .)
    HACER           reduce using rule 87 (cte -> llamadaFuncion .)


state 92

    (94) regresa -> REGRESA L_PARENTHESIS expresion . R_PARENTHESIS SEMICOLON

    R_PARENTHESIS   shift and go to state 128


state 93

    (95) lectura -> LECTURA L_PARENTHESIS lecturap . R_PARENTHESIS SEMICOLON

    R_PARENTHESIS   shift and go to state 129


state 94

    (96) lecturap -> ID . dimId lecturapp
    (49) dimId -> . dim
    (50) dimId -> . dim dim
    (51) dimId -> . empty
    (52) dim -> . L_SQUARE_BRACKET expresion R_SQUARE_BRACKET
    (116) empty -> .

    L_SQUARE_BRACKET shift and go to state 78
    COMMA           reduce using rule 116 (empty -> .)
    R_PARENTHESIS   reduce using rule 116 (empty -> .)

    dimId                          shift and go to state 130
    dim                            shift and go to state 76
    empty                          shift and go to state 77

state 95

    (99) escritura -> ESCRIBE L_PARENTHESIS escriturap . R_PARENTHESIS SEMICOLON

    R_PARENTHESIS   shift and go to state 131


state 96

    (100) escriturap -> LETRERO . escriturapp
    (102) escriturapp -> . COMMA escriturap
    (103) escriturapp -> . empty
    (116) empty -> .

    COMMA           shift and go to state 133
    R_PARENTHESIS   reduce using rule 116 (empty -> .)

    escriturapp                    shift and go to state 132
    empty                          shift and go to state 134

state 97

    (101) escriturap -> expresion . escriturapp
    (102) escriturapp -> . COMMA escriturap
    (103) escriturapp -> . empty
    (116) empty -> .

    COMMA           shift and go to state 133
    R_PARENTHESIS   reduce using rule 116 (empty -> .)

    escriturapp                    shift and go to state 135
    empty                          shift and go to state 134

state 98

    (104) decision -> SI L_PARENTHESIS expresion . R_PARENTHESIS jump_false HAZ bloque decisionp

    R_PARENTHESIS   shift and go to state 136


state 99

    (110) cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS . expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle
    (53) expresion -> . relacional apply_operation_expresion expresionp
    (54) expresion -> . NOT relacional expresionp
    (59) relacional -> . aritmetica apply_operation_relational relacionalp
    (68) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (73) factor -> . matriz apply_operation_factor factorp
    (79) matriz -> . cte matrizp
    (84) cte -> . CTE_INT
    (85) cte -> . CTE_FLOAT
    (86) cte -> . CTE_CHAR
    (87) cte -> . llamadaFuncion
    (88) cte -> . ID operand_seen dimId
    (89) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (90) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    NOT             shift and go to state 83
    CTE_INT         shift and go to state 88
    CTE_FLOAT       shift and go to state 89
    CTE_CHAR        shift and go to state 90
    ID              shift and go to state 79
    L_PARENTHESIS   shift and go to state 80

    expresion                      shift and go to state 137
    relacional                     shift and go to state 82
    aritmetica                     shift and go to state 84
    factor                         shift and go to state 85
    matriz                         shift and go to state 86
    cte                            shift and go to state 87
    llamadaFuncion                 shift and go to state 91

state 100

    (113) cicloNoCondicional -> DESDE ID operand_seen . dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle
    (49) dimId -> . dim
    (50) dimId -> . dim dim
    (51) dimId -> . empty
    (52) dim -> . L_SQUARE_BRACKET expresion R_SQUARE_BRACKET
    (116) empty -> .

    L_SQUARE_BRACKET shift and go to state 78
    ASSIGN          reduce using rule 116 (empty -> .)

    dimId                          shift and go to state 138
    dim                            shift and go to state 76
    empty                          shift and go to state 77

state 101

    (25) funcionp -> tipoRetorno ID create_func_scope L_PARENTHESIS parametro R_PARENTHESIS var . bloque funcion
    (35) bloque -> . L_CURLY_BRACKET bloquep R_CURLY_BRACKET

    L_CURLY_BRACKET shift and go to state 31

    bloque                         shift and go to state 139

state 102

    (28) parametro -> tipo ID save_param . parametrop
    (31) parametrop -> . COMMA tipo ID save_param parametrop
    (32) parametrop -> . empty
    (116) empty -> .

    COMMA           shift and go to state 141
    R_PARENTHESIS   reduce using rule 116 (empty -> .)

    parametrop                     shift and go to state 140
    empty                          shift and go to state 142

state 103

    (6) varp -> tipo tipo_seen COLON ID variable_seen varppp varpp . delete_type SEMICOLON varpppp
    (10) delete_type -> .

    SEMICOLON       reduce using rule 10 (delete_type -> .)

    delete_type                    shift and go to state 143

state 104

    (11) varpp -> COMMA . ID variable_seen varppp varpp

    ID              shift and go to state 144


state 105

    (12) varpp -> empty .

    SEMICOLON       reduce using rule 12 (varpp -> empty .)


state 106

    (14) varppp -> dimDeclare dimDeclare .

    COMMA           reduce using rule 14 (varppp -> dimDeclare dimDeclare .)
    SEMICOLON       reduce using rule 14 (varppp -> dimDeclare dimDeclare .)


state 107

    (18) dimDeclare -> L_SQUARE_BRACKET CTE_INT . R_SQUARE_BRACKET

    R_SQUARE_BRACKET shift and go to state 145


state 108

    (7) varp -> tipo tipo_seen COLON ID error varppp varpp . delete_type SEMICOLON varpppp
    (10) delete_type -> .

    SEMICOLON       reduce using rule 10 (delete_type -> .)

    delete_type                    shift and go to state 146

state 109

    (46) asignacion -> ID operand_seen dimId ASSIGN . operation_seen expresion apply_operation_assign SEMICOLON
    (78) operation_seen -> .

    NOT             reduce using rule 78 (operation_seen -> .)
    CTE_INT         reduce using rule 78 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 78 (operation_seen -> .)
    CTE_CHAR        reduce using rule 78 (operation_seen -> .)
    ID              reduce using rule 78 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 78 (operation_seen -> .)

    operation_seen                 shift and go to state 147

state 110

    (50) dimId -> dim dim .

    ASSIGN          reduce using rule 50 (dimId -> dim dim .)
    COMMA           reduce using rule 50 (dimId -> dim dim .)
    R_PARENTHESIS   reduce using rule 50 (dimId -> dim dim .)
    DETERMINANT     reduce using rule 50 (dimId -> dim dim .)
    TRANSPOSED      reduce using rule 50 (dimId -> dim dim .)
    INVERSE         reduce using rule 50 (dimId -> dim dim .)
    MULTIPLY        reduce using rule 50 (dimId -> dim dim .)
    DIVIDE          reduce using rule 50 (dimId -> dim dim .)
    SUM             reduce using rule 50 (dimId -> dim dim .)
    SUBTRACT        reduce using rule 50 (dimId -> dim dim .)
    EQUALS          reduce using rule 50 (dimId -> dim dim .)
    NOT_EQUAL       reduce using rule 50 (dimId -> dim dim .)
    LESS_THAN       reduce using rule 50 (dimId -> dim dim .)
    LESS_THAN_EQUAL reduce using rule 50 (dimId -> dim dim .)
    GREATER_THAN    reduce using rule 50 (dimId -> dim dim .)
    GREATER_THAN_EQUAL reduce using rule 50 (dimId -> dim dim .)
    AND             reduce using rule 50 (dimId -> dim dim .)
    OR              reduce using rule 50 (dimId -> dim dim .)
    R_SQUARE_BRACKET reduce using rule 50 (dimId -> dim dim .)
    SEMICOLON       reduce using rule 50 (dimId -> dim dim .)
    HASTA           reduce using rule 50 (dimId -> dim dim .)
    HACER           reduce using rule 50 (dimId -> dim dim .)


state 111

    (52) dim -> L_SQUARE_BRACKET expresion . R_SQUARE_BRACKET

    R_SQUARE_BRACKET shift and go to state 148


state 112

    (88) cte -> ID operand_seen . dimId
    (49) dimId -> . dim
    (50) dimId -> . dim dim
    (51) dimId -> . empty
    (52) dim -> . L_SQUARE_BRACKET expresion R_SQUARE_BRACKET
    (116) empty -> .

    L_SQUARE_BRACKET shift and go to state 78
    DETERMINANT     reduce using rule 116 (empty -> .)
    TRANSPOSED      reduce using rule 116 (empty -> .)
    INVERSE         reduce using rule 116 (empty -> .)
    MULTIPLY        reduce using rule 116 (empty -> .)
    DIVIDE          reduce using rule 116 (empty -> .)
    SUM             reduce using rule 116 (empty -> .)
    SUBTRACT        reduce using rule 116 (empty -> .)
    EQUALS          reduce using rule 116 (empty -> .)
    NOT_EQUAL       reduce using rule 116 (empty -> .)
    LESS_THAN       reduce using rule 116 (empty -> .)
    LESS_THAN_EQUAL reduce using rule 116 (empty -> .)
    GREATER_THAN    reduce using rule 116 (empty -> .)
    GREATER_THAN_EQUAL reduce using rule 116 (empty -> .)
    AND             reduce using rule 116 (empty -> .)
    OR              reduce using rule 116 (empty -> .)
    COMMA           reduce using rule 116 (empty -> .)
    R_PARENTHESIS   reduce using rule 116 (empty -> .)
    R_SQUARE_BRACKET reduce using rule 116 (empty -> .)
    SEMICOLON       reduce using rule 116 (empty -> .)
    HASTA           reduce using rule 116 (empty -> .)
    HACER           reduce using rule 116 (empty -> .)

    dimId                          shift and go to state 149
    dim                            shift and go to state 76
    empty                          shift and go to state 77

state 113

    (90) llamadaFuncion -> ID L_PARENTHESIS . expresion llamadaFuncionp R_PARENTHESIS
    (53) expresion -> . relacional apply_operation_expresion expresionp
    (54) expresion -> . NOT relacional expresionp
    (59) relacional -> . aritmetica apply_operation_relational relacionalp
    (68) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (73) factor -> . matriz apply_operation_factor factorp
    (79) matriz -> . cte matrizp
    (84) cte -> . CTE_INT
    (85) cte -> . CTE_FLOAT
    (86) cte -> . CTE_CHAR
    (87) cte -> . llamadaFuncion
    (88) cte -> . ID operand_seen dimId
    (89) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (90) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    NOT             shift and go to state 83
    CTE_INT         shift and go to state 88
    CTE_FLOAT       shift and go to state 89
    CTE_CHAR        shift and go to state 90
    ID              shift and go to state 79
    L_PARENTHESIS   shift and go to state 80

    expresion                      shift and go to state 150
    relacional                     shift and go to state 82
    aritmetica                     shift and go to state 84
    factor                         shift and go to state 85
    matriz                         shift and go to state 86
    cte                            shift and go to state 87
    llamadaFuncion                 shift and go to state 91

state 114

    (89) cte -> L_PARENTHESIS operation_seen . expresion R_PARENTHESIS operation_seen
    (53) expresion -> . relacional apply_operation_expresion expresionp
    (54) expresion -> . NOT relacional expresionp
    (59) relacional -> . aritmetica apply_operation_relational relacionalp
    (68) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (73) factor -> . matriz apply_operation_factor factorp
    (79) matriz -> . cte matrizp
    (84) cte -> . CTE_INT
    (85) cte -> . CTE_FLOAT
    (86) cte -> . CTE_CHAR
    (87) cte -> . llamadaFuncion
    (88) cte -> . ID operand_seen dimId
    (89) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (90) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    NOT             shift and go to state 83
    CTE_INT         shift and go to state 88
    CTE_FLOAT       shift and go to state 89
    CTE_CHAR        shift and go to state 90
    ID              shift and go to state 79
    L_PARENTHESIS   shift and go to state 80

    expresion                      shift and go to state 151
    relacional                     shift and go to state 82
    aritmetica                     shift and go to state 84
    factor                         shift and go to state 85
    matriz                         shift and go to state 86
    cte                            shift and go to state 87
    llamadaFuncion                 shift and go to state 91

state 115

    (93) funcionVacia -> ID L_PARENTHESIS expresion llamadaFuncionp . R_PARENTHESIS SEMICOLON

    R_PARENTHESIS   shift and go to state 152


state 116

    (91) llamadaFuncionp -> COMMA . expresion
    (53) expresion -> . relacional apply_operation_expresion expresionp
    (54) expresion -> . NOT relacional expresionp
    (59) relacional -> . aritmetica apply_operation_relational relacionalp
    (68) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (73) factor -> . matriz apply_operation_factor factorp
    (79) matriz -> . cte matrizp
    (84) cte -> . CTE_INT
    (85) cte -> . CTE_FLOAT
    (86) cte -> . CTE_CHAR
    (87) cte -> . llamadaFuncion
    (88) cte -> . ID operand_seen dimId
    (89) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (90) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    NOT             shift and go to state 83
    CTE_INT         shift and go to state 88
    CTE_FLOAT       shift and go to state 89
    CTE_CHAR        shift and go to state 90
    ID              shift and go to state 79
    L_PARENTHESIS   shift and go to state 80

    expresion                      shift and go to state 153
    relacional                     shift and go to state 82
    aritmetica                     shift and go to state 84
    factor                         shift and go to state 85
    matriz                         shift and go to state 86
    cte                            shift and go to state 87
    llamadaFuncion                 shift and go to state 91

state 117

    (92) llamadaFuncionp -> empty .

    R_PARENTHESIS   reduce using rule 92 (llamadaFuncionp -> empty .)


state 118

    (53) expresion -> relacional apply_operation_expresion . expresionp
    (55) expresionp -> . AND operation_seen expresion
    (56) expresionp -> . OR operation_seen expresion
    (57) expresionp -> . empty
    (116) empty -> .

    AND             shift and go to state 155
    OR              shift and go to state 156
    COMMA           reduce using rule 116 (empty -> .)
    R_PARENTHESIS   reduce using rule 116 (empty -> .)
    R_SQUARE_BRACKET reduce using rule 116 (empty -> .)
    SEMICOLON       reduce using rule 116 (empty -> .)
    HASTA           reduce using rule 116 (empty -> .)
    HACER           reduce using rule 116 (empty -> .)

    expresionp                     shift and go to state 154
    empty                          shift and go to state 157

state 119

    (54) expresion -> NOT relacional . expresionp
    (55) expresionp -> . AND operation_seen expresion
    (56) expresionp -> . OR operation_seen expresion
    (57) expresionp -> . empty
    (116) empty -> .

    AND             shift and go to state 155
    OR              shift and go to state 156
    COMMA           reduce using rule 116 (empty -> .)
    R_PARENTHESIS   reduce using rule 116 (empty -> .)
    R_SQUARE_BRACKET reduce using rule 116 (empty -> .)
    SEMICOLON       reduce using rule 116 (empty -> .)
    HASTA           reduce using rule 116 (empty -> .)
    HACER           reduce using rule 116 (empty -> .)

    expresionp                     shift and go to state 158
    empty                          shift and go to state 157

state 120

    (59) relacional -> aritmetica apply_operation_relational . relacionalp
    (60) relacionalp -> . EQUALS operation_seen relacional
    (61) relacionalp -> . NOT_EQUAL operation_seen relacional
    (62) relacionalp -> . LESS_THAN operation_seen relacional
    (63) relacionalp -> . LESS_THAN_EQUAL operation_seen relacional
    (64) relacionalp -> . GREATER_THAN operation_seen relacional
    (65) relacionalp -> . GREATER_THAN_EQUAL operation_seen relacional
    (66) relacionalp -> . empty
    (116) empty -> .

    EQUALS          shift and go to state 160
    NOT_EQUAL       shift and go to state 161
    LESS_THAN       shift and go to state 162
    LESS_THAN_EQUAL shift and go to state 163
    GREATER_THAN    shift and go to state 164
    GREATER_THAN_EQUAL shift and go to state 165
    AND             reduce using rule 116 (empty -> .)
    OR              reduce using rule 116 (empty -> .)
    COMMA           reduce using rule 116 (empty -> .)
    R_PARENTHESIS   reduce using rule 116 (empty -> .)
    R_SQUARE_BRACKET reduce using rule 116 (empty -> .)
    SEMICOLON       reduce using rule 116 (empty -> .)
    HASTA           reduce using rule 116 (empty -> .)
    HACER           reduce using rule 116 (empty -> .)

    relacionalp                    shift and go to state 159
    empty                          shift and go to state 166

state 121

    (68) aritmetica -> factor apply_operation_aritmetica . aritmeticap
    (69) aritmeticap -> . SUM operation_seen aritmetica
    (70) aritmeticap -> . SUBTRACT operation_seen aritmetica
    (71) aritmeticap -> . empty
    (116) empty -> .

    SUM             shift and go to state 168
    SUBTRACT        shift and go to state 169
    EQUALS          reduce using rule 116 (empty -> .)
    NOT_EQUAL       reduce using rule 116 (empty -> .)
    LESS_THAN       reduce using rule 116 (empty -> .)
    LESS_THAN_EQUAL reduce using rule 116 (empty -> .)
    GREATER_THAN    reduce using rule 116 (empty -> .)
    GREATER_THAN_EQUAL reduce using rule 116 (empty -> .)
    AND             reduce using rule 116 (empty -> .)
    OR              reduce using rule 116 (empty -> .)
    COMMA           reduce using rule 116 (empty -> .)
    R_PARENTHESIS   reduce using rule 116 (empty -> .)
    R_SQUARE_BRACKET reduce using rule 116 (empty -> .)
    SEMICOLON       reduce using rule 116 (empty -> .)
    HASTA           reduce using rule 116 (empty -> .)
    HACER           reduce using rule 116 (empty -> .)

    aritmeticap                    shift and go to state 167
    empty                          shift and go to state 170

state 122

    (73) factor -> matriz apply_operation_factor . factorp
    (74) factorp -> . MULTIPLY operation_seen factor
    (75) factorp -> . DIVIDE operation_seen factor
    (76) factorp -> . empty
    (116) empty -> .

    MULTIPLY        shift and go to state 172
    DIVIDE          shift and go to state 173
    SUM             reduce using rule 116 (empty -> .)
    SUBTRACT        reduce using rule 116 (empty -> .)
    EQUALS          reduce using rule 116 (empty -> .)
    NOT_EQUAL       reduce using rule 116 (empty -> .)
    LESS_THAN       reduce using rule 116 (empty -> .)
    LESS_THAN_EQUAL reduce using rule 116 (empty -> .)
    GREATER_THAN    reduce using rule 116 (empty -> .)
    GREATER_THAN_EQUAL reduce using rule 116 (empty -> .)
    AND             reduce using rule 116 (empty -> .)
    OR              reduce using rule 116 (empty -> .)
    COMMA           reduce using rule 116 (empty -> .)
    R_PARENTHESIS   reduce using rule 116 (empty -> .)
    R_SQUARE_BRACKET reduce using rule 116 (empty -> .)
    SEMICOLON       reduce using rule 116 (empty -> .)
    HASTA           reduce using rule 116 (empty -> .)
    HACER           reduce using rule 116 (empty -> .)

    factorp                        shift and go to state 171
    empty                          shift and go to state 174

state 123

    (79) matriz -> cte matrizp .

    MULTIPLY        reduce using rule 79 (matriz -> cte matrizp .)
    DIVIDE          reduce using rule 79 (matriz -> cte matrizp .)
    SUM             reduce using rule 79 (matriz -> cte matrizp .)
    SUBTRACT        reduce using rule 79 (matriz -> cte matrizp .)
    EQUALS          reduce using rule 79 (matriz -> cte matrizp .)
    NOT_EQUAL       reduce using rule 79 (matriz -> cte matrizp .)
    LESS_THAN       reduce using rule 79 (matriz -> cte matrizp .)
    LESS_THAN_EQUAL reduce using rule 79 (matriz -> cte matrizp .)
    GREATER_THAN    reduce using rule 79 (matriz -> cte matrizp .)
    GREATER_THAN_EQUAL reduce using rule 79 (matriz -> cte matrizp .)
    AND             reduce using rule 79 (matriz -> cte matrizp .)
    OR              reduce using rule 79 (matriz -> cte matrizp .)
    COMMA           reduce using rule 79 (matriz -> cte matrizp .)
    R_PARENTHESIS   reduce using rule 79 (matriz -> cte matrizp .)
    R_SQUARE_BRACKET reduce using rule 79 (matriz -> cte matrizp .)
    SEMICOLON       reduce using rule 79 (matriz -> cte matrizp .)
    HASTA           reduce using rule 79 (matriz -> cte matrizp .)
    HACER           reduce using rule 79 (matriz -> cte matrizp .)


state 124

    (80) matrizp -> DETERMINANT .

    MULTIPLY        reduce using rule 80 (matrizp -> DETERMINANT .)
    DIVIDE          reduce using rule 80 (matrizp -> DETERMINANT .)
    SUM             reduce using rule 80 (matrizp -> DETERMINANT .)
    SUBTRACT        reduce using rule 80 (matrizp -> DETERMINANT .)
    EQUALS          reduce using rule 80 (matrizp -> DETERMINANT .)
    NOT_EQUAL       reduce using rule 80 (matrizp -> DETERMINANT .)
    LESS_THAN       reduce using rule 80 (matrizp -> DETERMINANT .)
    LESS_THAN_EQUAL reduce using rule 80 (matrizp -> DETERMINANT .)
    GREATER_THAN    reduce using rule 80 (matrizp -> DETERMINANT .)
    GREATER_THAN_EQUAL reduce using rule 80 (matrizp -> DETERMINANT .)
    AND             reduce using rule 80 (matrizp -> DETERMINANT .)
    OR              reduce using rule 80 (matrizp -> DETERMINANT .)
    COMMA           reduce using rule 80 (matrizp -> DETERMINANT .)
    R_PARENTHESIS   reduce using rule 80 (matrizp -> DETERMINANT .)
    R_SQUARE_BRACKET reduce using rule 80 (matrizp -> DETERMINANT .)
    SEMICOLON       reduce using rule 80 (matrizp -> DETERMINANT .)
    HASTA           reduce using rule 80 (matrizp -> DETERMINANT .)
    HACER           reduce using rule 80 (matrizp -> DETERMINANT .)


state 125

    (81) matrizp -> TRANSPOSED .

    MULTIPLY        reduce using rule 81 (matrizp -> TRANSPOSED .)
    DIVIDE          reduce using rule 81 (matrizp -> TRANSPOSED .)
    SUM             reduce using rule 81 (matrizp -> TRANSPOSED .)
    SUBTRACT        reduce using rule 81 (matrizp -> TRANSPOSED .)
    EQUALS          reduce using rule 81 (matrizp -> TRANSPOSED .)
    NOT_EQUAL       reduce using rule 81 (matrizp -> TRANSPOSED .)
    LESS_THAN       reduce using rule 81 (matrizp -> TRANSPOSED .)
    LESS_THAN_EQUAL reduce using rule 81 (matrizp -> TRANSPOSED .)
    GREATER_THAN    reduce using rule 81 (matrizp -> TRANSPOSED .)
    GREATER_THAN_EQUAL reduce using rule 81 (matrizp -> TRANSPOSED .)
    AND             reduce using rule 81 (matrizp -> TRANSPOSED .)
    OR              reduce using rule 81 (matrizp -> TRANSPOSED .)
    COMMA           reduce using rule 81 (matrizp -> TRANSPOSED .)
    R_PARENTHESIS   reduce using rule 81 (matrizp -> TRANSPOSED .)
    R_SQUARE_BRACKET reduce using rule 81 (matrizp -> TRANSPOSED .)
    SEMICOLON       reduce using rule 81 (matrizp -> TRANSPOSED .)
    HASTA           reduce using rule 81 (matrizp -> TRANSPOSED .)
    HACER           reduce using rule 81 (matrizp -> TRANSPOSED .)


state 126

    (82) matrizp -> INVERSE .

    MULTIPLY        reduce using rule 82 (matrizp -> INVERSE .)
    DIVIDE          reduce using rule 82 (matrizp -> INVERSE .)
    SUM             reduce using rule 82 (matrizp -> INVERSE .)
    SUBTRACT        reduce using rule 82 (matrizp -> INVERSE .)
    EQUALS          reduce using rule 82 (matrizp -> INVERSE .)
    NOT_EQUAL       reduce using rule 82 (matrizp -> INVERSE .)
    LESS_THAN       reduce using rule 82 (matrizp -> INVERSE .)
    LESS_THAN_EQUAL reduce using rule 82 (matrizp -> INVERSE .)
    GREATER_THAN    reduce using rule 82 (matrizp -> INVERSE .)
    GREATER_THAN_EQUAL reduce using rule 82 (matrizp -> INVERSE .)
    AND             reduce using rule 82 (matrizp -> INVERSE .)
    OR              reduce using rule 82 (matrizp -> INVERSE .)
    COMMA           reduce using rule 82 (matrizp -> INVERSE .)
    R_PARENTHESIS   reduce using rule 82 (matrizp -> INVERSE .)
    R_SQUARE_BRACKET reduce using rule 82 (matrizp -> INVERSE .)
    SEMICOLON       reduce using rule 82 (matrizp -> INVERSE .)
    HASTA           reduce using rule 82 (matrizp -> INVERSE .)
    HACER           reduce using rule 82 (matrizp -> INVERSE .)


state 127

    (83) matrizp -> empty .

    MULTIPLY        reduce using rule 83 (matrizp -> empty .)
    DIVIDE          reduce using rule 83 (matrizp -> empty .)
    SUM             reduce using rule 83 (matrizp -> empty .)
    SUBTRACT        reduce using rule 83 (matrizp -> empty .)
    EQUALS          reduce using rule 83 (matrizp -> empty .)
    NOT_EQUAL       reduce using rule 83 (matrizp -> empty .)
    LESS_THAN       reduce using rule 83 (matrizp -> empty .)
    LESS_THAN_EQUAL reduce using rule 83 (matrizp -> empty .)
    GREATER_THAN    reduce using rule 83 (matrizp -> empty .)
    GREATER_THAN_EQUAL reduce using rule 83 (matrizp -> empty .)
    AND             reduce using rule 83 (matrizp -> empty .)
    OR              reduce using rule 83 (matrizp -> empty .)
    COMMA           reduce using rule 83 (matrizp -> empty .)
    R_PARENTHESIS   reduce using rule 83 (matrizp -> empty .)
    R_SQUARE_BRACKET reduce using rule 83 (matrizp -> empty .)
    SEMICOLON       reduce using rule 83 (matrizp -> empty .)
    HASTA           reduce using rule 83 (matrizp -> empty .)
    HACER           reduce using rule 83 (matrizp -> empty .)


state 128

    (94) regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 175


state 129

    (95) lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 176


state 130

    (96) lecturap -> ID dimId . lecturapp
    (97) lecturapp -> . COMMA lecturap
    (98) lecturapp -> . empty
    (116) empty -> .

    COMMA           shift and go to state 178
    R_PARENTHESIS   reduce using rule 116 (empty -> .)

    lecturapp                      shift and go to state 177
    empty                          shift and go to state 179

state 131

    (99) escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 180


state 132

    (100) escriturap -> LETRERO escriturapp .

    R_PARENTHESIS   reduce using rule 100 (escriturap -> LETRERO escriturapp .)


state 133

    (102) escriturapp -> COMMA . escriturap
    (100) escriturap -> . LETRERO escriturapp
    (101) escriturap -> . expresion escriturapp
    (53) expresion -> . relacional apply_operation_expresion expresionp
    (54) expresion -> . NOT relacional expresionp
    (59) relacional -> . aritmetica apply_operation_relational relacionalp
    (68) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (73) factor -> . matriz apply_operation_factor factorp
    (79) matriz -> . cte matrizp
    (84) cte -> . CTE_INT
    (85) cte -> . CTE_FLOAT
    (86) cte -> . CTE_CHAR
    (87) cte -> . llamadaFuncion
    (88) cte -> . ID operand_seen dimId
    (89) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (90) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    LETRERO         shift and go to state 96
    NOT             shift and go to state 83
    CTE_INT         shift and go to state 88
    CTE_FLOAT       shift and go to state 89
    CTE_CHAR        shift and go to state 90
    ID              shift and go to state 79
    L_PARENTHESIS   shift and go to state 80

    escriturap                     shift and go to state 181
    expresion                      shift and go to state 97
    relacional                     shift and go to state 82
    aritmetica                     shift and go to state 84
    factor                         shift and go to state 85
    matriz                         shift and go to state 86
    cte                            shift and go to state 87
    llamadaFuncion                 shift and go to state 91

state 134

    (103) escriturapp -> empty .

    R_PARENTHESIS   reduce using rule 103 (escriturapp -> empty .)


state 135

    (101) escriturap -> expresion escriturapp .

    R_PARENTHESIS   reduce using rule 101 (escriturap -> expresion escriturapp .)


state 136

    (104) decision -> SI L_PARENTHESIS expresion R_PARENTHESIS . jump_false HAZ bloque decisionp
    (105) jump_false -> .

    HAZ             reduce using rule 105 (jump_false -> .)

    jump_false                     shift and go to state 182

state 137

    (110) cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion . R_PARENTHESIS jump_false HAZ bloque update_jump_cycle

    R_PARENTHESIS   shift and go to state 183


state 138

    (113) cicloNoCondicional -> DESDE ID operand_seen dimId . ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle

    ASSIGN          shift and go to state 184


state 139

    (25) funcionp -> tipoRetorno ID create_func_scope L_PARENTHESIS parametro R_PARENTHESIS var bloque . funcion
    (22) funcion -> . FUNCION funcionp
    (23) funcion -> . FUNCION error
    (24) funcion -> . empty
    (116) empty -> .

    FUNCION         shift and go to state 10
    PRINCIPAL       reduce using rule 116 (empty -> .)

    funcion                        shift and go to state 185
    empty                          shift and go to state 11

state 140

    (28) parametro -> tipo ID save_param parametrop .

    R_PARENTHESIS   reduce using rule 28 (parametro -> tipo ID save_param parametrop .)


state 141

    (31) parametrop -> COMMA . tipo ID save_param parametrop
    (19) tipo -> . INT
    (20) tipo -> . FLOAT
    (21) tipo -> . CHAR

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21

    tipo                           shift and go to state 186

state 142

    (32) parametrop -> empty .

    R_PARENTHESIS   reduce using rule 32 (parametrop -> empty .)


state 143

    (6) varp -> tipo tipo_seen COLON ID variable_seen varppp varpp delete_type . SEMICOLON varpppp

    SEMICOLON       shift and go to state 187


state 144

    (11) varpp -> COMMA ID . variable_seen varppp varpp
    (9) variable_seen -> .

    L_SQUARE_BRACKET reduce using rule 9 (variable_seen -> .)
    COMMA           reduce using rule 9 (variable_seen -> .)
    SEMICOLON       reduce using rule 9 (variable_seen -> .)

    variable_seen                  shift and go to state 188

state 145

    (18) dimDeclare -> L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET .

    L_SQUARE_BRACKET reduce using rule 18 (dimDeclare -> L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET .)
    COMMA           reduce using rule 18 (dimDeclare -> L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET .)
    SEMICOLON       reduce using rule 18 (dimDeclare -> L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET .)


state 146

    (7) varp -> tipo tipo_seen COLON ID error varppp varpp delete_type . SEMICOLON varpppp

    SEMICOLON       shift and go to state 189


state 147

    (46) asignacion -> ID operand_seen dimId ASSIGN operation_seen . expresion apply_operation_assign SEMICOLON
    (53) expresion -> . relacional apply_operation_expresion expresionp
    (54) expresion -> . NOT relacional expresionp
    (59) relacional -> . aritmetica apply_operation_relational relacionalp
    (68) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (73) factor -> . matriz apply_operation_factor factorp
    (79) matriz -> . cte matrizp
    (84) cte -> . CTE_INT
    (85) cte -> . CTE_FLOAT
    (86) cte -> . CTE_CHAR
    (87) cte -> . llamadaFuncion
    (88) cte -> . ID operand_seen dimId
    (89) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (90) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    NOT             shift and go to state 83
    CTE_INT         shift and go to state 88
    CTE_FLOAT       shift and go to state 89
    CTE_CHAR        shift and go to state 90
    ID              shift and go to state 79
    L_PARENTHESIS   shift and go to state 80

    expresion                      shift and go to state 190
    relacional                     shift and go to state 82
    aritmetica                     shift and go to state 84
    factor                         shift and go to state 85
    matriz                         shift and go to state 86
    cte                            shift and go to state 87
    llamadaFuncion                 shift and go to state 91

state 148

    (52) dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .

    L_SQUARE_BRACKET reduce using rule 52 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    ASSIGN          reduce using rule 52 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    COMMA           reduce using rule 52 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    R_PARENTHESIS   reduce using rule 52 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    DETERMINANT     reduce using rule 52 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    TRANSPOSED      reduce using rule 52 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    INVERSE         reduce using rule 52 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    MULTIPLY        reduce using rule 52 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    DIVIDE          reduce using rule 52 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    SUM             reduce using rule 52 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    SUBTRACT        reduce using rule 52 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    EQUALS          reduce using rule 52 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    NOT_EQUAL       reduce using rule 52 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    LESS_THAN       reduce using rule 52 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    LESS_THAN_EQUAL reduce using rule 52 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    GREATER_THAN    reduce using rule 52 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    GREATER_THAN_EQUAL reduce using rule 52 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    AND             reduce using rule 52 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    OR              reduce using rule 52 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    R_SQUARE_BRACKET reduce using rule 52 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    SEMICOLON       reduce using rule 52 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    HASTA           reduce using rule 52 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    HACER           reduce using rule 52 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)


state 149

    (88) cte -> ID operand_seen dimId .

    DETERMINANT     reduce using rule 88 (cte -> ID operand_seen dimId .)
    TRANSPOSED      reduce using rule 88 (cte -> ID operand_seen dimId .)
    INVERSE         reduce using rule 88 (cte -> ID operand_seen dimId .)
    MULTIPLY        reduce using rule 88 (cte -> ID operand_seen dimId .)
    DIVIDE          reduce using rule 88 (cte -> ID operand_seen dimId .)
    SUM             reduce using rule 88 (cte -> ID operand_seen dimId .)
    SUBTRACT        reduce using rule 88 (cte -> ID operand_seen dimId .)
    EQUALS          reduce using rule 88 (cte -> ID operand_seen dimId .)
    NOT_EQUAL       reduce using rule 88 (cte -> ID operand_seen dimId .)
    LESS_THAN       reduce using rule 88 (cte -> ID operand_seen dimId .)
    LESS_THAN_EQUAL reduce using rule 88 (cte -> ID operand_seen dimId .)
    GREATER_THAN    reduce using rule 88 (cte -> ID operand_seen dimId .)
    GREATER_THAN_EQUAL reduce using rule 88 (cte -> ID operand_seen dimId .)
    AND             reduce using rule 88 (cte -> ID operand_seen dimId .)
    OR              reduce using rule 88 (cte -> ID operand_seen dimId .)
    COMMA           reduce using rule 88 (cte -> ID operand_seen dimId .)
    R_PARENTHESIS   reduce using rule 88 (cte -> ID operand_seen dimId .)
    R_SQUARE_BRACKET reduce using rule 88 (cte -> ID operand_seen dimId .)
    SEMICOLON       reduce using rule 88 (cte -> ID operand_seen dimId .)
    HASTA           reduce using rule 88 (cte -> ID operand_seen dimId .)
    HACER           reduce using rule 88 (cte -> ID operand_seen dimId .)


state 150

    (90) llamadaFuncion -> ID L_PARENTHESIS expresion . llamadaFuncionp R_PARENTHESIS
    (91) llamadaFuncionp -> . COMMA expresion
    (92) llamadaFuncionp -> . empty
    (116) empty -> .

    COMMA           shift and go to state 116
    R_PARENTHESIS   reduce using rule 116 (empty -> .)

    llamadaFuncionp                shift and go to state 191
    empty                          shift and go to state 117

state 151

    (89) cte -> L_PARENTHESIS operation_seen expresion . R_PARENTHESIS operation_seen

    R_PARENTHESIS   shift and go to state 192


state 152

    (93) funcionVacia -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 193


state 153

    (91) llamadaFuncionp -> COMMA expresion .

    R_PARENTHESIS   reduce using rule 91 (llamadaFuncionp -> COMMA expresion .)


state 154

    (53) expresion -> relacional apply_operation_expresion expresionp .

    COMMA           reduce using rule 53 (expresion -> relacional apply_operation_expresion expresionp .)
    R_PARENTHESIS   reduce using rule 53 (expresion -> relacional apply_operation_expresion expresionp .)
    R_SQUARE_BRACKET reduce using rule 53 (expresion -> relacional apply_operation_expresion expresionp .)
    SEMICOLON       reduce using rule 53 (expresion -> relacional apply_operation_expresion expresionp .)
    HASTA           reduce using rule 53 (expresion -> relacional apply_operation_expresion expresionp .)
    HACER           reduce using rule 53 (expresion -> relacional apply_operation_expresion expresionp .)


state 155

    (55) expresionp -> AND . operation_seen expresion
    (78) operation_seen -> .

    NOT             reduce using rule 78 (operation_seen -> .)
    CTE_INT         reduce using rule 78 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 78 (operation_seen -> .)
    CTE_CHAR        reduce using rule 78 (operation_seen -> .)
    ID              reduce using rule 78 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 78 (operation_seen -> .)

    operation_seen                 shift and go to state 194

state 156

    (56) expresionp -> OR . operation_seen expresion
    (78) operation_seen -> .

    NOT             reduce using rule 78 (operation_seen -> .)
    CTE_INT         reduce using rule 78 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 78 (operation_seen -> .)
    CTE_CHAR        reduce using rule 78 (operation_seen -> .)
    ID              reduce using rule 78 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 78 (operation_seen -> .)

    operation_seen                 shift and go to state 195

state 157

    (57) expresionp -> empty .

    COMMA           reduce using rule 57 (expresionp -> empty .)
    R_PARENTHESIS   reduce using rule 57 (expresionp -> empty .)
    R_SQUARE_BRACKET reduce using rule 57 (expresionp -> empty .)
    SEMICOLON       reduce using rule 57 (expresionp -> empty .)
    HASTA           reduce using rule 57 (expresionp -> empty .)
    HACER           reduce using rule 57 (expresionp -> empty .)


state 158

    (54) expresion -> NOT relacional expresionp .

    COMMA           reduce using rule 54 (expresion -> NOT relacional expresionp .)
    R_PARENTHESIS   reduce using rule 54 (expresion -> NOT relacional expresionp .)
    R_SQUARE_BRACKET reduce using rule 54 (expresion -> NOT relacional expresionp .)
    SEMICOLON       reduce using rule 54 (expresion -> NOT relacional expresionp .)
    HASTA           reduce using rule 54 (expresion -> NOT relacional expresionp .)
    HACER           reduce using rule 54 (expresion -> NOT relacional expresionp .)


state 159

    (59) relacional -> aritmetica apply_operation_relational relacionalp .

    AND             reduce using rule 59 (relacional -> aritmetica apply_operation_relational relacionalp .)
    OR              reduce using rule 59 (relacional -> aritmetica apply_operation_relational relacionalp .)
    COMMA           reduce using rule 59 (relacional -> aritmetica apply_operation_relational relacionalp .)
    R_PARENTHESIS   reduce using rule 59 (relacional -> aritmetica apply_operation_relational relacionalp .)
    R_SQUARE_BRACKET reduce using rule 59 (relacional -> aritmetica apply_operation_relational relacionalp .)
    SEMICOLON       reduce using rule 59 (relacional -> aritmetica apply_operation_relational relacionalp .)
    HASTA           reduce using rule 59 (relacional -> aritmetica apply_operation_relational relacionalp .)
    HACER           reduce using rule 59 (relacional -> aritmetica apply_operation_relational relacionalp .)


state 160

    (60) relacionalp -> EQUALS . operation_seen relacional
    (78) operation_seen -> .

    CTE_INT         reduce using rule 78 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 78 (operation_seen -> .)
    CTE_CHAR        reduce using rule 78 (operation_seen -> .)
    ID              reduce using rule 78 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 78 (operation_seen -> .)

    operation_seen                 shift and go to state 196

state 161

    (61) relacionalp -> NOT_EQUAL . operation_seen relacional
    (78) operation_seen -> .

    CTE_INT         reduce using rule 78 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 78 (operation_seen -> .)
    CTE_CHAR        reduce using rule 78 (operation_seen -> .)
    ID              reduce using rule 78 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 78 (operation_seen -> .)

    operation_seen                 shift and go to state 197

state 162

    (62) relacionalp -> LESS_THAN . operation_seen relacional
    (78) operation_seen -> .

    CTE_INT         reduce using rule 78 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 78 (operation_seen -> .)
    CTE_CHAR        reduce using rule 78 (operation_seen -> .)
    ID              reduce using rule 78 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 78 (operation_seen -> .)

    operation_seen                 shift and go to state 198

state 163

    (63) relacionalp -> LESS_THAN_EQUAL . operation_seen relacional
    (78) operation_seen -> .

    CTE_INT         reduce using rule 78 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 78 (operation_seen -> .)
    CTE_CHAR        reduce using rule 78 (operation_seen -> .)
    ID              reduce using rule 78 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 78 (operation_seen -> .)

    operation_seen                 shift and go to state 199

state 164

    (64) relacionalp -> GREATER_THAN . operation_seen relacional
    (78) operation_seen -> .

    CTE_INT         reduce using rule 78 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 78 (operation_seen -> .)
    CTE_CHAR        reduce using rule 78 (operation_seen -> .)
    ID              reduce using rule 78 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 78 (operation_seen -> .)

    operation_seen                 shift and go to state 200

state 165

    (65) relacionalp -> GREATER_THAN_EQUAL . operation_seen relacional
    (78) operation_seen -> .

    CTE_INT         reduce using rule 78 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 78 (operation_seen -> .)
    CTE_CHAR        reduce using rule 78 (operation_seen -> .)
    ID              reduce using rule 78 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 78 (operation_seen -> .)

    operation_seen                 shift and go to state 201

state 166

    (66) relacionalp -> empty .

    AND             reduce using rule 66 (relacionalp -> empty .)
    OR              reduce using rule 66 (relacionalp -> empty .)
    COMMA           reduce using rule 66 (relacionalp -> empty .)
    R_PARENTHESIS   reduce using rule 66 (relacionalp -> empty .)
    R_SQUARE_BRACKET reduce using rule 66 (relacionalp -> empty .)
    SEMICOLON       reduce using rule 66 (relacionalp -> empty .)
    HASTA           reduce using rule 66 (relacionalp -> empty .)
    HACER           reduce using rule 66 (relacionalp -> empty .)


state 167

    (68) aritmetica -> factor apply_operation_aritmetica aritmeticap .

    EQUALS          reduce using rule 68 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    NOT_EQUAL       reduce using rule 68 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    LESS_THAN       reduce using rule 68 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    LESS_THAN_EQUAL reduce using rule 68 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    GREATER_THAN    reduce using rule 68 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    GREATER_THAN_EQUAL reduce using rule 68 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    AND             reduce using rule 68 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    OR              reduce using rule 68 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    COMMA           reduce using rule 68 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    R_PARENTHESIS   reduce using rule 68 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    R_SQUARE_BRACKET reduce using rule 68 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    SEMICOLON       reduce using rule 68 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    HASTA           reduce using rule 68 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    HACER           reduce using rule 68 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)


state 168

    (69) aritmeticap -> SUM . operation_seen aritmetica
    (78) operation_seen -> .

    CTE_INT         reduce using rule 78 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 78 (operation_seen -> .)
    CTE_CHAR        reduce using rule 78 (operation_seen -> .)
    ID              reduce using rule 78 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 78 (operation_seen -> .)

    operation_seen                 shift and go to state 202

state 169

    (70) aritmeticap -> SUBTRACT . operation_seen aritmetica
    (78) operation_seen -> .

    CTE_INT         reduce using rule 78 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 78 (operation_seen -> .)
    CTE_CHAR        reduce using rule 78 (operation_seen -> .)
    ID              reduce using rule 78 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 78 (operation_seen -> .)

    operation_seen                 shift and go to state 203

state 170

    (71) aritmeticap -> empty .

    EQUALS          reduce using rule 71 (aritmeticap -> empty .)
    NOT_EQUAL       reduce using rule 71 (aritmeticap -> empty .)
    LESS_THAN       reduce using rule 71 (aritmeticap -> empty .)
    LESS_THAN_EQUAL reduce using rule 71 (aritmeticap -> empty .)
    GREATER_THAN    reduce using rule 71 (aritmeticap -> empty .)
    GREATER_THAN_EQUAL reduce using rule 71 (aritmeticap -> empty .)
    AND             reduce using rule 71 (aritmeticap -> empty .)
    OR              reduce using rule 71 (aritmeticap -> empty .)
    COMMA           reduce using rule 71 (aritmeticap -> empty .)
    R_PARENTHESIS   reduce using rule 71 (aritmeticap -> empty .)
    R_SQUARE_BRACKET reduce using rule 71 (aritmeticap -> empty .)
    SEMICOLON       reduce using rule 71 (aritmeticap -> empty .)
    HASTA           reduce using rule 71 (aritmeticap -> empty .)
    HACER           reduce using rule 71 (aritmeticap -> empty .)


state 171

    (73) factor -> matriz apply_operation_factor factorp .

    SUM             reduce using rule 73 (factor -> matriz apply_operation_factor factorp .)
    SUBTRACT        reduce using rule 73 (factor -> matriz apply_operation_factor factorp .)
    EQUALS          reduce using rule 73 (factor -> matriz apply_operation_factor factorp .)
    NOT_EQUAL       reduce using rule 73 (factor -> matriz apply_operation_factor factorp .)
    LESS_THAN       reduce using rule 73 (factor -> matriz apply_operation_factor factorp .)
    LESS_THAN_EQUAL reduce using rule 73 (factor -> matriz apply_operation_factor factorp .)
    GREATER_THAN    reduce using rule 73 (factor -> matriz apply_operation_factor factorp .)
    GREATER_THAN_EQUAL reduce using rule 73 (factor -> matriz apply_operation_factor factorp .)
    AND             reduce using rule 73 (factor -> matriz apply_operation_factor factorp .)
    OR              reduce using rule 73 (factor -> matriz apply_operation_factor factorp .)
    COMMA           reduce using rule 73 (factor -> matriz apply_operation_factor factorp .)
    R_PARENTHESIS   reduce using rule 73 (factor -> matriz apply_operation_factor factorp .)
    R_SQUARE_BRACKET reduce using rule 73 (factor -> matriz apply_operation_factor factorp .)
    SEMICOLON       reduce using rule 73 (factor -> matriz apply_operation_factor factorp .)
    HASTA           reduce using rule 73 (factor -> matriz apply_operation_factor factorp .)
    HACER           reduce using rule 73 (factor -> matriz apply_operation_factor factorp .)


state 172

    (74) factorp -> MULTIPLY . operation_seen factor
    (78) operation_seen -> .

    CTE_INT         reduce using rule 78 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 78 (operation_seen -> .)
    CTE_CHAR        reduce using rule 78 (operation_seen -> .)
    ID              reduce using rule 78 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 78 (operation_seen -> .)

    operation_seen                 shift and go to state 204

state 173

    (75) factorp -> DIVIDE . operation_seen factor
    (78) operation_seen -> .

    CTE_INT         reduce using rule 78 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 78 (operation_seen -> .)
    CTE_CHAR        reduce using rule 78 (operation_seen -> .)
    ID              reduce using rule 78 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 78 (operation_seen -> .)

    operation_seen                 shift and go to state 205

state 174

    (76) factorp -> empty .

    SUM             reduce using rule 76 (factorp -> empty .)
    SUBTRACT        reduce using rule 76 (factorp -> empty .)
    EQUALS          reduce using rule 76 (factorp -> empty .)
    NOT_EQUAL       reduce using rule 76 (factorp -> empty .)
    LESS_THAN       reduce using rule 76 (factorp -> empty .)
    LESS_THAN_EQUAL reduce using rule 76 (factorp -> empty .)
    GREATER_THAN    reduce using rule 76 (factorp -> empty .)
    GREATER_THAN_EQUAL reduce using rule 76 (factorp -> empty .)
    AND             reduce using rule 76 (factorp -> empty .)
    OR              reduce using rule 76 (factorp -> empty .)
    COMMA           reduce using rule 76 (factorp -> empty .)
    R_PARENTHESIS   reduce using rule 76 (factorp -> empty .)
    R_SQUARE_BRACKET reduce using rule 76 (factorp -> empty .)
    SEMICOLON       reduce using rule 76 (factorp -> empty .)
    HASTA           reduce using rule 76 (factorp -> empty .)
    HACER           reduce using rule 76 (factorp -> empty .)


state 175

    (94) regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .

    ID              reduce using rule 94 (regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .)
    REGRESA         reduce using rule 94 (regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .)
    LECTURA         reduce using rule 94 (regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .)
    ESCRIBE         reduce using rule 94 (regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .)
    SI              reduce using rule 94 (regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .)
    MIENTRAS        reduce using rule 94 (regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .)
    DESDE           reduce using rule 94 (regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .)
    R_CURLY_BRACKET reduce using rule 94 (regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .)


state 176

    (95) lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .

    ID              reduce using rule 95 (lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .)
    REGRESA         reduce using rule 95 (lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .)
    LECTURA         reduce using rule 95 (lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .)
    ESCRIBE         reduce using rule 95 (lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .)
    SI              reduce using rule 95 (lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .)
    MIENTRAS        reduce using rule 95 (lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .)
    DESDE           reduce using rule 95 (lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .)
    R_CURLY_BRACKET reduce using rule 95 (lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .)


state 177

    (96) lecturap -> ID dimId lecturapp .

    R_PARENTHESIS   reduce using rule 96 (lecturap -> ID dimId lecturapp .)


state 178

    (97) lecturapp -> COMMA . lecturap
    (96) lecturap -> . ID dimId lecturapp

    ID              shift and go to state 94

    lecturap                       shift and go to state 206

state 179

    (98) lecturapp -> empty .

    R_PARENTHESIS   reduce using rule 98 (lecturapp -> empty .)


state 180

    (99) escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .

    ID              reduce using rule 99 (escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .)
    REGRESA         reduce using rule 99 (escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .)
    LECTURA         reduce using rule 99 (escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .)
    ESCRIBE         reduce using rule 99 (escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .)
    SI              reduce using rule 99 (escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .)
    MIENTRAS        reduce using rule 99 (escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .)
    DESDE           reduce using rule 99 (escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .)
    R_CURLY_BRACKET reduce using rule 99 (escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .)


state 181

    (102) escriturapp -> COMMA escriturap .

    R_PARENTHESIS   reduce using rule 102 (escriturapp -> COMMA escriturap .)


state 182

    (104) decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false . HAZ bloque decisionp

    HAZ             shift and go to state 207


state 183

    (110) cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS . jump_false HAZ bloque update_jump_cycle
    (105) jump_false -> .

    HAZ             reduce using rule 105 (jump_false -> .)

    jump_false                     shift and go to state 208

state 184

    (113) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN . operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle
    (78) operation_seen -> .

    NOT             reduce using rule 78 (operation_seen -> .)
    CTE_INT         reduce using rule 78 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 78 (operation_seen -> .)
    CTE_CHAR        reduce using rule 78 (operation_seen -> .)
    ID              reduce using rule 78 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 78 (operation_seen -> .)

    operation_seen                 shift and go to state 209

state 185

    (25) funcionp -> tipoRetorno ID create_func_scope L_PARENTHESIS parametro R_PARENTHESIS var bloque funcion .

    PRINCIPAL       reduce using rule 25 (funcionp -> tipoRetorno ID create_func_scope L_PARENTHESIS parametro R_PARENTHESIS var bloque funcion .)


state 186

    (31) parametrop -> COMMA tipo . ID save_param parametrop

    ID              shift and go to state 210


state 187

    (6) varp -> tipo tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON . varpppp
    (16) varpppp -> . varp
    (17) varpppp -> . empty
    (6) varp -> . tipo tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp
    (7) varp -> . tipo tipo_seen COLON ID error varppp varpp delete_type SEMICOLON varpppp
    (116) empty -> .
    (19) tipo -> . INT
    (20) tipo -> . FLOAT
    (21) tipo -> . CHAR

    FUNCION         reduce using rule 116 (empty -> .)
    PRINCIPAL       reduce using rule 116 (empty -> .)
    L_CURLY_BRACKET reduce using rule 116 (empty -> .)
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21

    tipo                           shift and go to state 23
    varpppp                        shift and go to state 211
    varp                           shift and go to state 212
    empty                          shift and go to state 213

state 188

    (11) varpp -> COMMA ID variable_seen . varppp varpp
    (13) varppp -> . dimDeclare
    (14) varppp -> . dimDeclare dimDeclare
    (15) varppp -> . empty
    (18) dimDeclare -> . L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET
    (116) empty -> .

    L_SQUARE_BRACKET shift and go to state 73
    COMMA           reduce using rule 116 (empty -> .)
    SEMICOLON       reduce using rule 116 (empty -> .)

    varppp                         shift and go to state 214
    dimDeclare                     shift and go to state 71
    empty                          shift and go to state 72

state 189

    (7) varp -> tipo tipo_seen COLON ID error varppp varpp delete_type SEMICOLON . varpppp
    (16) varpppp -> . varp
    (17) varpppp -> . empty
    (6) varp -> . tipo tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp
    (7) varp -> . tipo tipo_seen COLON ID error varppp varpp delete_type SEMICOLON varpppp
    (116) empty -> .
    (19) tipo -> . INT
    (20) tipo -> . FLOAT
    (21) tipo -> . CHAR

    FUNCION         reduce using rule 116 (empty -> .)
    PRINCIPAL       reduce using rule 116 (empty -> .)
    L_CURLY_BRACKET reduce using rule 116 (empty -> .)
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21

    tipo                           shift and go to state 23
    varpppp                        shift and go to state 215
    varp                           shift and go to state 212
    empty                          shift and go to state 213

state 190

    (46) asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion . apply_operation_assign SEMICOLON
    (48) apply_operation_assign -> .

    SEMICOLON       reduce using rule 48 (apply_operation_assign -> .)

    apply_operation_assign         shift and go to state 216

state 191

    (90) llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp . R_PARENTHESIS

    R_PARENTHESIS   shift and go to state 217


state 192

    (89) cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS . operation_seen
    (78) operation_seen -> .

    DETERMINANT     reduce using rule 78 (operation_seen -> .)
    TRANSPOSED      reduce using rule 78 (operation_seen -> .)
    INVERSE         reduce using rule 78 (operation_seen -> .)
    MULTIPLY        reduce using rule 78 (operation_seen -> .)
    DIVIDE          reduce using rule 78 (operation_seen -> .)
    SUM             reduce using rule 78 (operation_seen -> .)
    SUBTRACT        reduce using rule 78 (operation_seen -> .)
    EQUALS          reduce using rule 78 (operation_seen -> .)
    NOT_EQUAL       reduce using rule 78 (operation_seen -> .)
    LESS_THAN       reduce using rule 78 (operation_seen -> .)
    LESS_THAN_EQUAL reduce using rule 78 (operation_seen -> .)
    GREATER_THAN    reduce using rule 78 (operation_seen -> .)
    GREATER_THAN_EQUAL reduce using rule 78 (operation_seen -> .)
    AND             reduce using rule 78 (operation_seen -> .)
    OR              reduce using rule 78 (operation_seen -> .)
    COMMA           reduce using rule 78 (operation_seen -> .)
    R_PARENTHESIS   reduce using rule 78 (operation_seen -> .)
    R_SQUARE_BRACKET reduce using rule 78 (operation_seen -> .)
    SEMICOLON       reduce using rule 78 (operation_seen -> .)
    HASTA           reduce using rule 78 (operation_seen -> .)
    HACER           reduce using rule 78 (operation_seen -> .)

    operation_seen                 shift and go to state 218

state 193

    (93) funcionVacia -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS SEMICOLON .

    ID              reduce using rule 93 (funcionVacia -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS SEMICOLON .)
    REGRESA         reduce using rule 93 (funcionVacia -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS SEMICOLON .)
    LECTURA         reduce using rule 93 (funcionVacia -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS SEMICOLON .)
    ESCRIBE         reduce using rule 93 (funcionVacia -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS SEMICOLON .)
    SI              reduce using rule 93 (funcionVacia -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS SEMICOLON .)
    MIENTRAS        reduce using rule 93 (funcionVacia -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS SEMICOLON .)
    DESDE           reduce using rule 93 (funcionVacia -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS SEMICOLON .)
    R_CURLY_BRACKET reduce using rule 93 (funcionVacia -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS SEMICOLON .)


state 194

    (55) expresionp -> AND operation_seen . expresion
    (53) expresion -> . relacional apply_operation_expresion expresionp
    (54) expresion -> . NOT relacional expresionp
    (59) relacional -> . aritmetica apply_operation_relational relacionalp
    (68) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (73) factor -> . matriz apply_operation_factor factorp
    (79) matriz -> . cte matrizp
    (84) cte -> . CTE_INT
    (85) cte -> . CTE_FLOAT
    (86) cte -> . CTE_CHAR
    (87) cte -> . llamadaFuncion
    (88) cte -> . ID operand_seen dimId
    (89) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (90) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    NOT             shift and go to state 83
    CTE_INT         shift and go to state 88
    CTE_FLOAT       shift and go to state 89
    CTE_CHAR        shift and go to state 90
    ID              shift and go to state 79
    L_PARENTHESIS   shift and go to state 80

    expresion                      shift and go to state 219
    relacional                     shift and go to state 82
    aritmetica                     shift and go to state 84
    factor                         shift and go to state 85
    matriz                         shift and go to state 86
    cte                            shift and go to state 87
    llamadaFuncion                 shift and go to state 91

state 195

    (56) expresionp -> OR operation_seen . expresion
    (53) expresion -> . relacional apply_operation_expresion expresionp
    (54) expresion -> . NOT relacional expresionp
    (59) relacional -> . aritmetica apply_operation_relational relacionalp
    (68) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (73) factor -> . matriz apply_operation_factor factorp
    (79) matriz -> . cte matrizp
    (84) cte -> . CTE_INT
    (85) cte -> . CTE_FLOAT
    (86) cte -> . CTE_CHAR
    (87) cte -> . llamadaFuncion
    (88) cte -> . ID operand_seen dimId
    (89) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (90) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    NOT             shift and go to state 83
    CTE_INT         shift and go to state 88
    CTE_FLOAT       shift and go to state 89
    CTE_CHAR        shift and go to state 90
    ID              shift and go to state 79
    L_PARENTHESIS   shift and go to state 80

    expresion                      shift and go to state 220
    relacional                     shift and go to state 82
    aritmetica                     shift and go to state 84
    factor                         shift and go to state 85
    matriz                         shift and go to state 86
    cte                            shift and go to state 87
    llamadaFuncion                 shift and go to state 91

state 196

    (60) relacionalp -> EQUALS operation_seen . relacional
    (59) relacional -> . aritmetica apply_operation_relational relacionalp
    (68) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (73) factor -> . matriz apply_operation_factor factorp
    (79) matriz -> . cte matrizp
    (84) cte -> . CTE_INT
    (85) cte -> . CTE_FLOAT
    (86) cte -> . CTE_CHAR
    (87) cte -> . llamadaFuncion
    (88) cte -> . ID operand_seen dimId
    (89) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (90) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    CTE_INT         shift and go to state 88
    CTE_FLOAT       shift and go to state 89
    CTE_CHAR        shift and go to state 90
    ID              shift and go to state 79
    L_PARENTHESIS   shift and go to state 80

    relacional                     shift and go to state 221
    aritmetica                     shift and go to state 84
    factor                         shift and go to state 85
    matriz                         shift and go to state 86
    cte                            shift and go to state 87
    llamadaFuncion                 shift and go to state 91

state 197

    (61) relacionalp -> NOT_EQUAL operation_seen . relacional
    (59) relacional -> . aritmetica apply_operation_relational relacionalp
    (68) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (73) factor -> . matriz apply_operation_factor factorp
    (79) matriz -> . cte matrizp
    (84) cte -> . CTE_INT
    (85) cte -> . CTE_FLOAT
    (86) cte -> . CTE_CHAR
    (87) cte -> . llamadaFuncion
    (88) cte -> . ID operand_seen dimId
    (89) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (90) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    CTE_INT         shift and go to state 88
    CTE_FLOAT       shift and go to state 89
    CTE_CHAR        shift and go to state 90
    ID              shift and go to state 79
    L_PARENTHESIS   shift and go to state 80

    relacional                     shift and go to state 222
    aritmetica                     shift and go to state 84
    factor                         shift and go to state 85
    matriz                         shift and go to state 86
    cte                            shift and go to state 87
    llamadaFuncion                 shift and go to state 91

state 198

    (62) relacionalp -> LESS_THAN operation_seen . relacional
    (59) relacional -> . aritmetica apply_operation_relational relacionalp
    (68) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (73) factor -> . matriz apply_operation_factor factorp
    (79) matriz -> . cte matrizp
    (84) cte -> . CTE_INT
    (85) cte -> . CTE_FLOAT
    (86) cte -> . CTE_CHAR
    (87) cte -> . llamadaFuncion
    (88) cte -> . ID operand_seen dimId
    (89) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (90) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    CTE_INT         shift and go to state 88
    CTE_FLOAT       shift and go to state 89
    CTE_CHAR        shift and go to state 90
    ID              shift and go to state 79
    L_PARENTHESIS   shift and go to state 80

    relacional                     shift and go to state 223
    aritmetica                     shift and go to state 84
    factor                         shift and go to state 85
    matriz                         shift and go to state 86
    cte                            shift and go to state 87
    llamadaFuncion                 shift and go to state 91

state 199

    (63) relacionalp -> LESS_THAN_EQUAL operation_seen . relacional
    (59) relacional -> . aritmetica apply_operation_relational relacionalp
    (68) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (73) factor -> . matriz apply_operation_factor factorp
    (79) matriz -> . cte matrizp
    (84) cte -> . CTE_INT
    (85) cte -> . CTE_FLOAT
    (86) cte -> . CTE_CHAR
    (87) cte -> . llamadaFuncion
    (88) cte -> . ID operand_seen dimId
    (89) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (90) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    CTE_INT         shift and go to state 88
    CTE_FLOAT       shift and go to state 89
    CTE_CHAR        shift and go to state 90
    ID              shift and go to state 79
    L_PARENTHESIS   shift and go to state 80

    relacional                     shift and go to state 224
    aritmetica                     shift and go to state 84
    factor                         shift and go to state 85
    matriz                         shift and go to state 86
    cte                            shift and go to state 87
    llamadaFuncion                 shift and go to state 91

state 200

    (64) relacionalp -> GREATER_THAN operation_seen . relacional
    (59) relacional -> . aritmetica apply_operation_relational relacionalp
    (68) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (73) factor -> . matriz apply_operation_factor factorp
    (79) matriz -> . cte matrizp
    (84) cte -> . CTE_INT
    (85) cte -> . CTE_FLOAT
    (86) cte -> . CTE_CHAR
    (87) cte -> . llamadaFuncion
    (88) cte -> . ID operand_seen dimId
    (89) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (90) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    CTE_INT         shift and go to state 88
    CTE_FLOAT       shift and go to state 89
    CTE_CHAR        shift and go to state 90
    ID              shift and go to state 79
    L_PARENTHESIS   shift and go to state 80

    relacional                     shift and go to state 225
    aritmetica                     shift and go to state 84
    factor                         shift and go to state 85
    matriz                         shift and go to state 86
    cte                            shift and go to state 87
    llamadaFuncion                 shift and go to state 91

state 201

    (65) relacionalp -> GREATER_THAN_EQUAL operation_seen . relacional
    (59) relacional -> . aritmetica apply_operation_relational relacionalp
    (68) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (73) factor -> . matriz apply_operation_factor factorp
    (79) matriz -> . cte matrizp
    (84) cte -> . CTE_INT
    (85) cte -> . CTE_FLOAT
    (86) cte -> . CTE_CHAR
    (87) cte -> . llamadaFuncion
    (88) cte -> . ID operand_seen dimId
    (89) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (90) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    CTE_INT         shift and go to state 88
    CTE_FLOAT       shift and go to state 89
    CTE_CHAR        shift and go to state 90
    ID              shift and go to state 79
    L_PARENTHESIS   shift and go to state 80

    relacional                     shift and go to state 226
    aritmetica                     shift and go to state 84
    factor                         shift and go to state 85
    matriz                         shift and go to state 86
    cte                            shift and go to state 87
    llamadaFuncion                 shift and go to state 91

state 202

    (69) aritmeticap -> SUM operation_seen . aritmetica
    (68) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (73) factor -> . matriz apply_operation_factor factorp
    (79) matriz -> . cte matrizp
    (84) cte -> . CTE_INT
    (85) cte -> . CTE_FLOAT
    (86) cte -> . CTE_CHAR
    (87) cte -> . llamadaFuncion
    (88) cte -> . ID operand_seen dimId
    (89) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (90) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    CTE_INT         shift and go to state 88
    CTE_FLOAT       shift and go to state 89
    CTE_CHAR        shift and go to state 90
    ID              shift and go to state 79
    L_PARENTHESIS   shift and go to state 80

    aritmetica                     shift and go to state 227
    factor                         shift and go to state 85
    matriz                         shift and go to state 86
    cte                            shift and go to state 87
    llamadaFuncion                 shift and go to state 91

state 203

    (70) aritmeticap -> SUBTRACT operation_seen . aritmetica
    (68) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (73) factor -> . matriz apply_operation_factor factorp
    (79) matriz -> . cte matrizp
    (84) cte -> . CTE_INT
    (85) cte -> . CTE_FLOAT
    (86) cte -> . CTE_CHAR
    (87) cte -> . llamadaFuncion
    (88) cte -> . ID operand_seen dimId
    (89) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (90) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    CTE_INT         shift and go to state 88
    CTE_FLOAT       shift and go to state 89
    CTE_CHAR        shift and go to state 90
    ID              shift and go to state 79
    L_PARENTHESIS   shift and go to state 80

    aritmetica                     shift and go to state 228
    factor                         shift and go to state 85
    matriz                         shift and go to state 86
    cte                            shift and go to state 87
    llamadaFuncion                 shift and go to state 91

state 204

    (74) factorp -> MULTIPLY operation_seen . factor
    (73) factor -> . matriz apply_operation_factor factorp
    (79) matriz -> . cte matrizp
    (84) cte -> . CTE_INT
    (85) cte -> . CTE_FLOAT
    (86) cte -> . CTE_CHAR
    (87) cte -> . llamadaFuncion
    (88) cte -> . ID operand_seen dimId
    (89) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (90) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    CTE_INT         shift and go to state 88
    CTE_FLOAT       shift and go to state 89
    CTE_CHAR        shift and go to state 90
    ID              shift and go to state 79
    L_PARENTHESIS   shift and go to state 80

    factor                         shift and go to state 229
    matriz                         shift and go to state 86
    cte                            shift and go to state 87
    llamadaFuncion                 shift and go to state 91

state 205

    (75) factorp -> DIVIDE operation_seen . factor
    (73) factor -> . matriz apply_operation_factor factorp
    (79) matriz -> . cte matrizp
    (84) cte -> . CTE_INT
    (85) cte -> . CTE_FLOAT
    (86) cte -> . CTE_CHAR
    (87) cte -> . llamadaFuncion
    (88) cte -> . ID operand_seen dimId
    (89) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (90) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    CTE_INT         shift and go to state 88
    CTE_FLOAT       shift and go to state 89
    CTE_CHAR        shift and go to state 90
    ID              shift and go to state 79
    L_PARENTHESIS   shift and go to state 80

    factor                         shift and go to state 230
    matriz                         shift and go to state 86
    cte                            shift and go to state 87
    llamadaFuncion                 shift and go to state 91

state 206

    (97) lecturapp -> COMMA lecturap .

    R_PARENTHESIS   reduce using rule 97 (lecturapp -> COMMA lecturap .)


state 207

    (104) decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ . bloque decisionp
    (35) bloque -> . L_CURLY_BRACKET bloquep R_CURLY_BRACKET

    L_CURLY_BRACKET shift and go to state 31

    bloque                         shift and go to state 231

state 208

    (110) cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false . HAZ bloque update_jump_cycle

    HAZ             shift and go to state 232


state 209

    (113) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen . expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle
    (53) expresion -> . relacional apply_operation_expresion expresionp
    (54) expresion -> . NOT relacional expresionp
    (59) relacional -> . aritmetica apply_operation_relational relacionalp
    (68) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (73) factor -> . matriz apply_operation_factor factorp
    (79) matriz -> . cte matrizp
    (84) cte -> . CTE_INT
    (85) cte -> . CTE_FLOAT
    (86) cte -> . CTE_CHAR
    (87) cte -> . llamadaFuncion
    (88) cte -> . ID operand_seen dimId
    (89) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (90) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    NOT             shift and go to state 83
    CTE_INT         shift and go to state 88
    CTE_FLOAT       shift and go to state 89
    CTE_CHAR        shift and go to state 90
    ID              shift and go to state 79
    L_PARENTHESIS   shift and go to state 80

    expresion                      shift and go to state 233
    relacional                     shift and go to state 82
    aritmetica                     shift and go to state 84
    factor                         shift and go to state 85
    matriz                         shift and go to state 86
    cte                            shift and go to state 87
    llamadaFuncion                 shift and go to state 91

state 210

    (31) parametrop -> COMMA tipo ID . save_param parametrop
    (30) save_param -> .

    COMMA           reduce using rule 30 (save_param -> .)
    R_PARENTHESIS   reduce using rule 30 (save_param -> .)

    save_param                     shift and go to state 234

state 211

    (6) varp -> tipo tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp .

    FUNCION         reduce using rule 6 (varp -> tipo tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp .)
    PRINCIPAL       reduce using rule 6 (varp -> tipo tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp .)
    L_CURLY_BRACKET reduce using rule 6 (varp -> tipo tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp .)


state 212

    (16) varpppp -> varp .

    FUNCION         reduce using rule 16 (varpppp -> varp .)
    PRINCIPAL       reduce using rule 16 (varpppp -> varp .)
    L_CURLY_BRACKET reduce using rule 16 (varpppp -> varp .)


state 213

    (17) varpppp -> empty .

    FUNCION         reduce using rule 17 (varpppp -> empty .)
    PRINCIPAL       reduce using rule 17 (varpppp -> empty .)
    L_CURLY_BRACKET reduce using rule 17 (varpppp -> empty .)


state 214

    (11) varpp -> COMMA ID variable_seen varppp . varpp
    (11) varpp -> . COMMA ID variable_seen varppp varpp
    (12) varpp -> . empty
    (116) empty -> .

    COMMA           shift and go to state 104
    SEMICOLON       reduce using rule 116 (empty -> .)

    varpp                          shift and go to state 235
    empty                          shift and go to state 105

state 215

    (7) varp -> tipo tipo_seen COLON ID error varppp varpp delete_type SEMICOLON varpppp .

    FUNCION         reduce using rule 7 (varp -> tipo tipo_seen COLON ID error varppp varpp delete_type SEMICOLON varpppp .)
    PRINCIPAL       reduce using rule 7 (varp -> tipo tipo_seen COLON ID error varppp varpp delete_type SEMICOLON varpppp .)
    L_CURLY_BRACKET reduce using rule 7 (varp -> tipo tipo_seen COLON ID error varppp varpp delete_type SEMICOLON varpppp .)


state 216

    (46) asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign . SEMICOLON

    SEMICOLON       shift and go to state 236


state 217

    (90) llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .

    DETERMINANT     reduce using rule 90 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    TRANSPOSED      reduce using rule 90 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    INVERSE         reduce using rule 90 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    MULTIPLY        reduce using rule 90 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    DIVIDE          reduce using rule 90 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    SUM             reduce using rule 90 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    SUBTRACT        reduce using rule 90 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    EQUALS          reduce using rule 90 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    NOT_EQUAL       reduce using rule 90 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    LESS_THAN       reduce using rule 90 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    LESS_THAN_EQUAL reduce using rule 90 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    GREATER_THAN    reduce using rule 90 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    GREATER_THAN_EQUAL reduce using rule 90 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    AND             reduce using rule 90 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    OR              reduce using rule 90 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    COMMA           reduce using rule 90 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    R_PARENTHESIS   reduce using rule 90 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    R_SQUARE_BRACKET reduce using rule 90 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    SEMICOLON       reduce using rule 90 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    HASTA           reduce using rule 90 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)
    HACER           reduce using rule 90 (llamadaFuncion -> ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS .)


state 218

    (89) cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .

    DETERMINANT     reduce using rule 89 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    TRANSPOSED      reduce using rule 89 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    INVERSE         reduce using rule 89 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    MULTIPLY        reduce using rule 89 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    DIVIDE          reduce using rule 89 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    SUM             reduce using rule 89 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    SUBTRACT        reduce using rule 89 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    EQUALS          reduce using rule 89 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    NOT_EQUAL       reduce using rule 89 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    LESS_THAN       reduce using rule 89 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    LESS_THAN_EQUAL reduce using rule 89 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    GREATER_THAN    reduce using rule 89 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    GREATER_THAN_EQUAL reduce using rule 89 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    AND             reduce using rule 89 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    OR              reduce using rule 89 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    COMMA           reduce using rule 89 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    R_PARENTHESIS   reduce using rule 89 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    R_SQUARE_BRACKET reduce using rule 89 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    SEMICOLON       reduce using rule 89 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    HASTA           reduce using rule 89 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    HACER           reduce using rule 89 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)


state 219

    (55) expresionp -> AND operation_seen expresion .

    COMMA           reduce using rule 55 (expresionp -> AND operation_seen expresion .)
    R_PARENTHESIS   reduce using rule 55 (expresionp -> AND operation_seen expresion .)
    R_SQUARE_BRACKET reduce using rule 55 (expresionp -> AND operation_seen expresion .)
    SEMICOLON       reduce using rule 55 (expresionp -> AND operation_seen expresion .)
    HASTA           reduce using rule 55 (expresionp -> AND operation_seen expresion .)
    HACER           reduce using rule 55 (expresionp -> AND operation_seen expresion .)


state 220

    (56) expresionp -> OR operation_seen expresion .

    COMMA           reduce using rule 56 (expresionp -> OR operation_seen expresion .)
    R_PARENTHESIS   reduce using rule 56 (expresionp -> OR operation_seen expresion .)
    R_SQUARE_BRACKET reduce using rule 56 (expresionp -> OR operation_seen expresion .)
    SEMICOLON       reduce using rule 56 (expresionp -> OR operation_seen expresion .)
    HASTA           reduce using rule 56 (expresionp -> OR operation_seen expresion .)
    HACER           reduce using rule 56 (expresionp -> OR operation_seen expresion .)


state 221

    (60) relacionalp -> EQUALS operation_seen relacional .

    AND             reduce using rule 60 (relacionalp -> EQUALS operation_seen relacional .)
    OR              reduce using rule 60 (relacionalp -> EQUALS operation_seen relacional .)
    COMMA           reduce using rule 60 (relacionalp -> EQUALS operation_seen relacional .)
    R_PARENTHESIS   reduce using rule 60 (relacionalp -> EQUALS operation_seen relacional .)
    R_SQUARE_BRACKET reduce using rule 60 (relacionalp -> EQUALS operation_seen relacional .)
    SEMICOLON       reduce using rule 60 (relacionalp -> EQUALS operation_seen relacional .)
    HASTA           reduce using rule 60 (relacionalp -> EQUALS operation_seen relacional .)
    HACER           reduce using rule 60 (relacionalp -> EQUALS operation_seen relacional .)


state 222

    (61) relacionalp -> NOT_EQUAL operation_seen relacional .

    AND             reduce using rule 61 (relacionalp -> NOT_EQUAL operation_seen relacional .)
    OR              reduce using rule 61 (relacionalp -> NOT_EQUAL operation_seen relacional .)
    COMMA           reduce using rule 61 (relacionalp -> NOT_EQUAL operation_seen relacional .)
    R_PARENTHESIS   reduce using rule 61 (relacionalp -> NOT_EQUAL operation_seen relacional .)
    R_SQUARE_BRACKET reduce using rule 61 (relacionalp -> NOT_EQUAL operation_seen relacional .)
    SEMICOLON       reduce using rule 61 (relacionalp -> NOT_EQUAL operation_seen relacional .)
    HASTA           reduce using rule 61 (relacionalp -> NOT_EQUAL operation_seen relacional .)
    HACER           reduce using rule 61 (relacionalp -> NOT_EQUAL operation_seen relacional .)


state 223

    (62) relacionalp -> LESS_THAN operation_seen relacional .

    AND             reduce using rule 62 (relacionalp -> LESS_THAN operation_seen relacional .)
    OR              reduce using rule 62 (relacionalp -> LESS_THAN operation_seen relacional .)
    COMMA           reduce using rule 62 (relacionalp -> LESS_THAN operation_seen relacional .)
    R_PARENTHESIS   reduce using rule 62 (relacionalp -> LESS_THAN operation_seen relacional .)
    R_SQUARE_BRACKET reduce using rule 62 (relacionalp -> LESS_THAN operation_seen relacional .)
    SEMICOLON       reduce using rule 62 (relacionalp -> LESS_THAN operation_seen relacional .)
    HASTA           reduce using rule 62 (relacionalp -> LESS_THAN operation_seen relacional .)
    HACER           reduce using rule 62 (relacionalp -> LESS_THAN operation_seen relacional .)


state 224

    (63) relacionalp -> LESS_THAN_EQUAL operation_seen relacional .

    AND             reduce using rule 63 (relacionalp -> LESS_THAN_EQUAL operation_seen relacional .)
    OR              reduce using rule 63 (relacionalp -> LESS_THAN_EQUAL operation_seen relacional .)
    COMMA           reduce using rule 63 (relacionalp -> LESS_THAN_EQUAL operation_seen relacional .)
    R_PARENTHESIS   reduce using rule 63 (relacionalp -> LESS_THAN_EQUAL operation_seen relacional .)
    R_SQUARE_BRACKET reduce using rule 63 (relacionalp -> LESS_THAN_EQUAL operation_seen relacional .)
    SEMICOLON       reduce using rule 63 (relacionalp -> LESS_THAN_EQUAL operation_seen relacional .)
    HASTA           reduce using rule 63 (relacionalp -> LESS_THAN_EQUAL operation_seen relacional .)
    HACER           reduce using rule 63 (relacionalp -> LESS_THAN_EQUAL operation_seen relacional .)


state 225

    (64) relacionalp -> GREATER_THAN operation_seen relacional .

    AND             reduce using rule 64 (relacionalp -> GREATER_THAN operation_seen relacional .)
    OR              reduce using rule 64 (relacionalp -> GREATER_THAN operation_seen relacional .)
    COMMA           reduce using rule 64 (relacionalp -> GREATER_THAN operation_seen relacional .)
    R_PARENTHESIS   reduce using rule 64 (relacionalp -> GREATER_THAN operation_seen relacional .)
    R_SQUARE_BRACKET reduce using rule 64 (relacionalp -> GREATER_THAN operation_seen relacional .)
    SEMICOLON       reduce using rule 64 (relacionalp -> GREATER_THAN operation_seen relacional .)
    HASTA           reduce using rule 64 (relacionalp -> GREATER_THAN operation_seen relacional .)
    HACER           reduce using rule 64 (relacionalp -> GREATER_THAN operation_seen relacional .)


state 226

    (65) relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .

    AND             reduce using rule 65 (relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .)
    OR              reduce using rule 65 (relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .)
    COMMA           reduce using rule 65 (relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .)
    R_PARENTHESIS   reduce using rule 65 (relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .)
    R_SQUARE_BRACKET reduce using rule 65 (relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .)
    SEMICOLON       reduce using rule 65 (relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .)
    HASTA           reduce using rule 65 (relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .)
    HACER           reduce using rule 65 (relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .)


state 227

    (69) aritmeticap -> SUM operation_seen aritmetica .

    EQUALS          reduce using rule 69 (aritmeticap -> SUM operation_seen aritmetica .)
    NOT_EQUAL       reduce using rule 69 (aritmeticap -> SUM operation_seen aritmetica .)
    LESS_THAN       reduce using rule 69 (aritmeticap -> SUM operation_seen aritmetica .)
    LESS_THAN_EQUAL reduce using rule 69 (aritmeticap -> SUM operation_seen aritmetica .)
    GREATER_THAN    reduce using rule 69 (aritmeticap -> SUM operation_seen aritmetica .)
    GREATER_THAN_EQUAL reduce using rule 69 (aritmeticap -> SUM operation_seen aritmetica .)
    AND             reduce using rule 69 (aritmeticap -> SUM operation_seen aritmetica .)
    OR              reduce using rule 69 (aritmeticap -> SUM operation_seen aritmetica .)
    COMMA           reduce using rule 69 (aritmeticap -> SUM operation_seen aritmetica .)
    R_PARENTHESIS   reduce using rule 69 (aritmeticap -> SUM operation_seen aritmetica .)
    R_SQUARE_BRACKET reduce using rule 69 (aritmeticap -> SUM operation_seen aritmetica .)
    SEMICOLON       reduce using rule 69 (aritmeticap -> SUM operation_seen aritmetica .)
    HASTA           reduce using rule 69 (aritmeticap -> SUM operation_seen aritmetica .)
    HACER           reduce using rule 69 (aritmeticap -> SUM operation_seen aritmetica .)


state 228

    (70) aritmeticap -> SUBTRACT operation_seen aritmetica .

    EQUALS          reduce using rule 70 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    NOT_EQUAL       reduce using rule 70 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    LESS_THAN       reduce using rule 70 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    LESS_THAN_EQUAL reduce using rule 70 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    GREATER_THAN    reduce using rule 70 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    GREATER_THAN_EQUAL reduce using rule 70 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    AND             reduce using rule 70 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    OR              reduce using rule 70 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    COMMA           reduce using rule 70 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    R_PARENTHESIS   reduce using rule 70 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    R_SQUARE_BRACKET reduce using rule 70 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    SEMICOLON       reduce using rule 70 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    HASTA           reduce using rule 70 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    HACER           reduce using rule 70 (aritmeticap -> SUBTRACT operation_seen aritmetica .)


state 229

    (74) factorp -> MULTIPLY operation_seen factor .

    SUM             reduce using rule 74 (factorp -> MULTIPLY operation_seen factor .)
    SUBTRACT        reduce using rule 74 (factorp -> MULTIPLY operation_seen factor .)
    EQUALS          reduce using rule 74 (factorp -> MULTIPLY operation_seen factor .)
    NOT_EQUAL       reduce using rule 74 (factorp -> MULTIPLY operation_seen factor .)
    LESS_THAN       reduce using rule 74 (factorp -> MULTIPLY operation_seen factor .)
    LESS_THAN_EQUAL reduce using rule 74 (factorp -> MULTIPLY operation_seen factor .)
    GREATER_THAN    reduce using rule 74 (factorp -> MULTIPLY operation_seen factor .)
    GREATER_THAN_EQUAL reduce using rule 74 (factorp -> MULTIPLY operation_seen factor .)
    AND             reduce using rule 74 (factorp -> MULTIPLY operation_seen factor .)
    OR              reduce using rule 74 (factorp -> MULTIPLY operation_seen factor .)
    COMMA           reduce using rule 74 (factorp -> MULTIPLY operation_seen factor .)
    R_PARENTHESIS   reduce using rule 74 (factorp -> MULTIPLY operation_seen factor .)
    R_SQUARE_BRACKET reduce using rule 74 (factorp -> MULTIPLY operation_seen factor .)
    SEMICOLON       reduce using rule 74 (factorp -> MULTIPLY operation_seen factor .)
    HASTA           reduce using rule 74 (factorp -> MULTIPLY operation_seen factor .)
    HACER           reduce using rule 74 (factorp -> MULTIPLY operation_seen factor .)


state 230

    (75) factorp -> DIVIDE operation_seen factor .

    SUM             reduce using rule 75 (factorp -> DIVIDE operation_seen factor .)
    SUBTRACT        reduce using rule 75 (factorp -> DIVIDE operation_seen factor .)
    EQUALS          reduce using rule 75 (factorp -> DIVIDE operation_seen factor .)
    NOT_EQUAL       reduce using rule 75 (factorp -> DIVIDE operation_seen factor .)
    LESS_THAN       reduce using rule 75 (factorp -> DIVIDE operation_seen factor .)
    LESS_THAN_EQUAL reduce using rule 75 (factorp -> DIVIDE operation_seen factor .)
    GREATER_THAN    reduce using rule 75 (factorp -> DIVIDE operation_seen factor .)
    GREATER_THAN_EQUAL reduce using rule 75 (factorp -> DIVIDE operation_seen factor .)
    AND             reduce using rule 75 (factorp -> DIVIDE operation_seen factor .)
    OR              reduce using rule 75 (factorp -> DIVIDE operation_seen factor .)
    COMMA           reduce using rule 75 (factorp -> DIVIDE operation_seen factor .)
    R_PARENTHESIS   reduce using rule 75 (factorp -> DIVIDE operation_seen factor .)
    R_SQUARE_BRACKET reduce using rule 75 (factorp -> DIVIDE operation_seen factor .)
    SEMICOLON       reduce using rule 75 (factorp -> DIVIDE operation_seen factor .)
    HASTA           reduce using rule 75 (factorp -> DIVIDE operation_seen factor .)
    HACER           reduce using rule 75 (factorp -> DIVIDE operation_seen factor .)


state 231

    (104) decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque . decisionp
    (107) decisionp -> . SINO jump_else bloque update_jump
    (108) decisionp -> . empty update_jump
    (116) empty -> .

    SINO            shift and go to state 238
    ID              reduce using rule 116 (empty -> .)
    REGRESA         reduce using rule 116 (empty -> .)
    LECTURA         reduce using rule 116 (empty -> .)
    ESCRIBE         reduce using rule 116 (empty -> .)
    SI              reduce using rule 116 (empty -> .)
    MIENTRAS        reduce using rule 116 (empty -> .)
    DESDE           reduce using rule 116 (empty -> .)
    R_CURLY_BRACKET reduce using rule 116 (empty -> .)

    decisionp                      shift and go to state 237
    empty                          shift and go to state 239

state 232

    (110) cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ . bloque update_jump_cycle
    (35) bloque -> . L_CURLY_BRACKET bloquep R_CURLY_BRACKET

    L_CURLY_BRACKET shift and go to state 31

    bloque                         shift and go to state 240

state 233

    (113) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion . apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle
    (48) apply_operation_assign -> .

    HASTA           reduce using rule 48 (apply_operation_assign -> .)

    apply_operation_assign         shift and go to state 241

state 234

    (31) parametrop -> COMMA tipo ID save_param . parametrop
    (31) parametrop -> . COMMA tipo ID save_param parametrop
    (32) parametrop -> . empty
    (116) empty -> .

    COMMA           shift and go to state 141
    R_PARENTHESIS   reduce using rule 116 (empty -> .)

    parametrop                     shift and go to state 242
    empty                          shift and go to state 142

state 235

    (11) varpp -> COMMA ID variable_seen varppp varpp .

    SEMICOLON       reduce using rule 11 (varpp -> COMMA ID variable_seen varppp varpp .)


state 236

    (46) asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON .

    ID              reduce using rule 46 (asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON .)
    REGRESA         reduce using rule 46 (asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON .)
    LECTURA         reduce using rule 46 (asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON .)
    ESCRIBE         reduce using rule 46 (asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON .)
    SI              reduce using rule 46 (asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON .)
    MIENTRAS        reduce using rule 46 (asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON .)
    DESDE           reduce using rule 46 (asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON .)
    R_CURLY_BRACKET reduce using rule 46 (asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON .)


state 237

    (104) decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp .

    ID              reduce using rule 104 (decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp .)
    REGRESA         reduce using rule 104 (decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp .)
    LECTURA         reduce using rule 104 (decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp .)
    ESCRIBE         reduce using rule 104 (decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp .)
    SI              reduce using rule 104 (decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp .)
    MIENTRAS        reduce using rule 104 (decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp .)
    DESDE           reduce using rule 104 (decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp .)
    R_CURLY_BRACKET reduce using rule 104 (decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp .)


state 238

    (107) decisionp -> SINO . jump_else bloque update_jump
    (109) jump_else -> .

    L_CURLY_BRACKET reduce using rule 109 (jump_else -> .)

    jump_else                      shift and go to state 243

state 239

    (108) decisionp -> empty . update_jump
    (106) update_jump -> .

    ID              reduce using rule 106 (update_jump -> .)
    REGRESA         reduce using rule 106 (update_jump -> .)
    LECTURA         reduce using rule 106 (update_jump -> .)
    ESCRIBE         reduce using rule 106 (update_jump -> .)
    SI              reduce using rule 106 (update_jump -> .)
    MIENTRAS        reduce using rule 106 (update_jump -> .)
    DESDE           reduce using rule 106 (update_jump -> .)
    R_CURLY_BRACKET reduce using rule 106 (update_jump -> .)

    update_jump                    shift and go to state 244

state 240

    (110) cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque . update_jump_cycle
    (112) update_jump_cycle -> .

    ID              reduce using rule 112 (update_jump_cycle -> .)
    REGRESA         reduce using rule 112 (update_jump_cycle -> .)
    LECTURA         reduce using rule 112 (update_jump_cycle -> .)
    ESCRIBE         reduce using rule 112 (update_jump_cycle -> .)
    SI              reduce using rule 112 (update_jump_cycle -> .)
    MIENTRAS        reduce using rule 112 (update_jump_cycle -> .)
    DESDE           reduce using rule 112 (update_jump_cycle -> .)
    R_CURLY_BRACKET reduce using rule 112 (update_jump_cycle -> .)

    update_jump_cycle              shift and go to state 245

state 241

    (113) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign . HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle

    HASTA           shift and go to state 246


state 242

    (31) parametrop -> COMMA tipo ID save_param parametrop .

    R_PARENTHESIS   reduce using rule 31 (parametrop -> COMMA tipo ID save_param parametrop .)


state 243

    (107) decisionp -> SINO jump_else . bloque update_jump
    (35) bloque -> . L_CURLY_BRACKET bloquep R_CURLY_BRACKET

    L_CURLY_BRACKET shift and go to state 31

    bloque                         shift and go to state 247

state 244

    (108) decisionp -> empty update_jump .

    ID              reduce using rule 108 (decisionp -> empty update_jump .)
    REGRESA         reduce using rule 108 (decisionp -> empty update_jump .)
    LECTURA         reduce using rule 108 (decisionp -> empty update_jump .)
    ESCRIBE         reduce using rule 108 (decisionp -> empty update_jump .)
    SI              reduce using rule 108 (decisionp -> empty update_jump .)
    MIENTRAS        reduce using rule 108 (decisionp -> empty update_jump .)
    DESDE           reduce using rule 108 (decisionp -> empty update_jump .)
    R_CURLY_BRACKET reduce using rule 108 (decisionp -> empty update_jump .)


state 245

    (110) cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle .

    ID              reduce using rule 110 (cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle .)
    REGRESA         reduce using rule 110 (cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle .)
    LECTURA         reduce using rule 110 (cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle .)
    ESCRIBE         reduce using rule 110 (cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle .)
    SI              reduce using rule 110 (cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle .)
    MIENTRAS        reduce using rule 110 (cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle .)
    DESDE           reduce using rule 110 (cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle .)
    R_CURLY_BRACKET reduce using rule 110 (cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle .)


state 246

    (113) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA . expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle
    (53) expresion -> . relacional apply_operation_expresion expresionp
    (54) expresion -> . NOT relacional expresionp
    (59) relacional -> . aritmetica apply_operation_relational relacionalp
    (68) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (73) factor -> . matriz apply_operation_factor factorp
    (79) matriz -> . cte matrizp
    (84) cte -> . CTE_INT
    (85) cte -> . CTE_FLOAT
    (86) cte -> . CTE_CHAR
    (87) cte -> . llamadaFuncion
    (88) cte -> . ID operand_seen dimId
    (89) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (90) llamadaFuncion -> . ID L_PARENTHESIS expresion llamadaFuncionp R_PARENTHESIS

    NOT             shift and go to state 83
    CTE_INT         shift and go to state 88
    CTE_FLOAT       shift and go to state 89
    CTE_CHAR        shift and go to state 90
    ID              shift and go to state 79
    L_PARENTHESIS   shift and go to state 80

    expresion                      shift and go to state 248
    relacional                     shift and go to state 82
    aritmetica                     shift and go to state 84
    factor                         shift and go to state 85
    matriz                         shift and go to state 86
    cte                            shift and go to state 87
    llamadaFuncion                 shift and go to state 91

state 247

    (107) decisionp -> SINO jump_else bloque . update_jump
    (106) update_jump -> .

    ID              reduce using rule 106 (update_jump -> .)
    REGRESA         reduce using rule 106 (update_jump -> .)
    LECTURA         reduce using rule 106 (update_jump -> .)
    ESCRIBE         reduce using rule 106 (update_jump -> .)
    SI              reduce using rule 106 (update_jump -> .)
    MIENTRAS        reduce using rule 106 (update_jump -> .)
    DESDE           reduce using rule 106 (update_jump -> .)
    R_CURLY_BRACKET reduce using rule 106 (update_jump -> .)

    update_jump                    shift and go to state 249

state 248

    (113) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion . jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle
    (111) jump_cycle -> .

    HACER           reduce using rule 111 (jump_cycle -> .)

    jump_cycle                     shift and go to state 250

state 249

    (107) decisionp -> SINO jump_else bloque update_jump .

    ID              reduce using rule 107 (decisionp -> SINO jump_else bloque update_jump .)
    REGRESA         reduce using rule 107 (decisionp -> SINO jump_else bloque update_jump .)
    LECTURA         reduce using rule 107 (decisionp -> SINO jump_else bloque update_jump .)
    ESCRIBE         reduce using rule 107 (decisionp -> SINO jump_else bloque update_jump .)
    SI              reduce using rule 107 (decisionp -> SINO jump_else bloque update_jump .)
    MIENTRAS        reduce using rule 107 (decisionp -> SINO jump_else bloque update_jump .)
    DESDE           reduce using rule 107 (decisionp -> SINO jump_else bloque update_jump .)
    R_CURLY_BRACKET reduce using rule 107 (decisionp -> SINO jump_else bloque update_jump .)


state 250

    (113) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle . add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle
    (114) add_gt -> .

    HACER           reduce using rule 114 (add_gt -> .)

    add_gt                         shift and go to state 251

state 251

    (113) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt . apply_operation_relational jump_false HACER bloque add_one update_jump_cycle
    (67) apply_operation_relational -> .

    HACER           reduce using rule 67 (apply_operation_relational -> .)

    apply_operation_relational     shift and go to state 252

state 252

    (113) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational . jump_false HACER bloque add_one update_jump_cycle
    (105) jump_false -> .

    HACER           reduce using rule 105 (jump_false -> .)

    jump_false                     shift and go to state 253

state 253

    (113) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false . HACER bloque add_one update_jump_cycle

    HACER           shift and go to state 254


state 254

    (113) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER . bloque add_one update_jump_cycle
    (35) bloque -> . L_CURLY_BRACKET bloquep R_CURLY_BRACKET

    L_CURLY_BRACKET shift and go to state 31

    bloque                         shift and go to state 255

state 255

    (113) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque . add_one update_jump_cycle
    (115) add_one -> .

    ID              reduce using rule 115 (add_one -> .)
    REGRESA         reduce using rule 115 (add_one -> .)
    LECTURA         reduce using rule 115 (add_one -> .)
    ESCRIBE         reduce using rule 115 (add_one -> .)
    SI              reduce using rule 115 (add_one -> .)
    MIENTRAS        reduce using rule 115 (add_one -> .)
    DESDE           reduce using rule 115 (add_one -> .)
    R_CURLY_BRACKET reduce using rule 115 (add_one -> .)

    add_one                        shift and go to state 256

state 256

    (113) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one . update_jump_cycle
    (112) update_jump_cycle -> .

    ID              reduce using rule 112 (update_jump_cycle -> .)
    REGRESA         reduce using rule 112 (update_jump_cycle -> .)
    LECTURA         reduce using rule 112 (update_jump_cycle -> .)
    ESCRIBE         reduce using rule 112 (update_jump_cycle -> .)
    SI              reduce using rule 112 (update_jump_cycle -> .)
    MIENTRAS        reduce using rule 112 (update_jump_cycle -> .)
    DESDE           reduce using rule 112 (update_jump_cycle -> .)
    R_CURLY_BRACKET reduce using rule 112 (update_jump_cycle -> .)

    update_jump_cycle              shift and go to state 257

state 257

    (113) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle .

    ID              reduce using rule 113 (cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle .)
    REGRESA         reduce using rule 113 (cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle .)
    LECTURA         reduce using rule 113 (cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle .)
    ESCRIBE         reduce using rule 113 (cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle .)
    SI              reduce using rule 113 (cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle .)
    MIENTRAS        reduce using rule 113 (cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle .)
    DESDE           reduce using rule 113 (cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle .)
    R_CURLY_BRACKET reduce using rule 113 (cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle .)

