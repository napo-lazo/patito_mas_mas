Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> programa
Rule 2     programa -> PROGRAMA ID SEMICOLON jump var funcion clear_scope PRINCIPAL update_jump L_PARENTHESIS R_PARENTHESIS bloque EOF
Rule 3     jump -> <empty>
Rule 4     clear_scope -> <empty>
Rule 5     var -> VAR var_seen varp
Rule 6     var -> empty
Rule 7     var_seen -> <empty>
Rule 8     varp -> tipo tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp
Rule 9     tipo_seen -> <empty>
Rule 10    variable_seen -> <empty>
Rule 11    delete_type -> <empty>
Rule 12    varpp -> COMMA ID variable_seen varppp varpp
Rule 13    varpp -> empty
Rule 14    varppp -> dimDeclare
Rule 15    varppp -> dimDeclare dimDeclare
Rule 16    varppp -> empty
Rule 17    varpppp -> varp
Rule 18    varpppp -> empty
Rule 19    dimDeclare -> L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET
Rule 20    tipo -> INT
Rule 21    tipo -> FLOAT
Rule 22    tipo -> CHAR
Rule 23    funcion -> FUNCION funcionp
Rule 24    funcion -> empty
Rule 25    funcionp -> tipoRetorno ID create_func_scope L_PARENTHESIS parametro R_PARENTHESIS var bloque end_func funcion
Rule 26    create_func_scope -> <empty>
Rule 27    end_func -> <empty>
Rule 28    parametro -> tipo ID save_param parametrop
Rule 29    parametro -> empty
Rule 30    save_param -> <empty>
Rule 31    parametrop -> COMMA tipo ID save_param parametrop
Rule 32    parametrop -> empty
Rule 33    tipoRetorno -> tipo
Rule 34    tipoRetorno -> VOID
Rule 35    bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET
Rule 36    bloquep -> estatuto bloquep
Rule 37    bloquep -> empty
Rule 38    estatuto -> asignacion
Rule 39    estatuto -> funcionVacia
Rule 40    estatuto -> regresa
Rule 41    estatuto -> lectura
Rule 42    estatuto -> escritura
Rule 43    estatuto -> decision
Rule 44    estatuto -> cicloCondicional
Rule 45    estatuto -> cicloNoCondicional
Rule 46    asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON
Rule 47    operand_seen -> <empty>
Rule 48    dimId -> is_array create_dim dim pop_array
Rule 49    dimId -> is_array create_dim dim dim pop_array
Rule 50    dimId -> empty
Rule 51    pop_array -> <empty>
Rule 52    is_array -> <empty>
Rule 53    dim -> L_SQUARE_BRACKET bracket_seen expresion R_SQUARE_BRACKET bracket_seen
Rule 54    create_dim -> <empty>
Rule 55    bracket_seen -> <empty>
Rule 56    apply_operation_assign -> <empty>
Rule 57    expresion -> relacional apply_operation_expresion expresionp
Rule 58    expresionp -> AND operation_seen expresion
Rule 59    expresionp -> OR operation_seen expresion
Rule 60    expresionp -> empty
Rule 61    apply_operation_expresion -> <empty>
Rule 62    relacional -> aritmetica apply_operation_relational relacionalp
Rule 63    relacionalp -> EQUALS operation_seen relacional
Rule 64    relacionalp -> NOT_EQUAL operation_seen relacional
Rule 65    relacionalp -> LESS_THAN operation_seen relacional
Rule 66    relacionalp -> LESS_THAN_EQUAL operation_seen relacional
Rule 67    relacionalp -> GREATER_THAN operation_seen relacional
Rule 68    relacionalp -> GREATER_THAN_EQUAL operation_seen relacional
Rule 69    relacionalp -> empty
Rule 70    apply_operation_relational -> <empty>
Rule 71    aritmetica -> factor apply_operation_aritmetica aritmeticap
Rule 72    aritmeticap -> SUM operation_seen aritmetica
Rule 73    aritmeticap -> SUBTRACT operation_seen aritmetica
Rule 74    aritmeticap -> empty
Rule 75    apply_operation_aritmetica -> <empty>
Rule 76    factor -> matriz apply_operation_factor factorp
Rule 77    factorp -> MULTIPLY operation_seen factor
Rule 78    factorp -> DIVIDE operation_seen factor
Rule 79    factorp -> empty
Rule 80    apply_operation_factor -> <empty>
Rule 81    operation_seen -> <empty>
Rule 82    matriz -> cte matrizp
Rule 83    matriz -> NOT operation_seen cte apply_not
Rule 84    apply_not -> <empty>
Rule 85    matrizp -> DETERMINANT operation_seen apply_mat
Rule 86    matrizp -> TRANSPOSED operation_seen apply_mat
Rule 87    matrizp -> INVERSE operation_seen apply_mat
Rule 88    matrizp -> empty
Rule 89    apply_mat -> <empty>
Rule 90    cte -> CTE_INT
Rule 91    cte -> CTE_FLOAT
Rule 92    cte -> CTE_CHAR
Rule 93    cte -> llamadaFuncion
Rule 94    cte -> ID operand_seen dimId
Rule 95    cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
Rule 96    llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen
Rule 97    llamadaFuncionp -> expresion verify_parameter llamadaFuncionpp
Rule 98    llamadaFuncionp -> empty
Rule 99    llamadaFuncionpp -> COMMA llamadaFuncionp
Rule 100   llamadaFuncionpp -> empty
Rule 101   verify_parameter -> <empty>
Rule 102   funcionVacia -> ID set_func_scope L_PARENTHESIS llamadaFuncionp R_PARENTHESIS SEMICOLON
Rule 103   set_func_scope -> <empty>
Rule 104   regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON
Rule 105   lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON
Rule 106   lecturap -> ID operand_seen dimId gen_input lecturapp
Rule 107   gen_input -> <empty>
Rule 108   lecturapp -> COMMA lecturap
Rule 109   lecturapp -> empty
Rule 110   escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON
Rule 111   escriturap -> LETRERO gen_print escriturapp
Rule 112   escriturap -> expresion gen_print escriturapp
Rule 113   gen_print -> <empty>
Rule 114   escriturapp -> COMMA escriturap
Rule 115   escriturapp -> empty
Rule 116   decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp
Rule 117   jump_false -> <empty>
Rule 118   update_jump -> <empty>
Rule 119   decisionp -> SINO jump_else bloque update_jump
Rule 120   decisionp -> empty update_jump
Rule 121   jump_else -> <empty>
Rule 122   cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle
Rule 123   jump_cycle -> <empty>
Rule 124   update_jump_cycle -> <empty>
Rule 125   cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle
Rule 126   add_gt -> <empty>
Rule 127   add_one -> <empty>
Rule 128   empty -> <empty>

Terminals, with rules where they appear

AND                  : 58
ASSIGN               : 46 125
CHAR                 : 22
COLON                : 8
COMMA                : 12 31 99 108 114
CTE_CHAR             : 92
CTE_FLOAT            : 91
CTE_INT              : 19 90
DESDE                : 125
DETERMINANT          : 85
DIVIDE               : 78
EOF                  : 2
EQUALS               : 63
ESCRIBE              : 110
FLOAT                : 21
FUNCION              : 23
GREATER_THAN         : 67
GREATER_THAN_EQUAL   : 68
HACER                : 125
HASTA                : 125
HAZ                  : 116 122
ID                   : 2 8 12 25 28 31 46 94 96 102 106 125
INT                  : 20
INVERSE              : 87
LECTURA              : 105
LESS_THAN            : 65
LESS_THAN_EQUAL      : 66
LETRERO              : 111
L_CURLY_BRACKET      : 35
L_PARENTHESIS        : 2 25 95 96 102 104 105 110 116 122
L_SQUARE_BRACKET     : 19 53
MIENTRAS             : 122
MULTIPLY             : 77
NOT                  : 83
NOT_EQUAL            : 64
OR                   : 59
PRINCIPAL            : 2
PROGRAMA             : 2
REGRESA              : 104
R_CURLY_BRACKET      : 35
R_PARENTHESIS        : 2 25 95 96 102 104 105 110 116 122
R_SQUARE_BRACKET     : 19 53
SEMICOLON            : 2 8 46 102 104 105 110
SI                   : 116
SINO                 : 119
SUBTRACT             : 73
SUM                  : 72
TRANSPOSED           : 86
VAR                  : 5
VOID                 : 34
error                : 

Nonterminals, with rules where they appear

add_gt               : 125
add_one              : 125
apply_mat            : 85 86 87
apply_not            : 83
apply_operation_aritmetica : 71
apply_operation_assign : 46 125
apply_operation_expresion : 57
apply_operation_factor : 76
apply_operation_relational : 62 125
aritmetica           : 62 72 73
aritmeticap          : 71
asignacion           : 38
bloque               : 2 25 116 119 122 125
bloquep              : 35 36
bracket_seen         : 53 53
cicloCondicional     : 44
cicloNoCondicional   : 45
clear_scope          : 2
create_dim           : 48 49
create_func_scope    : 25
cte                  : 82 83
decision             : 43
decisionp            : 116
delete_type          : 8
dim                  : 48 49 49
dimDeclare           : 14 15 15
dimId                : 46 94 106 125
empty                : 6 13 16 18 24 29 32 37 50 60 69 74 79 88 98 100 109 115 120
end_func             : 25
escritura            : 42
escriturap           : 110 114
escriturapp          : 111 112
estatuto             : 36
expresion            : 46 53 58 59 95 97 104 112 116 122 125 125
expresionp           : 57
factor               : 71 77 78
factorp              : 76
funcion              : 2 25
funcionVacia         : 39
funcionp             : 23
gen_input            : 106
gen_print            : 111 112
is_array             : 48 49
jump                 : 2
jump_cycle           : 122 125
jump_else            : 119
jump_false           : 116 122 125
lectura              : 41
lecturap             : 105 108
lecturapp            : 106
llamadaFuncion       : 93
llamadaFuncionp      : 96 99 102
llamadaFuncionpp     : 97
matriz               : 76
matrizp              : 82
operand_seen         : 46 94 106 125
operation_seen       : 46 58 59 63 64 65 66 67 68 72 73 77 78 83 85 86 87 95 95 96 96 125
parametro            : 25
parametrop           : 28 31
pop_array            : 48 49
programa             : 1
regresa              : 40
relacional           : 57 63 64 65 66 67 68
relacionalp          : 62
save_param           : 28 31
set_func_scope       : 96 102
start                : 0
tipo                 : 8 28 31 33
tipoRetorno          : 25
tipo_seen            : 8
update_jump          : 2 119 120
update_jump_cycle    : 122 125
var                  : 2 25
var_seen             : 5
variable_seen        : 8 12
varp                 : 5 17
varpp                : 8 12
varppp               : 8 12
varpppp              : 8
verify_parameter     : 97

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . programa
    (2) programa -> . PROGRAMA ID SEMICOLON jump var funcion clear_scope PRINCIPAL update_jump L_PARENTHESIS R_PARENTHESIS bloque EOF

    PROGRAMA        shift and go to state 3

    start                          shift and go to state 1
    programa                       shift and go to state 2

state 1

    (0) S' -> start .



state 2

    (1) start -> programa .

    $end            reduce using rule 1 (start -> programa .)


state 3

    (2) programa -> PROGRAMA . ID SEMICOLON jump var funcion clear_scope PRINCIPAL update_jump L_PARENTHESIS R_PARENTHESIS bloque EOF

    ID              shift and go to state 4


state 4

    (2) programa -> PROGRAMA ID . SEMICOLON jump var funcion clear_scope PRINCIPAL update_jump L_PARENTHESIS R_PARENTHESIS bloque EOF

    SEMICOLON       shift and go to state 5


state 5

    (2) programa -> PROGRAMA ID SEMICOLON . jump var funcion clear_scope PRINCIPAL update_jump L_PARENTHESIS R_PARENTHESIS bloque EOF
    (3) jump -> .

    VAR             reduce using rule 3 (jump -> .)
    FUNCION         reduce using rule 3 (jump -> .)
    PRINCIPAL       reduce using rule 3 (jump -> .)

    jump                           shift and go to state 6

state 6

    (2) programa -> PROGRAMA ID SEMICOLON jump . var funcion clear_scope PRINCIPAL update_jump L_PARENTHESIS R_PARENTHESIS bloque EOF
    (5) var -> . VAR var_seen varp
    (6) var -> . empty
    (128) empty -> .

    VAR             shift and go to state 8
    FUNCION         reduce using rule 128 (empty -> .)
    PRINCIPAL       reduce using rule 128 (empty -> .)

    var                            shift and go to state 7
    empty                          shift and go to state 9

state 7

    (2) programa -> PROGRAMA ID SEMICOLON jump var . funcion clear_scope PRINCIPAL update_jump L_PARENTHESIS R_PARENTHESIS bloque EOF
    (23) funcion -> . FUNCION funcionp
    (24) funcion -> . empty
    (128) empty -> .

    FUNCION         shift and go to state 11
    PRINCIPAL       reduce using rule 128 (empty -> .)

    funcion                        shift and go to state 10
    empty                          shift and go to state 12

state 8

    (5) var -> VAR . var_seen varp
    (7) var_seen -> .

    INT             reduce using rule 7 (var_seen -> .)
    FLOAT           reduce using rule 7 (var_seen -> .)
    CHAR            reduce using rule 7 (var_seen -> .)

    var_seen                       shift and go to state 13

state 9

    (6) var -> empty .

    FUNCION         reduce using rule 6 (var -> empty .)
    PRINCIPAL       reduce using rule 6 (var -> empty .)
    L_CURLY_BRACKET reduce using rule 6 (var -> empty .)


state 10

    (2) programa -> PROGRAMA ID SEMICOLON jump var funcion . clear_scope PRINCIPAL update_jump L_PARENTHESIS R_PARENTHESIS bloque EOF
    (4) clear_scope -> .

    PRINCIPAL       reduce using rule 4 (clear_scope -> .)

    clear_scope                    shift and go to state 14

state 11

    (23) funcion -> FUNCION . funcionp
    (25) funcionp -> . tipoRetorno ID create_func_scope L_PARENTHESIS parametro R_PARENTHESIS var bloque end_func funcion
    (33) tipoRetorno -> . tipo
    (34) tipoRetorno -> . VOID
    (20) tipo -> . INT
    (21) tipo -> . FLOAT
    (22) tipo -> . CHAR

    VOID            shift and go to state 18
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21

    funcionp                       shift and go to state 15
    tipoRetorno                    shift and go to state 16
    tipo                           shift and go to state 17

state 12

    (24) funcion -> empty .

    PRINCIPAL       reduce using rule 24 (funcion -> empty .)


state 13

    (5) var -> VAR var_seen . varp
    (8) varp -> . tipo tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp
    (20) tipo -> . INT
    (21) tipo -> . FLOAT
    (22) tipo -> . CHAR

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21

    varp                           shift and go to state 22
    tipo                           shift and go to state 23

state 14

    (2) programa -> PROGRAMA ID SEMICOLON jump var funcion clear_scope . PRINCIPAL update_jump L_PARENTHESIS R_PARENTHESIS bloque EOF

    PRINCIPAL       shift and go to state 24


state 15

    (23) funcion -> FUNCION funcionp .

    PRINCIPAL       reduce using rule 23 (funcion -> FUNCION funcionp .)


state 16

    (25) funcionp -> tipoRetorno . ID create_func_scope L_PARENTHESIS parametro R_PARENTHESIS var bloque end_func funcion

    ID              shift and go to state 25


state 17

    (33) tipoRetorno -> tipo .

    ID              reduce using rule 33 (tipoRetorno -> tipo .)


state 18

    (34) tipoRetorno -> VOID .

    ID              reduce using rule 34 (tipoRetorno -> VOID .)


state 19

    (20) tipo -> INT .

    ID              reduce using rule 20 (tipo -> INT .)
    COLON           reduce using rule 20 (tipo -> INT .)


state 20

    (21) tipo -> FLOAT .

    ID              reduce using rule 21 (tipo -> FLOAT .)
    COLON           reduce using rule 21 (tipo -> FLOAT .)


state 21

    (22) tipo -> CHAR .

    ID              reduce using rule 22 (tipo -> CHAR .)
    COLON           reduce using rule 22 (tipo -> CHAR .)


state 22

    (5) var -> VAR var_seen varp .

    FUNCION         reduce using rule 5 (var -> VAR var_seen varp .)
    PRINCIPAL       reduce using rule 5 (var -> VAR var_seen varp .)
    L_CURLY_BRACKET reduce using rule 5 (var -> VAR var_seen varp .)


state 23

    (8) varp -> tipo . tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp
    (9) tipo_seen -> .

    COLON           reduce using rule 9 (tipo_seen -> .)

    tipo_seen                      shift and go to state 26

state 24

    (2) programa -> PROGRAMA ID SEMICOLON jump var funcion clear_scope PRINCIPAL . update_jump L_PARENTHESIS R_PARENTHESIS bloque EOF
    (118) update_jump -> .

    L_PARENTHESIS   reduce using rule 118 (update_jump -> .)

    update_jump                    shift and go to state 27

state 25

    (25) funcionp -> tipoRetorno ID . create_func_scope L_PARENTHESIS parametro R_PARENTHESIS var bloque end_func funcion
    (26) create_func_scope -> .

    L_PARENTHESIS   reduce using rule 26 (create_func_scope -> .)

    create_func_scope              shift and go to state 28

state 26

    (8) varp -> tipo tipo_seen . COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp

    COLON           shift and go to state 29


state 27

    (2) programa -> PROGRAMA ID SEMICOLON jump var funcion clear_scope PRINCIPAL update_jump . L_PARENTHESIS R_PARENTHESIS bloque EOF

    L_PARENTHESIS   shift and go to state 30


state 28

    (25) funcionp -> tipoRetorno ID create_func_scope . L_PARENTHESIS parametro R_PARENTHESIS var bloque end_func funcion

    L_PARENTHESIS   shift and go to state 31


state 29

    (8) varp -> tipo tipo_seen COLON . ID variable_seen varppp varpp delete_type SEMICOLON varpppp

    ID              shift and go to state 32


state 30

    (2) programa -> PROGRAMA ID SEMICOLON jump var funcion clear_scope PRINCIPAL update_jump L_PARENTHESIS . R_PARENTHESIS bloque EOF

    R_PARENTHESIS   shift and go to state 33


state 31

    (25) funcionp -> tipoRetorno ID create_func_scope L_PARENTHESIS . parametro R_PARENTHESIS var bloque end_func funcion
    (28) parametro -> . tipo ID save_param parametrop
    (29) parametro -> . empty
    (20) tipo -> . INT
    (21) tipo -> . FLOAT
    (22) tipo -> . CHAR
    (128) empty -> .

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21
    R_PARENTHESIS   reduce using rule 128 (empty -> .)

    parametro                      shift and go to state 34
    tipo                           shift and go to state 35
    empty                          shift and go to state 36

state 32

    (8) varp -> tipo tipo_seen COLON ID . variable_seen varppp varpp delete_type SEMICOLON varpppp
    (10) variable_seen -> .

    L_SQUARE_BRACKET reduce using rule 10 (variable_seen -> .)
    COMMA           reduce using rule 10 (variable_seen -> .)
    SEMICOLON       reduce using rule 10 (variable_seen -> .)

    variable_seen                  shift and go to state 37

state 33

    (2) programa -> PROGRAMA ID SEMICOLON jump var funcion clear_scope PRINCIPAL update_jump L_PARENTHESIS R_PARENTHESIS . bloque EOF
    (35) bloque -> . L_CURLY_BRACKET bloquep R_CURLY_BRACKET

    L_CURLY_BRACKET shift and go to state 39

    bloque                         shift and go to state 38

state 34

    (25) funcionp -> tipoRetorno ID create_func_scope L_PARENTHESIS parametro . R_PARENTHESIS var bloque end_func funcion

    R_PARENTHESIS   shift and go to state 40


state 35

    (28) parametro -> tipo . ID save_param parametrop

    ID              shift and go to state 41


state 36

    (29) parametro -> empty .

    R_PARENTHESIS   reduce using rule 29 (parametro -> empty .)


state 37

    (8) varp -> tipo tipo_seen COLON ID variable_seen . varppp varpp delete_type SEMICOLON varpppp
    (14) varppp -> . dimDeclare
    (15) varppp -> . dimDeclare dimDeclare
    (16) varppp -> . empty
    (19) dimDeclare -> . L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET
    (128) empty -> .

    L_SQUARE_BRACKET shift and go to state 45
    COMMA           reduce using rule 128 (empty -> .)
    SEMICOLON       reduce using rule 128 (empty -> .)

    varppp                         shift and go to state 42
    dimDeclare                     shift and go to state 43
    empty                          shift and go to state 44

state 38

    (2) programa -> PROGRAMA ID SEMICOLON jump var funcion clear_scope PRINCIPAL update_jump L_PARENTHESIS R_PARENTHESIS bloque . EOF

    EOF             shift and go to state 46


state 39

    (35) bloque -> L_CURLY_BRACKET . bloquep R_CURLY_BRACKET
    (36) bloquep -> . estatuto bloquep
    (37) bloquep -> . empty
    (38) estatuto -> . asignacion
    (39) estatuto -> . funcionVacia
    (40) estatuto -> . regresa
    (41) estatuto -> . lectura
    (42) estatuto -> . escritura
    (43) estatuto -> . decision
    (44) estatuto -> . cicloCondicional
    (45) estatuto -> . cicloNoCondicional
    (128) empty -> .
    (46) asignacion -> . ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON
    (102) funcionVacia -> . ID set_func_scope L_PARENTHESIS llamadaFuncionp R_PARENTHESIS SEMICOLON
    (104) regresa -> . REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON
    (105) lectura -> . LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON
    (110) escritura -> . ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON
    (116) decision -> . SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp
    (122) cicloCondicional -> . MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle
    (125) cicloNoCondicional -> . DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle

    R_CURLY_BRACKET reduce using rule 128 (empty -> .)
    ID              shift and go to state 58
    REGRESA         shift and go to state 59
    LECTURA         shift and go to state 60
    ESCRIBE         shift and go to state 61
    SI              shift and go to state 62
    MIENTRAS        shift and go to state 63
    DESDE           shift and go to state 64

    bloquep                        shift and go to state 47
    estatuto                       shift and go to state 48
    empty                          shift and go to state 49
    asignacion                     shift and go to state 50
    funcionVacia                   shift and go to state 51
    regresa                        shift and go to state 52
    lectura                        shift and go to state 53
    escritura                      shift and go to state 54
    decision                       shift and go to state 55
    cicloCondicional               shift and go to state 56
    cicloNoCondicional             shift and go to state 57

state 40

    (25) funcionp -> tipoRetorno ID create_func_scope L_PARENTHESIS parametro R_PARENTHESIS . var bloque end_func funcion
    (5) var -> . VAR var_seen varp
    (6) var -> . empty
    (128) empty -> .

    VAR             shift and go to state 8
    L_CURLY_BRACKET reduce using rule 128 (empty -> .)

    var                            shift and go to state 65
    empty                          shift and go to state 9

state 41

    (28) parametro -> tipo ID . save_param parametrop
    (30) save_param -> .

    COMMA           reduce using rule 30 (save_param -> .)
    R_PARENTHESIS   reduce using rule 30 (save_param -> .)

    save_param                     shift and go to state 66

state 42

    (8) varp -> tipo tipo_seen COLON ID variable_seen varppp . varpp delete_type SEMICOLON varpppp
    (12) varpp -> . COMMA ID variable_seen varppp varpp
    (13) varpp -> . empty
    (128) empty -> .

    COMMA           shift and go to state 68
    SEMICOLON       reduce using rule 128 (empty -> .)

    varpp                          shift and go to state 67
    empty                          shift and go to state 69

state 43

    (14) varppp -> dimDeclare .
    (15) varppp -> dimDeclare . dimDeclare
    (19) dimDeclare -> . L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET

    COMMA           reduce using rule 14 (varppp -> dimDeclare .)
    SEMICOLON       reduce using rule 14 (varppp -> dimDeclare .)
    L_SQUARE_BRACKET shift and go to state 45

    dimDeclare                     shift and go to state 70

state 44

    (16) varppp -> empty .

    COMMA           reduce using rule 16 (varppp -> empty .)
    SEMICOLON       reduce using rule 16 (varppp -> empty .)


state 45

    (19) dimDeclare -> L_SQUARE_BRACKET . CTE_INT R_SQUARE_BRACKET

    CTE_INT         shift and go to state 71


state 46

    (2) programa -> PROGRAMA ID SEMICOLON jump var funcion clear_scope PRINCIPAL update_jump L_PARENTHESIS R_PARENTHESIS bloque EOF .

    $end            reduce using rule 2 (programa -> PROGRAMA ID SEMICOLON jump var funcion clear_scope PRINCIPAL update_jump L_PARENTHESIS R_PARENTHESIS bloque EOF .)


state 47

    (35) bloque -> L_CURLY_BRACKET bloquep . R_CURLY_BRACKET

    R_CURLY_BRACKET shift and go to state 72


state 48

    (36) bloquep -> estatuto . bloquep
    (36) bloquep -> . estatuto bloquep
    (37) bloquep -> . empty
    (38) estatuto -> . asignacion
    (39) estatuto -> . funcionVacia
    (40) estatuto -> . regresa
    (41) estatuto -> . lectura
    (42) estatuto -> . escritura
    (43) estatuto -> . decision
    (44) estatuto -> . cicloCondicional
    (45) estatuto -> . cicloNoCondicional
    (128) empty -> .
    (46) asignacion -> . ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON
    (102) funcionVacia -> . ID set_func_scope L_PARENTHESIS llamadaFuncionp R_PARENTHESIS SEMICOLON
    (104) regresa -> . REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON
    (105) lectura -> . LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON
    (110) escritura -> . ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON
    (116) decision -> . SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp
    (122) cicloCondicional -> . MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle
    (125) cicloNoCondicional -> . DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle

    R_CURLY_BRACKET reduce using rule 128 (empty -> .)
    ID              shift and go to state 58
    REGRESA         shift and go to state 59
    LECTURA         shift and go to state 60
    ESCRIBE         shift and go to state 61
    SI              shift and go to state 62
    MIENTRAS        shift and go to state 63
    DESDE           shift and go to state 64

    estatuto                       shift and go to state 48
    bloquep                        shift and go to state 73
    empty                          shift and go to state 49
    asignacion                     shift and go to state 50
    funcionVacia                   shift and go to state 51
    regresa                        shift and go to state 52
    lectura                        shift and go to state 53
    escritura                      shift and go to state 54
    decision                       shift and go to state 55
    cicloCondicional               shift and go to state 56
    cicloNoCondicional             shift and go to state 57

state 49

    (37) bloquep -> empty .

    R_CURLY_BRACKET reduce using rule 37 (bloquep -> empty .)


state 50

    (38) estatuto -> asignacion .

    ID              reduce using rule 38 (estatuto -> asignacion .)
    REGRESA         reduce using rule 38 (estatuto -> asignacion .)
    LECTURA         reduce using rule 38 (estatuto -> asignacion .)
    ESCRIBE         reduce using rule 38 (estatuto -> asignacion .)
    SI              reduce using rule 38 (estatuto -> asignacion .)
    MIENTRAS        reduce using rule 38 (estatuto -> asignacion .)
    DESDE           reduce using rule 38 (estatuto -> asignacion .)
    R_CURLY_BRACKET reduce using rule 38 (estatuto -> asignacion .)


state 51

    (39) estatuto -> funcionVacia .

    ID              reduce using rule 39 (estatuto -> funcionVacia .)
    REGRESA         reduce using rule 39 (estatuto -> funcionVacia .)
    LECTURA         reduce using rule 39 (estatuto -> funcionVacia .)
    ESCRIBE         reduce using rule 39 (estatuto -> funcionVacia .)
    SI              reduce using rule 39 (estatuto -> funcionVacia .)
    MIENTRAS        reduce using rule 39 (estatuto -> funcionVacia .)
    DESDE           reduce using rule 39 (estatuto -> funcionVacia .)
    R_CURLY_BRACKET reduce using rule 39 (estatuto -> funcionVacia .)


state 52

    (40) estatuto -> regresa .

    ID              reduce using rule 40 (estatuto -> regresa .)
    REGRESA         reduce using rule 40 (estatuto -> regresa .)
    LECTURA         reduce using rule 40 (estatuto -> regresa .)
    ESCRIBE         reduce using rule 40 (estatuto -> regresa .)
    SI              reduce using rule 40 (estatuto -> regresa .)
    MIENTRAS        reduce using rule 40 (estatuto -> regresa .)
    DESDE           reduce using rule 40 (estatuto -> regresa .)
    R_CURLY_BRACKET reduce using rule 40 (estatuto -> regresa .)


state 53

    (41) estatuto -> lectura .

    ID              reduce using rule 41 (estatuto -> lectura .)
    REGRESA         reduce using rule 41 (estatuto -> lectura .)
    LECTURA         reduce using rule 41 (estatuto -> lectura .)
    ESCRIBE         reduce using rule 41 (estatuto -> lectura .)
    SI              reduce using rule 41 (estatuto -> lectura .)
    MIENTRAS        reduce using rule 41 (estatuto -> lectura .)
    DESDE           reduce using rule 41 (estatuto -> lectura .)
    R_CURLY_BRACKET reduce using rule 41 (estatuto -> lectura .)


state 54

    (42) estatuto -> escritura .

    ID              reduce using rule 42 (estatuto -> escritura .)
    REGRESA         reduce using rule 42 (estatuto -> escritura .)
    LECTURA         reduce using rule 42 (estatuto -> escritura .)
    ESCRIBE         reduce using rule 42 (estatuto -> escritura .)
    SI              reduce using rule 42 (estatuto -> escritura .)
    MIENTRAS        reduce using rule 42 (estatuto -> escritura .)
    DESDE           reduce using rule 42 (estatuto -> escritura .)
    R_CURLY_BRACKET reduce using rule 42 (estatuto -> escritura .)


state 55

    (43) estatuto -> decision .

    ID              reduce using rule 43 (estatuto -> decision .)
    REGRESA         reduce using rule 43 (estatuto -> decision .)
    LECTURA         reduce using rule 43 (estatuto -> decision .)
    ESCRIBE         reduce using rule 43 (estatuto -> decision .)
    SI              reduce using rule 43 (estatuto -> decision .)
    MIENTRAS        reduce using rule 43 (estatuto -> decision .)
    DESDE           reduce using rule 43 (estatuto -> decision .)
    R_CURLY_BRACKET reduce using rule 43 (estatuto -> decision .)


state 56

    (44) estatuto -> cicloCondicional .

    ID              reduce using rule 44 (estatuto -> cicloCondicional .)
    REGRESA         reduce using rule 44 (estatuto -> cicloCondicional .)
    LECTURA         reduce using rule 44 (estatuto -> cicloCondicional .)
    ESCRIBE         reduce using rule 44 (estatuto -> cicloCondicional .)
    SI              reduce using rule 44 (estatuto -> cicloCondicional .)
    MIENTRAS        reduce using rule 44 (estatuto -> cicloCondicional .)
    DESDE           reduce using rule 44 (estatuto -> cicloCondicional .)
    R_CURLY_BRACKET reduce using rule 44 (estatuto -> cicloCondicional .)


state 57

    (45) estatuto -> cicloNoCondicional .

    ID              reduce using rule 45 (estatuto -> cicloNoCondicional .)
    REGRESA         reduce using rule 45 (estatuto -> cicloNoCondicional .)
    LECTURA         reduce using rule 45 (estatuto -> cicloNoCondicional .)
    ESCRIBE         reduce using rule 45 (estatuto -> cicloNoCondicional .)
    SI              reduce using rule 45 (estatuto -> cicloNoCondicional .)
    MIENTRAS        reduce using rule 45 (estatuto -> cicloNoCondicional .)
    DESDE           reduce using rule 45 (estatuto -> cicloNoCondicional .)
    R_CURLY_BRACKET reduce using rule 45 (estatuto -> cicloNoCondicional .)


state 58

    (46) asignacion -> ID . operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON
    (102) funcionVacia -> ID . set_func_scope L_PARENTHESIS llamadaFuncionp R_PARENTHESIS SEMICOLON
    (47) operand_seen -> .
    (103) set_func_scope -> .

    ASSIGN          reduce using rule 47 (operand_seen -> .)
    L_SQUARE_BRACKET reduce using rule 47 (operand_seen -> .)
    L_PARENTHESIS   reduce using rule 103 (set_func_scope -> .)

    operand_seen                   shift and go to state 74
    set_func_scope                 shift and go to state 75

state 59

    (104) regresa -> REGRESA . L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON

    L_PARENTHESIS   shift and go to state 76


state 60

    (105) lectura -> LECTURA . L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON

    L_PARENTHESIS   shift and go to state 77


state 61

    (110) escritura -> ESCRIBE . L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON

    L_PARENTHESIS   shift and go to state 78


state 62

    (116) decision -> SI . L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp

    L_PARENTHESIS   shift and go to state 79


state 63

    (122) cicloCondicional -> MIENTRAS . jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle
    (123) jump_cycle -> .

    L_PARENTHESIS   reduce using rule 123 (jump_cycle -> .)

    jump_cycle                     shift and go to state 80

state 64

    (125) cicloNoCondicional -> DESDE . ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle

    ID              shift and go to state 81


state 65

    (25) funcionp -> tipoRetorno ID create_func_scope L_PARENTHESIS parametro R_PARENTHESIS var . bloque end_func funcion
    (35) bloque -> . L_CURLY_BRACKET bloquep R_CURLY_BRACKET

    L_CURLY_BRACKET shift and go to state 39

    bloque                         shift and go to state 82

state 66

    (28) parametro -> tipo ID save_param . parametrop
    (31) parametrop -> . COMMA tipo ID save_param parametrop
    (32) parametrop -> . empty
    (128) empty -> .

    COMMA           shift and go to state 84
    R_PARENTHESIS   reduce using rule 128 (empty -> .)

    parametrop                     shift and go to state 83
    empty                          shift and go to state 85

state 67

    (8) varp -> tipo tipo_seen COLON ID variable_seen varppp varpp . delete_type SEMICOLON varpppp
    (11) delete_type -> .

    SEMICOLON       reduce using rule 11 (delete_type -> .)

    delete_type                    shift and go to state 86

state 68

    (12) varpp -> COMMA . ID variable_seen varppp varpp

    ID              shift and go to state 87


state 69

    (13) varpp -> empty .

    SEMICOLON       reduce using rule 13 (varpp -> empty .)


state 70

    (15) varppp -> dimDeclare dimDeclare .

    COMMA           reduce using rule 15 (varppp -> dimDeclare dimDeclare .)
    SEMICOLON       reduce using rule 15 (varppp -> dimDeclare dimDeclare .)


state 71

    (19) dimDeclare -> L_SQUARE_BRACKET CTE_INT . R_SQUARE_BRACKET

    R_SQUARE_BRACKET shift and go to state 88


state 72

    (35) bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .

    EOF             reduce using rule 35 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    FUNCION         reduce using rule 35 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    PRINCIPAL       reduce using rule 35 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    SINO            reduce using rule 35 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    ID              reduce using rule 35 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    REGRESA         reduce using rule 35 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    LECTURA         reduce using rule 35 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    ESCRIBE         reduce using rule 35 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    SI              reduce using rule 35 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    MIENTRAS        reduce using rule 35 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    DESDE           reduce using rule 35 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    R_CURLY_BRACKET reduce using rule 35 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)


state 73

    (36) bloquep -> estatuto bloquep .

    R_CURLY_BRACKET reduce using rule 36 (bloquep -> estatuto bloquep .)


state 74

    (46) asignacion -> ID operand_seen . dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON
    (48) dimId -> . is_array create_dim dim pop_array
    (49) dimId -> . is_array create_dim dim dim pop_array
    (50) dimId -> . empty
    (52) is_array -> .
    (128) empty -> .

    L_SQUARE_BRACKET reduce using rule 52 (is_array -> .)
    ASSIGN          reduce using rule 128 (empty -> .)

    dimId                          shift and go to state 89
    is_array                       shift and go to state 90
    empty                          shift and go to state 91

state 75

    (102) funcionVacia -> ID set_func_scope . L_PARENTHESIS llamadaFuncionp R_PARENTHESIS SEMICOLON

    L_PARENTHESIS   shift and go to state 92


state 76

    (104) regresa -> REGRESA L_PARENTHESIS . expresion R_PARENTHESIS SEMICOLON
    (57) expresion -> . relacional apply_operation_expresion expresionp
    (62) relacional -> . aritmetica apply_operation_relational relacionalp
    (71) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (76) factor -> . matriz apply_operation_factor factorp
    (82) matriz -> . cte matrizp
    (83) matriz -> . NOT operation_seen cte apply_not
    (90) cte -> . CTE_INT
    (91) cte -> . CTE_FLOAT
    (92) cte -> . CTE_CHAR
    (93) cte -> . llamadaFuncion
    (94) cte -> . ID operand_seen dimId
    (95) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (96) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    NOT             shift and go to state 100
    CTE_INT         shift and go to state 101
    CTE_FLOAT       shift and go to state 102
    CTE_CHAR        shift and go to state 103
    ID              shift and go to state 105
    L_PARENTHESIS   shift and go to state 93

    expresion                      shift and go to state 94
    relacional                     shift and go to state 95
    aritmetica                     shift and go to state 96
    factor                         shift and go to state 97
    matriz                         shift and go to state 98
    cte                            shift and go to state 99
    llamadaFuncion                 shift and go to state 104

state 77

    (105) lectura -> LECTURA L_PARENTHESIS . lecturap R_PARENTHESIS SEMICOLON
    (106) lecturap -> . ID operand_seen dimId gen_input lecturapp

    ID              shift and go to state 107

    lecturap                       shift and go to state 106

state 78

    (110) escritura -> ESCRIBE L_PARENTHESIS . escriturap R_PARENTHESIS SEMICOLON
    (111) escriturap -> . LETRERO gen_print escriturapp
    (112) escriturap -> . expresion gen_print escriturapp
    (57) expresion -> . relacional apply_operation_expresion expresionp
    (62) relacional -> . aritmetica apply_operation_relational relacionalp
    (71) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (76) factor -> . matriz apply_operation_factor factorp
    (82) matriz -> . cte matrizp
    (83) matriz -> . NOT operation_seen cte apply_not
    (90) cte -> . CTE_INT
    (91) cte -> . CTE_FLOAT
    (92) cte -> . CTE_CHAR
    (93) cte -> . llamadaFuncion
    (94) cte -> . ID operand_seen dimId
    (95) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (96) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    LETRERO         shift and go to state 109
    NOT             shift and go to state 100
    CTE_INT         shift and go to state 101
    CTE_FLOAT       shift and go to state 102
    CTE_CHAR        shift and go to state 103
    ID              shift and go to state 105
    L_PARENTHESIS   shift and go to state 93

    escriturap                     shift and go to state 108
    expresion                      shift and go to state 110
    relacional                     shift and go to state 95
    aritmetica                     shift and go to state 96
    factor                         shift and go to state 97
    matriz                         shift and go to state 98
    cte                            shift and go to state 99
    llamadaFuncion                 shift and go to state 104

state 79

    (116) decision -> SI L_PARENTHESIS . expresion R_PARENTHESIS jump_false HAZ bloque decisionp
    (57) expresion -> . relacional apply_operation_expresion expresionp
    (62) relacional -> . aritmetica apply_operation_relational relacionalp
    (71) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (76) factor -> . matriz apply_operation_factor factorp
    (82) matriz -> . cte matrizp
    (83) matriz -> . NOT operation_seen cte apply_not
    (90) cte -> . CTE_INT
    (91) cte -> . CTE_FLOAT
    (92) cte -> . CTE_CHAR
    (93) cte -> . llamadaFuncion
    (94) cte -> . ID operand_seen dimId
    (95) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (96) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    NOT             shift and go to state 100
    CTE_INT         shift and go to state 101
    CTE_FLOAT       shift and go to state 102
    CTE_CHAR        shift and go to state 103
    ID              shift and go to state 105
    L_PARENTHESIS   shift and go to state 93

    expresion                      shift and go to state 111
    relacional                     shift and go to state 95
    aritmetica                     shift and go to state 96
    factor                         shift and go to state 97
    matriz                         shift and go to state 98
    cte                            shift and go to state 99
    llamadaFuncion                 shift and go to state 104

state 80

    (122) cicloCondicional -> MIENTRAS jump_cycle . L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle

    L_PARENTHESIS   shift and go to state 112


state 81

    (125) cicloNoCondicional -> DESDE ID . operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle
    (47) operand_seen -> .

    ASSIGN          reduce using rule 47 (operand_seen -> .)
    L_SQUARE_BRACKET reduce using rule 47 (operand_seen -> .)

    operand_seen                   shift and go to state 113

state 82

    (25) funcionp -> tipoRetorno ID create_func_scope L_PARENTHESIS parametro R_PARENTHESIS var bloque . end_func funcion
    (27) end_func -> .

    FUNCION         reduce using rule 27 (end_func -> .)
    PRINCIPAL       reduce using rule 27 (end_func -> .)

    end_func                       shift and go to state 114

state 83

    (28) parametro -> tipo ID save_param parametrop .

    R_PARENTHESIS   reduce using rule 28 (parametro -> tipo ID save_param parametrop .)


state 84

    (31) parametrop -> COMMA . tipo ID save_param parametrop
    (20) tipo -> . INT
    (21) tipo -> . FLOAT
    (22) tipo -> . CHAR

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21

    tipo                           shift and go to state 115

state 85

    (32) parametrop -> empty .

    R_PARENTHESIS   reduce using rule 32 (parametrop -> empty .)


state 86

    (8) varp -> tipo tipo_seen COLON ID variable_seen varppp varpp delete_type . SEMICOLON varpppp

    SEMICOLON       shift and go to state 116


state 87

    (12) varpp -> COMMA ID . variable_seen varppp varpp
    (10) variable_seen -> .

    L_SQUARE_BRACKET reduce using rule 10 (variable_seen -> .)
    COMMA           reduce using rule 10 (variable_seen -> .)
    SEMICOLON       reduce using rule 10 (variable_seen -> .)

    variable_seen                  shift and go to state 117

state 88

    (19) dimDeclare -> L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET .

    L_SQUARE_BRACKET reduce using rule 19 (dimDeclare -> L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET .)
    COMMA           reduce using rule 19 (dimDeclare -> L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET .)
    SEMICOLON       reduce using rule 19 (dimDeclare -> L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET .)


state 89

    (46) asignacion -> ID operand_seen dimId . ASSIGN operation_seen expresion apply_operation_assign SEMICOLON

    ASSIGN          shift and go to state 118


state 90

    (48) dimId -> is_array . create_dim dim pop_array
    (49) dimId -> is_array . create_dim dim dim pop_array
    (54) create_dim -> .

    L_SQUARE_BRACKET reduce using rule 54 (create_dim -> .)

    create_dim                     shift and go to state 119

state 91

    (50) dimId -> empty .

    ASSIGN          reduce using rule 50 (dimId -> empty .)
    DETERMINANT     reduce using rule 50 (dimId -> empty .)
    TRANSPOSED      reduce using rule 50 (dimId -> empty .)
    INVERSE         reduce using rule 50 (dimId -> empty .)
    MULTIPLY        reduce using rule 50 (dimId -> empty .)
    DIVIDE          reduce using rule 50 (dimId -> empty .)
    SUM             reduce using rule 50 (dimId -> empty .)
    SUBTRACT        reduce using rule 50 (dimId -> empty .)
    EQUALS          reduce using rule 50 (dimId -> empty .)
    NOT_EQUAL       reduce using rule 50 (dimId -> empty .)
    LESS_THAN       reduce using rule 50 (dimId -> empty .)
    LESS_THAN_EQUAL reduce using rule 50 (dimId -> empty .)
    GREATER_THAN    reduce using rule 50 (dimId -> empty .)
    GREATER_THAN_EQUAL reduce using rule 50 (dimId -> empty .)
    AND             reduce using rule 50 (dimId -> empty .)
    OR              reduce using rule 50 (dimId -> empty .)
    R_PARENTHESIS   reduce using rule 50 (dimId -> empty .)
    COMMA           reduce using rule 50 (dimId -> empty .)
    SEMICOLON       reduce using rule 50 (dimId -> empty .)
    R_SQUARE_BRACKET reduce using rule 50 (dimId -> empty .)
    HASTA           reduce using rule 50 (dimId -> empty .)
    HACER           reduce using rule 50 (dimId -> empty .)


state 92

    (102) funcionVacia -> ID set_func_scope L_PARENTHESIS . llamadaFuncionp R_PARENTHESIS SEMICOLON
    (97) llamadaFuncionp -> . expresion verify_parameter llamadaFuncionpp
    (98) llamadaFuncionp -> . empty
    (57) expresion -> . relacional apply_operation_expresion expresionp
    (128) empty -> .
    (62) relacional -> . aritmetica apply_operation_relational relacionalp
    (71) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (76) factor -> . matriz apply_operation_factor factorp
    (82) matriz -> . cte matrizp
    (83) matriz -> . NOT operation_seen cte apply_not
    (90) cte -> . CTE_INT
    (91) cte -> . CTE_FLOAT
    (92) cte -> . CTE_CHAR
    (93) cte -> . llamadaFuncion
    (94) cte -> . ID operand_seen dimId
    (95) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (96) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    R_PARENTHESIS   reduce using rule 128 (empty -> .)
    NOT             shift and go to state 100
    CTE_INT         shift and go to state 101
    CTE_FLOAT       shift and go to state 102
    CTE_CHAR        shift and go to state 103
    ID              shift and go to state 105
    L_PARENTHESIS   shift and go to state 93

    llamadaFuncionp                shift and go to state 120
    expresion                      shift and go to state 121
    empty                          shift and go to state 122
    relacional                     shift and go to state 95
    aritmetica                     shift and go to state 96
    factor                         shift and go to state 97
    matriz                         shift and go to state 98
    cte                            shift and go to state 99
    llamadaFuncion                 shift and go to state 104

state 93

    (95) cte -> L_PARENTHESIS . operation_seen expresion R_PARENTHESIS operation_seen
    (81) operation_seen -> .

    NOT             reduce using rule 81 (operation_seen -> .)
    CTE_INT         reduce using rule 81 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 81 (operation_seen -> .)
    CTE_CHAR        reduce using rule 81 (operation_seen -> .)
    ID              reduce using rule 81 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 81 (operation_seen -> .)

    operation_seen                 shift and go to state 123

state 94

    (104) regresa -> REGRESA L_PARENTHESIS expresion . R_PARENTHESIS SEMICOLON

    R_PARENTHESIS   shift and go to state 124


state 95

    (57) expresion -> relacional . apply_operation_expresion expresionp
    (61) apply_operation_expresion -> .

    AND             reduce using rule 61 (apply_operation_expresion -> .)
    OR              reduce using rule 61 (apply_operation_expresion -> .)
    R_PARENTHESIS   reduce using rule 61 (apply_operation_expresion -> .)
    COMMA           reduce using rule 61 (apply_operation_expresion -> .)
    SEMICOLON       reduce using rule 61 (apply_operation_expresion -> .)
    R_SQUARE_BRACKET reduce using rule 61 (apply_operation_expresion -> .)
    HASTA           reduce using rule 61 (apply_operation_expresion -> .)
    HACER           reduce using rule 61 (apply_operation_expresion -> .)

    apply_operation_expresion      shift and go to state 125

state 96

    (62) relacional -> aritmetica . apply_operation_relational relacionalp
    (70) apply_operation_relational -> .

    EQUALS          reduce using rule 70 (apply_operation_relational -> .)
    NOT_EQUAL       reduce using rule 70 (apply_operation_relational -> .)
    LESS_THAN       reduce using rule 70 (apply_operation_relational -> .)
    LESS_THAN_EQUAL reduce using rule 70 (apply_operation_relational -> .)
    GREATER_THAN    reduce using rule 70 (apply_operation_relational -> .)
    GREATER_THAN_EQUAL reduce using rule 70 (apply_operation_relational -> .)
    AND             reduce using rule 70 (apply_operation_relational -> .)
    OR              reduce using rule 70 (apply_operation_relational -> .)
    R_PARENTHESIS   reduce using rule 70 (apply_operation_relational -> .)
    COMMA           reduce using rule 70 (apply_operation_relational -> .)
    SEMICOLON       reduce using rule 70 (apply_operation_relational -> .)
    R_SQUARE_BRACKET reduce using rule 70 (apply_operation_relational -> .)
    HASTA           reduce using rule 70 (apply_operation_relational -> .)
    HACER           reduce using rule 70 (apply_operation_relational -> .)

    apply_operation_relational     shift and go to state 126

state 97

    (71) aritmetica -> factor . apply_operation_aritmetica aritmeticap
    (75) apply_operation_aritmetica -> .

    SUM             reduce using rule 75 (apply_operation_aritmetica -> .)
    SUBTRACT        reduce using rule 75 (apply_operation_aritmetica -> .)
    EQUALS          reduce using rule 75 (apply_operation_aritmetica -> .)
    NOT_EQUAL       reduce using rule 75 (apply_operation_aritmetica -> .)
    LESS_THAN       reduce using rule 75 (apply_operation_aritmetica -> .)
    LESS_THAN_EQUAL reduce using rule 75 (apply_operation_aritmetica -> .)
    GREATER_THAN    reduce using rule 75 (apply_operation_aritmetica -> .)
    GREATER_THAN_EQUAL reduce using rule 75 (apply_operation_aritmetica -> .)
    AND             reduce using rule 75 (apply_operation_aritmetica -> .)
    OR              reduce using rule 75 (apply_operation_aritmetica -> .)
    R_PARENTHESIS   reduce using rule 75 (apply_operation_aritmetica -> .)
    COMMA           reduce using rule 75 (apply_operation_aritmetica -> .)
    SEMICOLON       reduce using rule 75 (apply_operation_aritmetica -> .)
    R_SQUARE_BRACKET reduce using rule 75 (apply_operation_aritmetica -> .)
    HASTA           reduce using rule 75 (apply_operation_aritmetica -> .)
    HACER           reduce using rule 75 (apply_operation_aritmetica -> .)

    apply_operation_aritmetica     shift and go to state 127

state 98

    (76) factor -> matriz . apply_operation_factor factorp
    (80) apply_operation_factor -> .

    MULTIPLY        reduce using rule 80 (apply_operation_factor -> .)
    DIVIDE          reduce using rule 80 (apply_operation_factor -> .)
    SUM             reduce using rule 80 (apply_operation_factor -> .)
    SUBTRACT        reduce using rule 80 (apply_operation_factor -> .)
    EQUALS          reduce using rule 80 (apply_operation_factor -> .)
    NOT_EQUAL       reduce using rule 80 (apply_operation_factor -> .)
    LESS_THAN       reduce using rule 80 (apply_operation_factor -> .)
    LESS_THAN_EQUAL reduce using rule 80 (apply_operation_factor -> .)
    GREATER_THAN    reduce using rule 80 (apply_operation_factor -> .)
    GREATER_THAN_EQUAL reduce using rule 80 (apply_operation_factor -> .)
    AND             reduce using rule 80 (apply_operation_factor -> .)
    OR              reduce using rule 80 (apply_operation_factor -> .)
    R_PARENTHESIS   reduce using rule 80 (apply_operation_factor -> .)
    COMMA           reduce using rule 80 (apply_operation_factor -> .)
    SEMICOLON       reduce using rule 80 (apply_operation_factor -> .)
    R_SQUARE_BRACKET reduce using rule 80 (apply_operation_factor -> .)
    HASTA           reduce using rule 80 (apply_operation_factor -> .)
    HACER           reduce using rule 80 (apply_operation_factor -> .)

    apply_operation_factor         shift and go to state 128

state 99

    (82) matriz -> cte . matrizp
    (85) matrizp -> . DETERMINANT operation_seen apply_mat
    (86) matrizp -> . TRANSPOSED operation_seen apply_mat
    (87) matrizp -> . INVERSE operation_seen apply_mat
    (88) matrizp -> . empty
    (128) empty -> .

    DETERMINANT     shift and go to state 130
    TRANSPOSED      shift and go to state 131
    INVERSE         shift and go to state 132
    MULTIPLY        reduce using rule 128 (empty -> .)
    DIVIDE          reduce using rule 128 (empty -> .)
    SUM             reduce using rule 128 (empty -> .)
    SUBTRACT        reduce using rule 128 (empty -> .)
    EQUALS          reduce using rule 128 (empty -> .)
    NOT_EQUAL       reduce using rule 128 (empty -> .)
    LESS_THAN       reduce using rule 128 (empty -> .)
    LESS_THAN_EQUAL reduce using rule 128 (empty -> .)
    GREATER_THAN    reduce using rule 128 (empty -> .)
    GREATER_THAN_EQUAL reduce using rule 128 (empty -> .)
    AND             reduce using rule 128 (empty -> .)
    OR              reduce using rule 128 (empty -> .)
    R_PARENTHESIS   reduce using rule 128 (empty -> .)
    COMMA           reduce using rule 128 (empty -> .)
    SEMICOLON       reduce using rule 128 (empty -> .)
    R_SQUARE_BRACKET reduce using rule 128 (empty -> .)
    HASTA           reduce using rule 128 (empty -> .)
    HACER           reduce using rule 128 (empty -> .)

    matrizp                        shift and go to state 129
    empty                          shift and go to state 133

state 100

    (83) matriz -> NOT . operation_seen cte apply_not
    (81) operation_seen -> .

    CTE_INT         reduce using rule 81 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 81 (operation_seen -> .)
    CTE_CHAR        reduce using rule 81 (operation_seen -> .)
    ID              reduce using rule 81 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 81 (operation_seen -> .)

    operation_seen                 shift and go to state 134

state 101

    (90) cte -> CTE_INT .

    DETERMINANT     reduce using rule 90 (cte -> CTE_INT .)
    TRANSPOSED      reduce using rule 90 (cte -> CTE_INT .)
    INVERSE         reduce using rule 90 (cte -> CTE_INT .)
    MULTIPLY        reduce using rule 90 (cte -> CTE_INT .)
    DIVIDE          reduce using rule 90 (cte -> CTE_INT .)
    SUM             reduce using rule 90 (cte -> CTE_INT .)
    SUBTRACT        reduce using rule 90 (cte -> CTE_INT .)
    EQUALS          reduce using rule 90 (cte -> CTE_INT .)
    NOT_EQUAL       reduce using rule 90 (cte -> CTE_INT .)
    LESS_THAN       reduce using rule 90 (cte -> CTE_INT .)
    LESS_THAN_EQUAL reduce using rule 90 (cte -> CTE_INT .)
    GREATER_THAN    reduce using rule 90 (cte -> CTE_INT .)
    GREATER_THAN_EQUAL reduce using rule 90 (cte -> CTE_INT .)
    AND             reduce using rule 90 (cte -> CTE_INT .)
    OR              reduce using rule 90 (cte -> CTE_INT .)
    R_PARENTHESIS   reduce using rule 90 (cte -> CTE_INT .)
    COMMA           reduce using rule 90 (cte -> CTE_INT .)
    SEMICOLON       reduce using rule 90 (cte -> CTE_INT .)
    R_SQUARE_BRACKET reduce using rule 90 (cte -> CTE_INT .)
    HASTA           reduce using rule 90 (cte -> CTE_INT .)
    HACER           reduce using rule 90 (cte -> CTE_INT .)


state 102

    (91) cte -> CTE_FLOAT .

    DETERMINANT     reduce using rule 91 (cte -> CTE_FLOAT .)
    TRANSPOSED      reduce using rule 91 (cte -> CTE_FLOAT .)
    INVERSE         reduce using rule 91 (cte -> CTE_FLOAT .)
    MULTIPLY        reduce using rule 91 (cte -> CTE_FLOAT .)
    DIVIDE          reduce using rule 91 (cte -> CTE_FLOAT .)
    SUM             reduce using rule 91 (cte -> CTE_FLOAT .)
    SUBTRACT        reduce using rule 91 (cte -> CTE_FLOAT .)
    EQUALS          reduce using rule 91 (cte -> CTE_FLOAT .)
    NOT_EQUAL       reduce using rule 91 (cte -> CTE_FLOAT .)
    LESS_THAN       reduce using rule 91 (cte -> CTE_FLOAT .)
    LESS_THAN_EQUAL reduce using rule 91 (cte -> CTE_FLOAT .)
    GREATER_THAN    reduce using rule 91 (cte -> CTE_FLOAT .)
    GREATER_THAN_EQUAL reduce using rule 91 (cte -> CTE_FLOAT .)
    AND             reduce using rule 91 (cte -> CTE_FLOAT .)
    OR              reduce using rule 91 (cte -> CTE_FLOAT .)
    R_PARENTHESIS   reduce using rule 91 (cte -> CTE_FLOAT .)
    COMMA           reduce using rule 91 (cte -> CTE_FLOAT .)
    SEMICOLON       reduce using rule 91 (cte -> CTE_FLOAT .)
    R_SQUARE_BRACKET reduce using rule 91 (cte -> CTE_FLOAT .)
    HASTA           reduce using rule 91 (cte -> CTE_FLOAT .)
    HACER           reduce using rule 91 (cte -> CTE_FLOAT .)


state 103

    (92) cte -> CTE_CHAR .

    DETERMINANT     reduce using rule 92 (cte -> CTE_CHAR .)
    TRANSPOSED      reduce using rule 92 (cte -> CTE_CHAR .)
    INVERSE         reduce using rule 92 (cte -> CTE_CHAR .)
    MULTIPLY        reduce using rule 92 (cte -> CTE_CHAR .)
    DIVIDE          reduce using rule 92 (cte -> CTE_CHAR .)
    SUM             reduce using rule 92 (cte -> CTE_CHAR .)
    SUBTRACT        reduce using rule 92 (cte -> CTE_CHAR .)
    EQUALS          reduce using rule 92 (cte -> CTE_CHAR .)
    NOT_EQUAL       reduce using rule 92 (cte -> CTE_CHAR .)
    LESS_THAN       reduce using rule 92 (cte -> CTE_CHAR .)
    LESS_THAN_EQUAL reduce using rule 92 (cte -> CTE_CHAR .)
    GREATER_THAN    reduce using rule 92 (cte -> CTE_CHAR .)
    GREATER_THAN_EQUAL reduce using rule 92 (cte -> CTE_CHAR .)
    AND             reduce using rule 92 (cte -> CTE_CHAR .)
    OR              reduce using rule 92 (cte -> CTE_CHAR .)
    R_PARENTHESIS   reduce using rule 92 (cte -> CTE_CHAR .)
    COMMA           reduce using rule 92 (cte -> CTE_CHAR .)
    SEMICOLON       reduce using rule 92 (cte -> CTE_CHAR .)
    R_SQUARE_BRACKET reduce using rule 92 (cte -> CTE_CHAR .)
    HASTA           reduce using rule 92 (cte -> CTE_CHAR .)
    HACER           reduce using rule 92 (cte -> CTE_CHAR .)


state 104

    (93) cte -> llamadaFuncion .

    DETERMINANT     reduce using rule 93 (cte -> llamadaFuncion .)
    TRANSPOSED      reduce using rule 93 (cte -> llamadaFuncion .)
    INVERSE         reduce using rule 93 (cte -> llamadaFuncion .)
    MULTIPLY        reduce using rule 93 (cte -> llamadaFuncion .)
    DIVIDE          reduce using rule 93 (cte -> llamadaFuncion .)
    SUM             reduce using rule 93 (cte -> llamadaFuncion .)
    SUBTRACT        reduce using rule 93 (cte -> llamadaFuncion .)
    EQUALS          reduce using rule 93 (cte -> llamadaFuncion .)
    NOT_EQUAL       reduce using rule 93 (cte -> llamadaFuncion .)
    LESS_THAN       reduce using rule 93 (cte -> llamadaFuncion .)
    LESS_THAN_EQUAL reduce using rule 93 (cte -> llamadaFuncion .)
    GREATER_THAN    reduce using rule 93 (cte -> llamadaFuncion .)
    GREATER_THAN_EQUAL reduce using rule 93 (cte -> llamadaFuncion .)
    AND             reduce using rule 93 (cte -> llamadaFuncion .)
    OR              reduce using rule 93 (cte -> llamadaFuncion .)
    R_PARENTHESIS   reduce using rule 93 (cte -> llamadaFuncion .)
    COMMA           reduce using rule 93 (cte -> llamadaFuncion .)
    SEMICOLON       reduce using rule 93 (cte -> llamadaFuncion .)
    R_SQUARE_BRACKET reduce using rule 93 (cte -> llamadaFuncion .)
    HASTA           reduce using rule 93 (cte -> llamadaFuncion .)
    HACER           reduce using rule 93 (cte -> llamadaFuncion .)


state 105

    (94) cte -> ID . operand_seen dimId
    (96) llamadaFuncion -> ID . set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen
    (47) operand_seen -> .
    (103) set_func_scope -> .

    L_SQUARE_BRACKET reduce using rule 47 (operand_seen -> .)
    DETERMINANT     reduce using rule 47 (operand_seen -> .)
    TRANSPOSED      reduce using rule 47 (operand_seen -> .)
    INVERSE         reduce using rule 47 (operand_seen -> .)
    MULTIPLY        reduce using rule 47 (operand_seen -> .)
    DIVIDE          reduce using rule 47 (operand_seen -> .)
    SUM             reduce using rule 47 (operand_seen -> .)
    SUBTRACT        reduce using rule 47 (operand_seen -> .)
    EQUALS          reduce using rule 47 (operand_seen -> .)
    NOT_EQUAL       reduce using rule 47 (operand_seen -> .)
    LESS_THAN       reduce using rule 47 (operand_seen -> .)
    LESS_THAN_EQUAL reduce using rule 47 (operand_seen -> .)
    GREATER_THAN    reduce using rule 47 (operand_seen -> .)
    GREATER_THAN_EQUAL reduce using rule 47 (operand_seen -> .)
    AND             reduce using rule 47 (operand_seen -> .)
    OR              reduce using rule 47 (operand_seen -> .)
    R_PARENTHESIS   reduce using rule 47 (operand_seen -> .)
    COMMA           reduce using rule 47 (operand_seen -> .)
    SEMICOLON       reduce using rule 47 (operand_seen -> .)
    R_SQUARE_BRACKET reduce using rule 47 (operand_seen -> .)
    HASTA           reduce using rule 47 (operand_seen -> .)
    HACER           reduce using rule 47 (operand_seen -> .)
    L_PARENTHESIS   reduce using rule 103 (set_func_scope -> .)

    operand_seen                   shift and go to state 135
    set_func_scope                 shift and go to state 136

state 106

    (105) lectura -> LECTURA L_PARENTHESIS lecturap . R_PARENTHESIS SEMICOLON

    R_PARENTHESIS   shift and go to state 137


state 107

    (106) lecturap -> ID . operand_seen dimId gen_input lecturapp
    (47) operand_seen -> .

    COMMA           reduce using rule 47 (operand_seen -> .)
    L_SQUARE_BRACKET reduce using rule 47 (operand_seen -> .)
    R_PARENTHESIS   reduce using rule 47 (operand_seen -> .)

    operand_seen                   shift and go to state 138

state 108

    (110) escritura -> ESCRIBE L_PARENTHESIS escriturap . R_PARENTHESIS SEMICOLON

    R_PARENTHESIS   shift and go to state 139


state 109

    (111) escriturap -> LETRERO . gen_print escriturapp
    (113) gen_print -> .

    COMMA           reduce using rule 113 (gen_print -> .)
    R_PARENTHESIS   reduce using rule 113 (gen_print -> .)

    gen_print                      shift and go to state 140

state 110

    (112) escriturap -> expresion . gen_print escriturapp
    (113) gen_print -> .

    COMMA           reduce using rule 113 (gen_print -> .)
    R_PARENTHESIS   reduce using rule 113 (gen_print -> .)

    gen_print                      shift and go to state 141

state 111

    (116) decision -> SI L_PARENTHESIS expresion . R_PARENTHESIS jump_false HAZ bloque decisionp

    R_PARENTHESIS   shift and go to state 142


state 112

    (122) cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS . expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle
    (57) expresion -> . relacional apply_operation_expresion expresionp
    (62) relacional -> . aritmetica apply_operation_relational relacionalp
    (71) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (76) factor -> . matriz apply_operation_factor factorp
    (82) matriz -> . cte matrizp
    (83) matriz -> . NOT operation_seen cte apply_not
    (90) cte -> . CTE_INT
    (91) cte -> . CTE_FLOAT
    (92) cte -> . CTE_CHAR
    (93) cte -> . llamadaFuncion
    (94) cte -> . ID operand_seen dimId
    (95) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (96) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    NOT             shift and go to state 100
    CTE_INT         shift and go to state 101
    CTE_FLOAT       shift and go to state 102
    CTE_CHAR        shift and go to state 103
    ID              shift and go to state 105
    L_PARENTHESIS   shift and go to state 93

    expresion                      shift and go to state 143
    relacional                     shift and go to state 95
    aritmetica                     shift and go to state 96
    factor                         shift and go to state 97
    matriz                         shift and go to state 98
    cte                            shift and go to state 99
    llamadaFuncion                 shift and go to state 104

state 113

    (125) cicloNoCondicional -> DESDE ID operand_seen . dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle
    (48) dimId -> . is_array create_dim dim pop_array
    (49) dimId -> . is_array create_dim dim dim pop_array
    (50) dimId -> . empty
    (52) is_array -> .
    (128) empty -> .

    L_SQUARE_BRACKET reduce using rule 52 (is_array -> .)
    ASSIGN          reduce using rule 128 (empty -> .)

    dimId                          shift and go to state 144
    is_array                       shift and go to state 90
    empty                          shift and go to state 91

state 114

    (25) funcionp -> tipoRetorno ID create_func_scope L_PARENTHESIS parametro R_PARENTHESIS var bloque end_func . funcion
    (23) funcion -> . FUNCION funcionp
    (24) funcion -> . empty
    (128) empty -> .

    FUNCION         shift and go to state 11
    PRINCIPAL       reduce using rule 128 (empty -> .)

    funcion                        shift and go to state 145
    empty                          shift and go to state 12

state 115

    (31) parametrop -> COMMA tipo . ID save_param parametrop

    ID              shift and go to state 146


state 116

    (8) varp -> tipo tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON . varpppp
    (17) varpppp -> . varp
    (18) varpppp -> . empty
    (8) varp -> . tipo tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp
    (128) empty -> .
    (20) tipo -> . INT
    (21) tipo -> . FLOAT
    (22) tipo -> . CHAR

    FUNCION         reduce using rule 128 (empty -> .)
    PRINCIPAL       reduce using rule 128 (empty -> .)
    L_CURLY_BRACKET reduce using rule 128 (empty -> .)
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    CHAR            shift and go to state 21

    tipo                           shift and go to state 23
    varpppp                        shift and go to state 147
    varp                           shift and go to state 148
    empty                          shift and go to state 149

state 117

    (12) varpp -> COMMA ID variable_seen . varppp varpp
    (14) varppp -> . dimDeclare
    (15) varppp -> . dimDeclare dimDeclare
    (16) varppp -> . empty
    (19) dimDeclare -> . L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET
    (128) empty -> .

    L_SQUARE_BRACKET shift and go to state 45
    COMMA           reduce using rule 128 (empty -> .)
    SEMICOLON       reduce using rule 128 (empty -> .)

    varppp                         shift and go to state 150
    dimDeclare                     shift and go to state 43
    empty                          shift and go to state 44

state 118

    (46) asignacion -> ID operand_seen dimId ASSIGN . operation_seen expresion apply_operation_assign SEMICOLON
    (81) operation_seen -> .

    NOT             reduce using rule 81 (operation_seen -> .)
    CTE_INT         reduce using rule 81 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 81 (operation_seen -> .)
    CTE_CHAR        reduce using rule 81 (operation_seen -> .)
    ID              reduce using rule 81 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 81 (operation_seen -> .)

    operation_seen                 shift and go to state 151

state 119

    (48) dimId -> is_array create_dim . dim pop_array
    (49) dimId -> is_array create_dim . dim dim pop_array
    (53) dim -> . L_SQUARE_BRACKET bracket_seen expresion R_SQUARE_BRACKET bracket_seen

    L_SQUARE_BRACKET shift and go to state 153

    dim                            shift and go to state 152

state 120

    (102) funcionVacia -> ID set_func_scope L_PARENTHESIS llamadaFuncionp . R_PARENTHESIS SEMICOLON

    R_PARENTHESIS   shift and go to state 154


state 121

    (97) llamadaFuncionp -> expresion . verify_parameter llamadaFuncionpp
    (101) verify_parameter -> .

    COMMA           reduce using rule 101 (verify_parameter -> .)
    R_PARENTHESIS   reduce using rule 101 (verify_parameter -> .)

    verify_parameter               shift and go to state 155

state 122

    (98) llamadaFuncionp -> empty .

    R_PARENTHESIS   reduce using rule 98 (llamadaFuncionp -> empty .)


state 123

    (95) cte -> L_PARENTHESIS operation_seen . expresion R_PARENTHESIS operation_seen
    (57) expresion -> . relacional apply_operation_expresion expresionp
    (62) relacional -> . aritmetica apply_operation_relational relacionalp
    (71) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (76) factor -> . matriz apply_operation_factor factorp
    (82) matriz -> . cte matrizp
    (83) matriz -> . NOT operation_seen cte apply_not
    (90) cte -> . CTE_INT
    (91) cte -> . CTE_FLOAT
    (92) cte -> . CTE_CHAR
    (93) cte -> . llamadaFuncion
    (94) cte -> . ID operand_seen dimId
    (95) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (96) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    NOT             shift and go to state 100
    CTE_INT         shift and go to state 101
    CTE_FLOAT       shift and go to state 102
    CTE_CHAR        shift and go to state 103
    ID              shift and go to state 105
    L_PARENTHESIS   shift and go to state 93

    expresion                      shift and go to state 156
    relacional                     shift and go to state 95
    aritmetica                     shift and go to state 96
    factor                         shift and go to state 97
    matriz                         shift and go to state 98
    cte                            shift and go to state 99
    llamadaFuncion                 shift and go to state 104

state 124

    (104) regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 157


state 125

    (57) expresion -> relacional apply_operation_expresion . expresionp
    (58) expresionp -> . AND operation_seen expresion
    (59) expresionp -> . OR operation_seen expresion
    (60) expresionp -> . empty
    (128) empty -> .

    AND             shift and go to state 159
    OR              shift and go to state 160
    R_PARENTHESIS   reduce using rule 128 (empty -> .)
    COMMA           reduce using rule 128 (empty -> .)
    SEMICOLON       reduce using rule 128 (empty -> .)
    R_SQUARE_BRACKET reduce using rule 128 (empty -> .)
    HASTA           reduce using rule 128 (empty -> .)
    HACER           reduce using rule 128 (empty -> .)

    expresionp                     shift and go to state 158
    empty                          shift and go to state 161

state 126

    (62) relacional -> aritmetica apply_operation_relational . relacionalp
    (63) relacionalp -> . EQUALS operation_seen relacional
    (64) relacionalp -> . NOT_EQUAL operation_seen relacional
    (65) relacionalp -> . LESS_THAN operation_seen relacional
    (66) relacionalp -> . LESS_THAN_EQUAL operation_seen relacional
    (67) relacionalp -> . GREATER_THAN operation_seen relacional
    (68) relacionalp -> . GREATER_THAN_EQUAL operation_seen relacional
    (69) relacionalp -> . empty
    (128) empty -> .

    EQUALS          shift and go to state 163
    NOT_EQUAL       shift and go to state 164
    LESS_THAN       shift and go to state 165
    LESS_THAN_EQUAL shift and go to state 166
    GREATER_THAN    shift and go to state 167
    GREATER_THAN_EQUAL shift and go to state 168
    AND             reduce using rule 128 (empty -> .)
    OR              reduce using rule 128 (empty -> .)
    R_PARENTHESIS   reduce using rule 128 (empty -> .)
    COMMA           reduce using rule 128 (empty -> .)
    SEMICOLON       reduce using rule 128 (empty -> .)
    R_SQUARE_BRACKET reduce using rule 128 (empty -> .)
    HASTA           reduce using rule 128 (empty -> .)
    HACER           reduce using rule 128 (empty -> .)

    relacionalp                    shift and go to state 162
    empty                          shift and go to state 169

state 127

    (71) aritmetica -> factor apply_operation_aritmetica . aritmeticap
    (72) aritmeticap -> . SUM operation_seen aritmetica
    (73) aritmeticap -> . SUBTRACT operation_seen aritmetica
    (74) aritmeticap -> . empty
    (128) empty -> .

    SUM             shift and go to state 171
    SUBTRACT        shift and go to state 172
    EQUALS          reduce using rule 128 (empty -> .)
    NOT_EQUAL       reduce using rule 128 (empty -> .)
    LESS_THAN       reduce using rule 128 (empty -> .)
    LESS_THAN_EQUAL reduce using rule 128 (empty -> .)
    GREATER_THAN    reduce using rule 128 (empty -> .)
    GREATER_THAN_EQUAL reduce using rule 128 (empty -> .)
    AND             reduce using rule 128 (empty -> .)
    OR              reduce using rule 128 (empty -> .)
    R_PARENTHESIS   reduce using rule 128 (empty -> .)
    COMMA           reduce using rule 128 (empty -> .)
    SEMICOLON       reduce using rule 128 (empty -> .)
    R_SQUARE_BRACKET reduce using rule 128 (empty -> .)
    HASTA           reduce using rule 128 (empty -> .)
    HACER           reduce using rule 128 (empty -> .)

    aritmeticap                    shift and go to state 170
    empty                          shift and go to state 173

state 128

    (76) factor -> matriz apply_operation_factor . factorp
    (77) factorp -> . MULTIPLY operation_seen factor
    (78) factorp -> . DIVIDE operation_seen factor
    (79) factorp -> . empty
    (128) empty -> .

    MULTIPLY        shift and go to state 175
    DIVIDE          shift and go to state 176
    SUM             reduce using rule 128 (empty -> .)
    SUBTRACT        reduce using rule 128 (empty -> .)
    EQUALS          reduce using rule 128 (empty -> .)
    NOT_EQUAL       reduce using rule 128 (empty -> .)
    LESS_THAN       reduce using rule 128 (empty -> .)
    LESS_THAN_EQUAL reduce using rule 128 (empty -> .)
    GREATER_THAN    reduce using rule 128 (empty -> .)
    GREATER_THAN_EQUAL reduce using rule 128 (empty -> .)
    AND             reduce using rule 128 (empty -> .)
    OR              reduce using rule 128 (empty -> .)
    R_PARENTHESIS   reduce using rule 128 (empty -> .)
    COMMA           reduce using rule 128 (empty -> .)
    SEMICOLON       reduce using rule 128 (empty -> .)
    R_SQUARE_BRACKET reduce using rule 128 (empty -> .)
    HASTA           reduce using rule 128 (empty -> .)
    HACER           reduce using rule 128 (empty -> .)

    factorp                        shift and go to state 174
    empty                          shift and go to state 177

state 129

    (82) matriz -> cte matrizp .

    MULTIPLY        reduce using rule 82 (matriz -> cte matrizp .)
    DIVIDE          reduce using rule 82 (matriz -> cte matrizp .)
    SUM             reduce using rule 82 (matriz -> cte matrizp .)
    SUBTRACT        reduce using rule 82 (matriz -> cte matrizp .)
    EQUALS          reduce using rule 82 (matriz -> cte matrizp .)
    NOT_EQUAL       reduce using rule 82 (matriz -> cte matrizp .)
    LESS_THAN       reduce using rule 82 (matriz -> cte matrizp .)
    LESS_THAN_EQUAL reduce using rule 82 (matriz -> cte matrizp .)
    GREATER_THAN    reduce using rule 82 (matriz -> cte matrizp .)
    GREATER_THAN_EQUAL reduce using rule 82 (matriz -> cte matrizp .)
    AND             reduce using rule 82 (matriz -> cte matrizp .)
    OR              reduce using rule 82 (matriz -> cte matrizp .)
    R_PARENTHESIS   reduce using rule 82 (matriz -> cte matrizp .)
    COMMA           reduce using rule 82 (matriz -> cte matrizp .)
    SEMICOLON       reduce using rule 82 (matriz -> cte matrizp .)
    R_SQUARE_BRACKET reduce using rule 82 (matriz -> cte matrizp .)
    HASTA           reduce using rule 82 (matriz -> cte matrizp .)
    HACER           reduce using rule 82 (matriz -> cte matrizp .)


state 130

    (85) matrizp -> DETERMINANT . operation_seen apply_mat
    (81) operation_seen -> .

    MULTIPLY        reduce using rule 81 (operation_seen -> .)
    DIVIDE          reduce using rule 81 (operation_seen -> .)
    SUM             reduce using rule 81 (operation_seen -> .)
    SUBTRACT        reduce using rule 81 (operation_seen -> .)
    EQUALS          reduce using rule 81 (operation_seen -> .)
    NOT_EQUAL       reduce using rule 81 (operation_seen -> .)
    LESS_THAN       reduce using rule 81 (operation_seen -> .)
    LESS_THAN_EQUAL reduce using rule 81 (operation_seen -> .)
    GREATER_THAN    reduce using rule 81 (operation_seen -> .)
    GREATER_THAN_EQUAL reduce using rule 81 (operation_seen -> .)
    AND             reduce using rule 81 (operation_seen -> .)
    OR              reduce using rule 81 (operation_seen -> .)
    R_PARENTHESIS   reduce using rule 81 (operation_seen -> .)
    COMMA           reduce using rule 81 (operation_seen -> .)
    SEMICOLON       reduce using rule 81 (operation_seen -> .)
    R_SQUARE_BRACKET reduce using rule 81 (operation_seen -> .)
    HASTA           reduce using rule 81 (operation_seen -> .)
    HACER           reduce using rule 81 (operation_seen -> .)

    operation_seen                 shift and go to state 178

state 131

    (86) matrizp -> TRANSPOSED . operation_seen apply_mat
    (81) operation_seen -> .

    MULTIPLY        reduce using rule 81 (operation_seen -> .)
    DIVIDE          reduce using rule 81 (operation_seen -> .)
    SUM             reduce using rule 81 (operation_seen -> .)
    SUBTRACT        reduce using rule 81 (operation_seen -> .)
    EQUALS          reduce using rule 81 (operation_seen -> .)
    NOT_EQUAL       reduce using rule 81 (operation_seen -> .)
    LESS_THAN       reduce using rule 81 (operation_seen -> .)
    LESS_THAN_EQUAL reduce using rule 81 (operation_seen -> .)
    GREATER_THAN    reduce using rule 81 (operation_seen -> .)
    GREATER_THAN_EQUAL reduce using rule 81 (operation_seen -> .)
    AND             reduce using rule 81 (operation_seen -> .)
    OR              reduce using rule 81 (operation_seen -> .)
    R_PARENTHESIS   reduce using rule 81 (operation_seen -> .)
    COMMA           reduce using rule 81 (operation_seen -> .)
    SEMICOLON       reduce using rule 81 (operation_seen -> .)
    R_SQUARE_BRACKET reduce using rule 81 (operation_seen -> .)
    HASTA           reduce using rule 81 (operation_seen -> .)
    HACER           reduce using rule 81 (operation_seen -> .)

    operation_seen                 shift and go to state 179

state 132

    (87) matrizp -> INVERSE . operation_seen apply_mat
    (81) operation_seen -> .

    MULTIPLY        reduce using rule 81 (operation_seen -> .)
    DIVIDE          reduce using rule 81 (operation_seen -> .)
    SUM             reduce using rule 81 (operation_seen -> .)
    SUBTRACT        reduce using rule 81 (operation_seen -> .)
    EQUALS          reduce using rule 81 (operation_seen -> .)
    NOT_EQUAL       reduce using rule 81 (operation_seen -> .)
    LESS_THAN       reduce using rule 81 (operation_seen -> .)
    LESS_THAN_EQUAL reduce using rule 81 (operation_seen -> .)
    GREATER_THAN    reduce using rule 81 (operation_seen -> .)
    GREATER_THAN_EQUAL reduce using rule 81 (operation_seen -> .)
    AND             reduce using rule 81 (operation_seen -> .)
    OR              reduce using rule 81 (operation_seen -> .)
    R_PARENTHESIS   reduce using rule 81 (operation_seen -> .)
    COMMA           reduce using rule 81 (operation_seen -> .)
    SEMICOLON       reduce using rule 81 (operation_seen -> .)
    R_SQUARE_BRACKET reduce using rule 81 (operation_seen -> .)
    HASTA           reduce using rule 81 (operation_seen -> .)
    HACER           reduce using rule 81 (operation_seen -> .)

    operation_seen                 shift and go to state 180

state 133

    (88) matrizp -> empty .

    MULTIPLY        reduce using rule 88 (matrizp -> empty .)
    DIVIDE          reduce using rule 88 (matrizp -> empty .)
    SUM             reduce using rule 88 (matrizp -> empty .)
    SUBTRACT        reduce using rule 88 (matrizp -> empty .)
    EQUALS          reduce using rule 88 (matrizp -> empty .)
    NOT_EQUAL       reduce using rule 88 (matrizp -> empty .)
    LESS_THAN       reduce using rule 88 (matrizp -> empty .)
    LESS_THAN_EQUAL reduce using rule 88 (matrizp -> empty .)
    GREATER_THAN    reduce using rule 88 (matrizp -> empty .)
    GREATER_THAN_EQUAL reduce using rule 88 (matrizp -> empty .)
    AND             reduce using rule 88 (matrizp -> empty .)
    OR              reduce using rule 88 (matrizp -> empty .)
    R_PARENTHESIS   reduce using rule 88 (matrizp -> empty .)
    COMMA           reduce using rule 88 (matrizp -> empty .)
    SEMICOLON       reduce using rule 88 (matrizp -> empty .)
    R_SQUARE_BRACKET reduce using rule 88 (matrizp -> empty .)
    HASTA           reduce using rule 88 (matrizp -> empty .)
    HACER           reduce using rule 88 (matrizp -> empty .)


state 134

    (83) matriz -> NOT operation_seen . cte apply_not
    (90) cte -> . CTE_INT
    (91) cte -> . CTE_FLOAT
    (92) cte -> . CTE_CHAR
    (93) cte -> . llamadaFuncion
    (94) cte -> . ID operand_seen dimId
    (95) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (96) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    CTE_INT         shift and go to state 101
    CTE_FLOAT       shift and go to state 102
    CTE_CHAR        shift and go to state 103
    ID              shift and go to state 105
    L_PARENTHESIS   shift and go to state 93

    cte                            shift and go to state 181
    llamadaFuncion                 shift and go to state 104

state 135

    (94) cte -> ID operand_seen . dimId
    (48) dimId -> . is_array create_dim dim pop_array
    (49) dimId -> . is_array create_dim dim dim pop_array
    (50) dimId -> . empty
    (52) is_array -> .
    (128) empty -> .

    L_SQUARE_BRACKET reduce using rule 52 (is_array -> .)
    DETERMINANT     reduce using rule 128 (empty -> .)
    TRANSPOSED      reduce using rule 128 (empty -> .)
    INVERSE         reduce using rule 128 (empty -> .)
    MULTIPLY        reduce using rule 128 (empty -> .)
    DIVIDE          reduce using rule 128 (empty -> .)
    SUM             reduce using rule 128 (empty -> .)
    SUBTRACT        reduce using rule 128 (empty -> .)
    EQUALS          reduce using rule 128 (empty -> .)
    NOT_EQUAL       reduce using rule 128 (empty -> .)
    LESS_THAN       reduce using rule 128 (empty -> .)
    LESS_THAN_EQUAL reduce using rule 128 (empty -> .)
    GREATER_THAN    reduce using rule 128 (empty -> .)
    GREATER_THAN_EQUAL reduce using rule 128 (empty -> .)
    AND             reduce using rule 128 (empty -> .)
    OR              reduce using rule 128 (empty -> .)
    R_PARENTHESIS   reduce using rule 128 (empty -> .)
    COMMA           reduce using rule 128 (empty -> .)
    SEMICOLON       reduce using rule 128 (empty -> .)
    R_SQUARE_BRACKET reduce using rule 128 (empty -> .)
    HASTA           reduce using rule 128 (empty -> .)
    HACER           reduce using rule 128 (empty -> .)

    dimId                          shift and go to state 182
    is_array                       shift and go to state 90
    empty                          shift and go to state 91

state 136

    (96) llamadaFuncion -> ID set_func_scope . L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    L_PARENTHESIS   shift and go to state 183


state 137

    (105) lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 184


state 138

    (106) lecturap -> ID operand_seen . dimId gen_input lecturapp
    (48) dimId -> . is_array create_dim dim pop_array
    (49) dimId -> . is_array create_dim dim dim pop_array
    (50) dimId -> . empty
    (52) is_array -> .
    (128) empty -> .

    L_SQUARE_BRACKET reduce using rule 52 (is_array -> .)
    COMMA           reduce using rule 128 (empty -> .)
    R_PARENTHESIS   reduce using rule 128 (empty -> .)

    dimId                          shift and go to state 185
    is_array                       shift and go to state 90
    empty                          shift and go to state 91

state 139

    (110) escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 186


state 140

    (111) escriturap -> LETRERO gen_print . escriturapp
    (114) escriturapp -> . COMMA escriturap
    (115) escriturapp -> . empty
    (128) empty -> .

    COMMA           shift and go to state 188
    R_PARENTHESIS   reduce using rule 128 (empty -> .)

    escriturapp                    shift and go to state 187
    empty                          shift and go to state 189

state 141

    (112) escriturap -> expresion gen_print . escriturapp
    (114) escriturapp -> . COMMA escriturap
    (115) escriturapp -> . empty
    (128) empty -> .

    COMMA           shift and go to state 188
    R_PARENTHESIS   reduce using rule 128 (empty -> .)

    escriturapp                    shift and go to state 190
    empty                          shift and go to state 189

state 142

    (116) decision -> SI L_PARENTHESIS expresion R_PARENTHESIS . jump_false HAZ bloque decisionp
    (117) jump_false -> .

    HAZ             reduce using rule 117 (jump_false -> .)

    jump_false                     shift and go to state 191

state 143

    (122) cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion . R_PARENTHESIS jump_false HAZ bloque update_jump_cycle

    R_PARENTHESIS   shift and go to state 192


state 144

    (125) cicloNoCondicional -> DESDE ID operand_seen dimId . ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle

    ASSIGN          shift and go to state 193


state 145

    (25) funcionp -> tipoRetorno ID create_func_scope L_PARENTHESIS parametro R_PARENTHESIS var bloque end_func funcion .

    PRINCIPAL       reduce using rule 25 (funcionp -> tipoRetorno ID create_func_scope L_PARENTHESIS parametro R_PARENTHESIS var bloque end_func funcion .)


state 146

    (31) parametrop -> COMMA tipo ID . save_param parametrop
    (30) save_param -> .

    COMMA           reduce using rule 30 (save_param -> .)
    R_PARENTHESIS   reduce using rule 30 (save_param -> .)

    save_param                     shift and go to state 194

state 147

    (8) varp -> tipo tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp .

    FUNCION         reduce using rule 8 (varp -> tipo tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp .)
    PRINCIPAL       reduce using rule 8 (varp -> tipo tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp .)
    L_CURLY_BRACKET reduce using rule 8 (varp -> tipo tipo_seen COLON ID variable_seen varppp varpp delete_type SEMICOLON varpppp .)


state 148

    (17) varpppp -> varp .

    FUNCION         reduce using rule 17 (varpppp -> varp .)
    PRINCIPAL       reduce using rule 17 (varpppp -> varp .)
    L_CURLY_BRACKET reduce using rule 17 (varpppp -> varp .)


state 149

    (18) varpppp -> empty .

    FUNCION         reduce using rule 18 (varpppp -> empty .)
    PRINCIPAL       reduce using rule 18 (varpppp -> empty .)
    L_CURLY_BRACKET reduce using rule 18 (varpppp -> empty .)


state 150

    (12) varpp -> COMMA ID variable_seen varppp . varpp
    (12) varpp -> . COMMA ID variable_seen varppp varpp
    (13) varpp -> . empty
    (128) empty -> .

    COMMA           shift and go to state 68
    SEMICOLON       reduce using rule 128 (empty -> .)

    varpp                          shift and go to state 195
    empty                          shift and go to state 69

state 151

    (46) asignacion -> ID operand_seen dimId ASSIGN operation_seen . expresion apply_operation_assign SEMICOLON
    (57) expresion -> . relacional apply_operation_expresion expresionp
    (62) relacional -> . aritmetica apply_operation_relational relacionalp
    (71) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (76) factor -> . matriz apply_operation_factor factorp
    (82) matriz -> . cte matrizp
    (83) matriz -> . NOT operation_seen cte apply_not
    (90) cte -> . CTE_INT
    (91) cte -> . CTE_FLOAT
    (92) cte -> . CTE_CHAR
    (93) cte -> . llamadaFuncion
    (94) cte -> . ID operand_seen dimId
    (95) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (96) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    NOT             shift and go to state 100
    CTE_INT         shift and go to state 101
    CTE_FLOAT       shift and go to state 102
    CTE_CHAR        shift and go to state 103
    ID              shift and go to state 105
    L_PARENTHESIS   shift and go to state 93

    expresion                      shift and go to state 196
    relacional                     shift and go to state 95
    aritmetica                     shift and go to state 96
    factor                         shift and go to state 97
    matriz                         shift and go to state 98
    cte                            shift and go to state 99
    llamadaFuncion                 shift and go to state 104

state 152

    (48) dimId -> is_array create_dim dim . pop_array
    (49) dimId -> is_array create_dim dim . dim pop_array
    (51) pop_array -> .
    (53) dim -> . L_SQUARE_BRACKET bracket_seen expresion R_SQUARE_BRACKET bracket_seen

    ASSIGN          reduce using rule 51 (pop_array -> .)
    DETERMINANT     reduce using rule 51 (pop_array -> .)
    TRANSPOSED      reduce using rule 51 (pop_array -> .)
    INVERSE         reduce using rule 51 (pop_array -> .)
    MULTIPLY        reduce using rule 51 (pop_array -> .)
    DIVIDE          reduce using rule 51 (pop_array -> .)
    SUM             reduce using rule 51 (pop_array -> .)
    SUBTRACT        reduce using rule 51 (pop_array -> .)
    EQUALS          reduce using rule 51 (pop_array -> .)
    NOT_EQUAL       reduce using rule 51 (pop_array -> .)
    LESS_THAN       reduce using rule 51 (pop_array -> .)
    LESS_THAN_EQUAL reduce using rule 51 (pop_array -> .)
    GREATER_THAN    reduce using rule 51 (pop_array -> .)
    GREATER_THAN_EQUAL reduce using rule 51 (pop_array -> .)
    AND             reduce using rule 51 (pop_array -> .)
    OR              reduce using rule 51 (pop_array -> .)
    R_PARENTHESIS   reduce using rule 51 (pop_array -> .)
    COMMA           reduce using rule 51 (pop_array -> .)
    SEMICOLON       reduce using rule 51 (pop_array -> .)
    R_SQUARE_BRACKET reduce using rule 51 (pop_array -> .)
    HASTA           reduce using rule 51 (pop_array -> .)
    HACER           reduce using rule 51 (pop_array -> .)
    L_SQUARE_BRACKET shift and go to state 153

    dim                            shift and go to state 197
    pop_array                      shift and go to state 198

state 153

    (53) dim -> L_SQUARE_BRACKET . bracket_seen expresion R_SQUARE_BRACKET bracket_seen
    (55) bracket_seen -> .

    NOT             reduce using rule 55 (bracket_seen -> .)
    CTE_INT         reduce using rule 55 (bracket_seen -> .)
    CTE_FLOAT       reduce using rule 55 (bracket_seen -> .)
    CTE_CHAR        reduce using rule 55 (bracket_seen -> .)
    ID              reduce using rule 55 (bracket_seen -> .)
    L_PARENTHESIS   reduce using rule 55 (bracket_seen -> .)

    bracket_seen                   shift and go to state 199

state 154

    (102) funcionVacia -> ID set_func_scope L_PARENTHESIS llamadaFuncionp R_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 200


state 155

    (97) llamadaFuncionp -> expresion verify_parameter . llamadaFuncionpp
    (99) llamadaFuncionpp -> . COMMA llamadaFuncionp
    (100) llamadaFuncionpp -> . empty
    (128) empty -> .

    COMMA           shift and go to state 202
    R_PARENTHESIS   reduce using rule 128 (empty -> .)

    llamadaFuncionpp               shift and go to state 201
    empty                          shift and go to state 203

state 156

    (95) cte -> L_PARENTHESIS operation_seen expresion . R_PARENTHESIS operation_seen

    R_PARENTHESIS   shift and go to state 204


state 157

    (104) regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .

    ID              reduce using rule 104 (regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .)
    REGRESA         reduce using rule 104 (regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .)
    LECTURA         reduce using rule 104 (regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .)
    ESCRIBE         reduce using rule 104 (regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .)
    SI              reduce using rule 104 (regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .)
    MIENTRAS        reduce using rule 104 (regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .)
    DESDE           reduce using rule 104 (regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .)
    R_CURLY_BRACKET reduce using rule 104 (regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .)


state 158

    (57) expresion -> relacional apply_operation_expresion expresionp .

    R_PARENTHESIS   reduce using rule 57 (expresion -> relacional apply_operation_expresion expresionp .)
    COMMA           reduce using rule 57 (expresion -> relacional apply_operation_expresion expresionp .)
    SEMICOLON       reduce using rule 57 (expresion -> relacional apply_operation_expresion expresionp .)
    R_SQUARE_BRACKET reduce using rule 57 (expresion -> relacional apply_operation_expresion expresionp .)
    HASTA           reduce using rule 57 (expresion -> relacional apply_operation_expresion expresionp .)
    HACER           reduce using rule 57 (expresion -> relacional apply_operation_expresion expresionp .)


state 159

    (58) expresionp -> AND . operation_seen expresion
    (81) operation_seen -> .

    NOT             reduce using rule 81 (operation_seen -> .)
    CTE_INT         reduce using rule 81 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 81 (operation_seen -> .)
    CTE_CHAR        reduce using rule 81 (operation_seen -> .)
    ID              reduce using rule 81 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 81 (operation_seen -> .)

    operation_seen                 shift and go to state 205

state 160

    (59) expresionp -> OR . operation_seen expresion
    (81) operation_seen -> .

    NOT             reduce using rule 81 (operation_seen -> .)
    CTE_INT         reduce using rule 81 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 81 (operation_seen -> .)
    CTE_CHAR        reduce using rule 81 (operation_seen -> .)
    ID              reduce using rule 81 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 81 (operation_seen -> .)

    operation_seen                 shift and go to state 206

state 161

    (60) expresionp -> empty .

    R_PARENTHESIS   reduce using rule 60 (expresionp -> empty .)
    COMMA           reduce using rule 60 (expresionp -> empty .)
    SEMICOLON       reduce using rule 60 (expresionp -> empty .)
    R_SQUARE_BRACKET reduce using rule 60 (expresionp -> empty .)
    HASTA           reduce using rule 60 (expresionp -> empty .)
    HACER           reduce using rule 60 (expresionp -> empty .)


state 162

    (62) relacional -> aritmetica apply_operation_relational relacionalp .

    AND             reduce using rule 62 (relacional -> aritmetica apply_operation_relational relacionalp .)
    OR              reduce using rule 62 (relacional -> aritmetica apply_operation_relational relacionalp .)
    R_PARENTHESIS   reduce using rule 62 (relacional -> aritmetica apply_operation_relational relacionalp .)
    COMMA           reduce using rule 62 (relacional -> aritmetica apply_operation_relational relacionalp .)
    SEMICOLON       reduce using rule 62 (relacional -> aritmetica apply_operation_relational relacionalp .)
    R_SQUARE_BRACKET reduce using rule 62 (relacional -> aritmetica apply_operation_relational relacionalp .)
    HASTA           reduce using rule 62 (relacional -> aritmetica apply_operation_relational relacionalp .)
    HACER           reduce using rule 62 (relacional -> aritmetica apply_operation_relational relacionalp .)


state 163

    (63) relacionalp -> EQUALS . operation_seen relacional
    (81) operation_seen -> .

    NOT             reduce using rule 81 (operation_seen -> .)
    CTE_INT         reduce using rule 81 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 81 (operation_seen -> .)
    CTE_CHAR        reduce using rule 81 (operation_seen -> .)
    ID              reduce using rule 81 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 81 (operation_seen -> .)

    operation_seen                 shift and go to state 207

state 164

    (64) relacionalp -> NOT_EQUAL . operation_seen relacional
    (81) operation_seen -> .

    NOT             reduce using rule 81 (operation_seen -> .)
    CTE_INT         reduce using rule 81 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 81 (operation_seen -> .)
    CTE_CHAR        reduce using rule 81 (operation_seen -> .)
    ID              reduce using rule 81 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 81 (operation_seen -> .)

    operation_seen                 shift and go to state 208

state 165

    (65) relacionalp -> LESS_THAN . operation_seen relacional
    (81) operation_seen -> .

    NOT             reduce using rule 81 (operation_seen -> .)
    CTE_INT         reduce using rule 81 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 81 (operation_seen -> .)
    CTE_CHAR        reduce using rule 81 (operation_seen -> .)
    ID              reduce using rule 81 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 81 (operation_seen -> .)

    operation_seen                 shift and go to state 209

state 166

    (66) relacionalp -> LESS_THAN_EQUAL . operation_seen relacional
    (81) operation_seen -> .

    NOT             reduce using rule 81 (operation_seen -> .)
    CTE_INT         reduce using rule 81 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 81 (operation_seen -> .)
    CTE_CHAR        reduce using rule 81 (operation_seen -> .)
    ID              reduce using rule 81 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 81 (operation_seen -> .)

    operation_seen                 shift and go to state 210

state 167

    (67) relacionalp -> GREATER_THAN . operation_seen relacional
    (81) operation_seen -> .

    NOT             reduce using rule 81 (operation_seen -> .)
    CTE_INT         reduce using rule 81 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 81 (operation_seen -> .)
    CTE_CHAR        reduce using rule 81 (operation_seen -> .)
    ID              reduce using rule 81 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 81 (operation_seen -> .)

    operation_seen                 shift and go to state 211

state 168

    (68) relacionalp -> GREATER_THAN_EQUAL . operation_seen relacional
    (81) operation_seen -> .

    NOT             reduce using rule 81 (operation_seen -> .)
    CTE_INT         reduce using rule 81 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 81 (operation_seen -> .)
    CTE_CHAR        reduce using rule 81 (operation_seen -> .)
    ID              reduce using rule 81 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 81 (operation_seen -> .)

    operation_seen                 shift and go to state 212

state 169

    (69) relacionalp -> empty .

    AND             reduce using rule 69 (relacionalp -> empty .)
    OR              reduce using rule 69 (relacionalp -> empty .)
    R_PARENTHESIS   reduce using rule 69 (relacionalp -> empty .)
    COMMA           reduce using rule 69 (relacionalp -> empty .)
    SEMICOLON       reduce using rule 69 (relacionalp -> empty .)
    R_SQUARE_BRACKET reduce using rule 69 (relacionalp -> empty .)
    HASTA           reduce using rule 69 (relacionalp -> empty .)
    HACER           reduce using rule 69 (relacionalp -> empty .)


state 170

    (71) aritmetica -> factor apply_operation_aritmetica aritmeticap .

    EQUALS          reduce using rule 71 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    NOT_EQUAL       reduce using rule 71 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    LESS_THAN       reduce using rule 71 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    LESS_THAN_EQUAL reduce using rule 71 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    GREATER_THAN    reduce using rule 71 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    GREATER_THAN_EQUAL reduce using rule 71 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    AND             reduce using rule 71 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    OR              reduce using rule 71 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    R_PARENTHESIS   reduce using rule 71 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    COMMA           reduce using rule 71 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    SEMICOLON       reduce using rule 71 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    R_SQUARE_BRACKET reduce using rule 71 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    HASTA           reduce using rule 71 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)
    HACER           reduce using rule 71 (aritmetica -> factor apply_operation_aritmetica aritmeticap .)


state 171

    (72) aritmeticap -> SUM . operation_seen aritmetica
    (81) operation_seen -> .

    NOT             reduce using rule 81 (operation_seen -> .)
    CTE_INT         reduce using rule 81 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 81 (operation_seen -> .)
    CTE_CHAR        reduce using rule 81 (operation_seen -> .)
    ID              reduce using rule 81 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 81 (operation_seen -> .)

    operation_seen                 shift and go to state 213

state 172

    (73) aritmeticap -> SUBTRACT . operation_seen aritmetica
    (81) operation_seen -> .

    NOT             reduce using rule 81 (operation_seen -> .)
    CTE_INT         reduce using rule 81 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 81 (operation_seen -> .)
    CTE_CHAR        reduce using rule 81 (operation_seen -> .)
    ID              reduce using rule 81 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 81 (operation_seen -> .)

    operation_seen                 shift and go to state 214

state 173

    (74) aritmeticap -> empty .

    EQUALS          reduce using rule 74 (aritmeticap -> empty .)
    NOT_EQUAL       reduce using rule 74 (aritmeticap -> empty .)
    LESS_THAN       reduce using rule 74 (aritmeticap -> empty .)
    LESS_THAN_EQUAL reduce using rule 74 (aritmeticap -> empty .)
    GREATER_THAN    reduce using rule 74 (aritmeticap -> empty .)
    GREATER_THAN_EQUAL reduce using rule 74 (aritmeticap -> empty .)
    AND             reduce using rule 74 (aritmeticap -> empty .)
    OR              reduce using rule 74 (aritmeticap -> empty .)
    R_PARENTHESIS   reduce using rule 74 (aritmeticap -> empty .)
    COMMA           reduce using rule 74 (aritmeticap -> empty .)
    SEMICOLON       reduce using rule 74 (aritmeticap -> empty .)
    R_SQUARE_BRACKET reduce using rule 74 (aritmeticap -> empty .)
    HASTA           reduce using rule 74 (aritmeticap -> empty .)
    HACER           reduce using rule 74 (aritmeticap -> empty .)


state 174

    (76) factor -> matriz apply_operation_factor factorp .

    SUM             reduce using rule 76 (factor -> matriz apply_operation_factor factorp .)
    SUBTRACT        reduce using rule 76 (factor -> matriz apply_operation_factor factorp .)
    EQUALS          reduce using rule 76 (factor -> matriz apply_operation_factor factorp .)
    NOT_EQUAL       reduce using rule 76 (factor -> matriz apply_operation_factor factorp .)
    LESS_THAN       reduce using rule 76 (factor -> matriz apply_operation_factor factorp .)
    LESS_THAN_EQUAL reduce using rule 76 (factor -> matriz apply_operation_factor factorp .)
    GREATER_THAN    reduce using rule 76 (factor -> matriz apply_operation_factor factorp .)
    GREATER_THAN_EQUAL reduce using rule 76 (factor -> matriz apply_operation_factor factorp .)
    AND             reduce using rule 76 (factor -> matriz apply_operation_factor factorp .)
    OR              reduce using rule 76 (factor -> matriz apply_operation_factor factorp .)
    R_PARENTHESIS   reduce using rule 76 (factor -> matriz apply_operation_factor factorp .)
    COMMA           reduce using rule 76 (factor -> matriz apply_operation_factor factorp .)
    SEMICOLON       reduce using rule 76 (factor -> matriz apply_operation_factor factorp .)
    R_SQUARE_BRACKET reduce using rule 76 (factor -> matriz apply_operation_factor factorp .)
    HASTA           reduce using rule 76 (factor -> matriz apply_operation_factor factorp .)
    HACER           reduce using rule 76 (factor -> matriz apply_operation_factor factorp .)


state 175

    (77) factorp -> MULTIPLY . operation_seen factor
    (81) operation_seen -> .

    NOT             reduce using rule 81 (operation_seen -> .)
    CTE_INT         reduce using rule 81 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 81 (operation_seen -> .)
    CTE_CHAR        reduce using rule 81 (operation_seen -> .)
    ID              reduce using rule 81 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 81 (operation_seen -> .)

    operation_seen                 shift and go to state 215

state 176

    (78) factorp -> DIVIDE . operation_seen factor
    (81) operation_seen -> .

    NOT             reduce using rule 81 (operation_seen -> .)
    CTE_INT         reduce using rule 81 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 81 (operation_seen -> .)
    CTE_CHAR        reduce using rule 81 (operation_seen -> .)
    ID              reduce using rule 81 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 81 (operation_seen -> .)

    operation_seen                 shift and go to state 216

state 177

    (79) factorp -> empty .

    SUM             reduce using rule 79 (factorp -> empty .)
    SUBTRACT        reduce using rule 79 (factorp -> empty .)
    EQUALS          reduce using rule 79 (factorp -> empty .)
    NOT_EQUAL       reduce using rule 79 (factorp -> empty .)
    LESS_THAN       reduce using rule 79 (factorp -> empty .)
    LESS_THAN_EQUAL reduce using rule 79 (factorp -> empty .)
    GREATER_THAN    reduce using rule 79 (factorp -> empty .)
    GREATER_THAN_EQUAL reduce using rule 79 (factorp -> empty .)
    AND             reduce using rule 79 (factorp -> empty .)
    OR              reduce using rule 79 (factorp -> empty .)
    R_PARENTHESIS   reduce using rule 79 (factorp -> empty .)
    COMMA           reduce using rule 79 (factorp -> empty .)
    SEMICOLON       reduce using rule 79 (factorp -> empty .)
    R_SQUARE_BRACKET reduce using rule 79 (factorp -> empty .)
    HASTA           reduce using rule 79 (factorp -> empty .)
    HACER           reduce using rule 79 (factorp -> empty .)


state 178

    (85) matrizp -> DETERMINANT operation_seen . apply_mat
    (89) apply_mat -> .

    MULTIPLY        reduce using rule 89 (apply_mat -> .)
    DIVIDE          reduce using rule 89 (apply_mat -> .)
    SUM             reduce using rule 89 (apply_mat -> .)
    SUBTRACT        reduce using rule 89 (apply_mat -> .)
    EQUALS          reduce using rule 89 (apply_mat -> .)
    NOT_EQUAL       reduce using rule 89 (apply_mat -> .)
    LESS_THAN       reduce using rule 89 (apply_mat -> .)
    LESS_THAN_EQUAL reduce using rule 89 (apply_mat -> .)
    GREATER_THAN    reduce using rule 89 (apply_mat -> .)
    GREATER_THAN_EQUAL reduce using rule 89 (apply_mat -> .)
    AND             reduce using rule 89 (apply_mat -> .)
    OR              reduce using rule 89 (apply_mat -> .)
    R_PARENTHESIS   reduce using rule 89 (apply_mat -> .)
    COMMA           reduce using rule 89 (apply_mat -> .)
    SEMICOLON       reduce using rule 89 (apply_mat -> .)
    R_SQUARE_BRACKET reduce using rule 89 (apply_mat -> .)
    HASTA           reduce using rule 89 (apply_mat -> .)
    HACER           reduce using rule 89 (apply_mat -> .)

    apply_mat                      shift and go to state 217

state 179

    (86) matrizp -> TRANSPOSED operation_seen . apply_mat
    (89) apply_mat -> .

    MULTIPLY        reduce using rule 89 (apply_mat -> .)
    DIVIDE          reduce using rule 89 (apply_mat -> .)
    SUM             reduce using rule 89 (apply_mat -> .)
    SUBTRACT        reduce using rule 89 (apply_mat -> .)
    EQUALS          reduce using rule 89 (apply_mat -> .)
    NOT_EQUAL       reduce using rule 89 (apply_mat -> .)
    LESS_THAN       reduce using rule 89 (apply_mat -> .)
    LESS_THAN_EQUAL reduce using rule 89 (apply_mat -> .)
    GREATER_THAN    reduce using rule 89 (apply_mat -> .)
    GREATER_THAN_EQUAL reduce using rule 89 (apply_mat -> .)
    AND             reduce using rule 89 (apply_mat -> .)
    OR              reduce using rule 89 (apply_mat -> .)
    R_PARENTHESIS   reduce using rule 89 (apply_mat -> .)
    COMMA           reduce using rule 89 (apply_mat -> .)
    SEMICOLON       reduce using rule 89 (apply_mat -> .)
    R_SQUARE_BRACKET reduce using rule 89 (apply_mat -> .)
    HASTA           reduce using rule 89 (apply_mat -> .)
    HACER           reduce using rule 89 (apply_mat -> .)

    apply_mat                      shift and go to state 218

state 180

    (87) matrizp -> INVERSE operation_seen . apply_mat
    (89) apply_mat -> .

    MULTIPLY        reduce using rule 89 (apply_mat -> .)
    DIVIDE          reduce using rule 89 (apply_mat -> .)
    SUM             reduce using rule 89 (apply_mat -> .)
    SUBTRACT        reduce using rule 89 (apply_mat -> .)
    EQUALS          reduce using rule 89 (apply_mat -> .)
    NOT_EQUAL       reduce using rule 89 (apply_mat -> .)
    LESS_THAN       reduce using rule 89 (apply_mat -> .)
    LESS_THAN_EQUAL reduce using rule 89 (apply_mat -> .)
    GREATER_THAN    reduce using rule 89 (apply_mat -> .)
    GREATER_THAN_EQUAL reduce using rule 89 (apply_mat -> .)
    AND             reduce using rule 89 (apply_mat -> .)
    OR              reduce using rule 89 (apply_mat -> .)
    R_PARENTHESIS   reduce using rule 89 (apply_mat -> .)
    COMMA           reduce using rule 89 (apply_mat -> .)
    SEMICOLON       reduce using rule 89 (apply_mat -> .)
    R_SQUARE_BRACKET reduce using rule 89 (apply_mat -> .)
    HASTA           reduce using rule 89 (apply_mat -> .)
    HACER           reduce using rule 89 (apply_mat -> .)

    apply_mat                      shift and go to state 219

state 181

    (83) matriz -> NOT operation_seen cte . apply_not
    (84) apply_not -> .

    MULTIPLY        reduce using rule 84 (apply_not -> .)
    DIVIDE          reduce using rule 84 (apply_not -> .)
    SUM             reduce using rule 84 (apply_not -> .)
    SUBTRACT        reduce using rule 84 (apply_not -> .)
    EQUALS          reduce using rule 84 (apply_not -> .)
    NOT_EQUAL       reduce using rule 84 (apply_not -> .)
    LESS_THAN       reduce using rule 84 (apply_not -> .)
    LESS_THAN_EQUAL reduce using rule 84 (apply_not -> .)
    GREATER_THAN    reduce using rule 84 (apply_not -> .)
    GREATER_THAN_EQUAL reduce using rule 84 (apply_not -> .)
    AND             reduce using rule 84 (apply_not -> .)
    OR              reduce using rule 84 (apply_not -> .)
    R_PARENTHESIS   reduce using rule 84 (apply_not -> .)
    COMMA           reduce using rule 84 (apply_not -> .)
    SEMICOLON       reduce using rule 84 (apply_not -> .)
    R_SQUARE_BRACKET reduce using rule 84 (apply_not -> .)
    HASTA           reduce using rule 84 (apply_not -> .)
    HACER           reduce using rule 84 (apply_not -> .)

    apply_not                      shift and go to state 220

state 182

    (94) cte -> ID operand_seen dimId .

    DETERMINANT     reduce using rule 94 (cte -> ID operand_seen dimId .)
    TRANSPOSED      reduce using rule 94 (cte -> ID operand_seen dimId .)
    INVERSE         reduce using rule 94 (cte -> ID operand_seen dimId .)
    MULTIPLY        reduce using rule 94 (cte -> ID operand_seen dimId .)
    DIVIDE          reduce using rule 94 (cte -> ID operand_seen dimId .)
    SUM             reduce using rule 94 (cte -> ID operand_seen dimId .)
    SUBTRACT        reduce using rule 94 (cte -> ID operand_seen dimId .)
    EQUALS          reduce using rule 94 (cte -> ID operand_seen dimId .)
    NOT_EQUAL       reduce using rule 94 (cte -> ID operand_seen dimId .)
    LESS_THAN       reduce using rule 94 (cte -> ID operand_seen dimId .)
    LESS_THAN_EQUAL reduce using rule 94 (cte -> ID operand_seen dimId .)
    GREATER_THAN    reduce using rule 94 (cte -> ID operand_seen dimId .)
    GREATER_THAN_EQUAL reduce using rule 94 (cte -> ID operand_seen dimId .)
    AND             reduce using rule 94 (cte -> ID operand_seen dimId .)
    OR              reduce using rule 94 (cte -> ID operand_seen dimId .)
    R_PARENTHESIS   reduce using rule 94 (cte -> ID operand_seen dimId .)
    COMMA           reduce using rule 94 (cte -> ID operand_seen dimId .)
    SEMICOLON       reduce using rule 94 (cte -> ID operand_seen dimId .)
    R_SQUARE_BRACKET reduce using rule 94 (cte -> ID operand_seen dimId .)
    HASTA           reduce using rule 94 (cte -> ID operand_seen dimId .)
    HACER           reduce using rule 94 (cte -> ID operand_seen dimId .)


state 183

    (96) llamadaFuncion -> ID set_func_scope L_PARENTHESIS . operation_seen llamadaFuncionp R_PARENTHESIS operation_seen
    (81) operation_seen -> .

    NOT             reduce using rule 81 (operation_seen -> .)
    CTE_INT         reduce using rule 81 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 81 (operation_seen -> .)
    CTE_CHAR        reduce using rule 81 (operation_seen -> .)
    ID              reduce using rule 81 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 81 (operation_seen -> .)
    R_PARENTHESIS   reduce using rule 81 (operation_seen -> .)

    operation_seen                 shift and go to state 221

state 184

    (105) lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .

    ID              reduce using rule 105 (lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .)
    REGRESA         reduce using rule 105 (lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .)
    LECTURA         reduce using rule 105 (lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .)
    ESCRIBE         reduce using rule 105 (lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .)
    SI              reduce using rule 105 (lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .)
    MIENTRAS        reduce using rule 105 (lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .)
    DESDE           reduce using rule 105 (lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .)
    R_CURLY_BRACKET reduce using rule 105 (lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .)


state 185

    (106) lecturap -> ID operand_seen dimId . gen_input lecturapp
    (107) gen_input -> .

    COMMA           reduce using rule 107 (gen_input -> .)
    R_PARENTHESIS   reduce using rule 107 (gen_input -> .)

    gen_input                      shift and go to state 222

state 186

    (110) escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .

    ID              reduce using rule 110 (escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .)
    REGRESA         reduce using rule 110 (escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .)
    LECTURA         reduce using rule 110 (escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .)
    ESCRIBE         reduce using rule 110 (escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .)
    SI              reduce using rule 110 (escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .)
    MIENTRAS        reduce using rule 110 (escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .)
    DESDE           reduce using rule 110 (escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .)
    R_CURLY_BRACKET reduce using rule 110 (escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .)


state 187

    (111) escriturap -> LETRERO gen_print escriturapp .

    R_PARENTHESIS   reduce using rule 111 (escriturap -> LETRERO gen_print escriturapp .)


state 188

    (114) escriturapp -> COMMA . escriturap
    (111) escriturap -> . LETRERO gen_print escriturapp
    (112) escriturap -> . expresion gen_print escriturapp
    (57) expresion -> . relacional apply_operation_expresion expresionp
    (62) relacional -> . aritmetica apply_operation_relational relacionalp
    (71) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (76) factor -> . matriz apply_operation_factor factorp
    (82) matriz -> . cte matrizp
    (83) matriz -> . NOT operation_seen cte apply_not
    (90) cte -> . CTE_INT
    (91) cte -> . CTE_FLOAT
    (92) cte -> . CTE_CHAR
    (93) cte -> . llamadaFuncion
    (94) cte -> . ID operand_seen dimId
    (95) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (96) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    LETRERO         shift and go to state 109
    NOT             shift and go to state 100
    CTE_INT         shift and go to state 101
    CTE_FLOAT       shift and go to state 102
    CTE_CHAR        shift and go to state 103
    ID              shift and go to state 105
    L_PARENTHESIS   shift and go to state 93

    escriturap                     shift and go to state 223
    expresion                      shift and go to state 110
    relacional                     shift and go to state 95
    aritmetica                     shift and go to state 96
    factor                         shift and go to state 97
    matriz                         shift and go to state 98
    cte                            shift and go to state 99
    llamadaFuncion                 shift and go to state 104

state 189

    (115) escriturapp -> empty .

    R_PARENTHESIS   reduce using rule 115 (escriturapp -> empty .)


state 190

    (112) escriturap -> expresion gen_print escriturapp .

    R_PARENTHESIS   reduce using rule 112 (escriturap -> expresion gen_print escriturapp .)


state 191

    (116) decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false . HAZ bloque decisionp

    HAZ             shift and go to state 224


state 192

    (122) cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS . jump_false HAZ bloque update_jump_cycle
    (117) jump_false -> .

    HAZ             reduce using rule 117 (jump_false -> .)

    jump_false                     shift and go to state 225

state 193

    (125) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN . operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle
    (81) operation_seen -> .

    NOT             reduce using rule 81 (operation_seen -> .)
    CTE_INT         reduce using rule 81 (operation_seen -> .)
    CTE_FLOAT       reduce using rule 81 (operation_seen -> .)
    CTE_CHAR        reduce using rule 81 (operation_seen -> .)
    ID              reduce using rule 81 (operation_seen -> .)
    L_PARENTHESIS   reduce using rule 81 (operation_seen -> .)

    operation_seen                 shift and go to state 226

state 194

    (31) parametrop -> COMMA tipo ID save_param . parametrop
    (31) parametrop -> . COMMA tipo ID save_param parametrop
    (32) parametrop -> . empty
    (128) empty -> .

    COMMA           shift and go to state 84
    R_PARENTHESIS   reduce using rule 128 (empty -> .)

    parametrop                     shift and go to state 227
    empty                          shift and go to state 85

state 195

    (12) varpp -> COMMA ID variable_seen varppp varpp .

    SEMICOLON       reduce using rule 12 (varpp -> COMMA ID variable_seen varppp varpp .)


state 196

    (46) asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion . apply_operation_assign SEMICOLON
    (56) apply_operation_assign -> .

    SEMICOLON       reduce using rule 56 (apply_operation_assign -> .)

    apply_operation_assign         shift and go to state 228

state 197

    (49) dimId -> is_array create_dim dim dim . pop_array
    (51) pop_array -> .

    ASSIGN          reduce using rule 51 (pop_array -> .)
    DETERMINANT     reduce using rule 51 (pop_array -> .)
    TRANSPOSED      reduce using rule 51 (pop_array -> .)
    INVERSE         reduce using rule 51 (pop_array -> .)
    MULTIPLY        reduce using rule 51 (pop_array -> .)
    DIVIDE          reduce using rule 51 (pop_array -> .)
    SUM             reduce using rule 51 (pop_array -> .)
    SUBTRACT        reduce using rule 51 (pop_array -> .)
    EQUALS          reduce using rule 51 (pop_array -> .)
    NOT_EQUAL       reduce using rule 51 (pop_array -> .)
    LESS_THAN       reduce using rule 51 (pop_array -> .)
    LESS_THAN_EQUAL reduce using rule 51 (pop_array -> .)
    GREATER_THAN    reduce using rule 51 (pop_array -> .)
    GREATER_THAN_EQUAL reduce using rule 51 (pop_array -> .)
    AND             reduce using rule 51 (pop_array -> .)
    OR              reduce using rule 51 (pop_array -> .)
    R_PARENTHESIS   reduce using rule 51 (pop_array -> .)
    COMMA           reduce using rule 51 (pop_array -> .)
    SEMICOLON       reduce using rule 51 (pop_array -> .)
    R_SQUARE_BRACKET reduce using rule 51 (pop_array -> .)
    HASTA           reduce using rule 51 (pop_array -> .)
    HACER           reduce using rule 51 (pop_array -> .)

    pop_array                      shift and go to state 229

state 198

    (48) dimId -> is_array create_dim dim pop_array .

    ASSIGN          reduce using rule 48 (dimId -> is_array create_dim dim pop_array .)
    DETERMINANT     reduce using rule 48 (dimId -> is_array create_dim dim pop_array .)
    TRANSPOSED      reduce using rule 48 (dimId -> is_array create_dim dim pop_array .)
    INVERSE         reduce using rule 48 (dimId -> is_array create_dim dim pop_array .)
    MULTIPLY        reduce using rule 48 (dimId -> is_array create_dim dim pop_array .)
    DIVIDE          reduce using rule 48 (dimId -> is_array create_dim dim pop_array .)
    SUM             reduce using rule 48 (dimId -> is_array create_dim dim pop_array .)
    SUBTRACT        reduce using rule 48 (dimId -> is_array create_dim dim pop_array .)
    EQUALS          reduce using rule 48 (dimId -> is_array create_dim dim pop_array .)
    NOT_EQUAL       reduce using rule 48 (dimId -> is_array create_dim dim pop_array .)
    LESS_THAN       reduce using rule 48 (dimId -> is_array create_dim dim pop_array .)
    LESS_THAN_EQUAL reduce using rule 48 (dimId -> is_array create_dim dim pop_array .)
    GREATER_THAN    reduce using rule 48 (dimId -> is_array create_dim dim pop_array .)
    GREATER_THAN_EQUAL reduce using rule 48 (dimId -> is_array create_dim dim pop_array .)
    AND             reduce using rule 48 (dimId -> is_array create_dim dim pop_array .)
    OR              reduce using rule 48 (dimId -> is_array create_dim dim pop_array .)
    R_PARENTHESIS   reduce using rule 48 (dimId -> is_array create_dim dim pop_array .)
    COMMA           reduce using rule 48 (dimId -> is_array create_dim dim pop_array .)
    SEMICOLON       reduce using rule 48 (dimId -> is_array create_dim dim pop_array .)
    R_SQUARE_BRACKET reduce using rule 48 (dimId -> is_array create_dim dim pop_array .)
    HASTA           reduce using rule 48 (dimId -> is_array create_dim dim pop_array .)
    HACER           reduce using rule 48 (dimId -> is_array create_dim dim pop_array .)


state 199

    (53) dim -> L_SQUARE_BRACKET bracket_seen . expresion R_SQUARE_BRACKET bracket_seen
    (57) expresion -> . relacional apply_operation_expresion expresionp
    (62) relacional -> . aritmetica apply_operation_relational relacionalp
    (71) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (76) factor -> . matriz apply_operation_factor factorp
    (82) matriz -> . cte matrizp
    (83) matriz -> . NOT operation_seen cte apply_not
    (90) cte -> . CTE_INT
    (91) cte -> . CTE_FLOAT
    (92) cte -> . CTE_CHAR
    (93) cte -> . llamadaFuncion
    (94) cte -> . ID operand_seen dimId
    (95) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (96) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    NOT             shift and go to state 100
    CTE_INT         shift and go to state 101
    CTE_FLOAT       shift and go to state 102
    CTE_CHAR        shift and go to state 103
    ID              shift and go to state 105
    L_PARENTHESIS   shift and go to state 93

    expresion                      shift and go to state 230
    relacional                     shift and go to state 95
    aritmetica                     shift and go to state 96
    factor                         shift and go to state 97
    matriz                         shift and go to state 98
    cte                            shift and go to state 99
    llamadaFuncion                 shift and go to state 104

state 200

    (102) funcionVacia -> ID set_func_scope L_PARENTHESIS llamadaFuncionp R_PARENTHESIS SEMICOLON .

    ID              reduce using rule 102 (funcionVacia -> ID set_func_scope L_PARENTHESIS llamadaFuncionp R_PARENTHESIS SEMICOLON .)
    REGRESA         reduce using rule 102 (funcionVacia -> ID set_func_scope L_PARENTHESIS llamadaFuncionp R_PARENTHESIS SEMICOLON .)
    LECTURA         reduce using rule 102 (funcionVacia -> ID set_func_scope L_PARENTHESIS llamadaFuncionp R_PARENTHESIS SEMICOLON .)
    ESCRIBE         reduce using rule 102 (funcionVacia -> ID set_func_scope L_PARENTHESIS llamadaFuncionp R_PARENTHESIS SEMICOLON .)
    SI              reduce using rule 102 (funcionVacia -> ID set_func_scope L_PARENTHESIS llamadaFuncionp R_PARENTHESIS SEMICOLON .)
    MIENTRAS        reduce using rule 102 (funcionVacia -> ID set_func_scope L_PARENTHESIS llamadaFuncionp R_PARENTHESIS SEMICOLON .)
    DESDE           reduce using rule 102 (funcionVacia -> ID set_func_scope L_PARENTHESIS llamadaFuncionp R_PARENTHESIS SEMICOLON .)
    R_CURLY_BRACKET reduce using rule 102 (funcionVacia -> ID set_func_scope L_PARENTHESIS llamadaFuncionp R_PARENTHESIS SEMICOLON .)


state 201

    (97) llamadaFuncionp -> expresion verify_parameter llamadaFuncionpp .

    R_PARENTHESIS   reduce using rule 97 (llamadaFuncionp -> expresion verify_parameter llamadaFuncionpp .)


state 202

    (99) llamadaFuncionpp -> COMMA . llamadaFuncionp
    (97) llamadaFuncionp -> . expresion verify_parameter llamadaFuncionpp
    (98) llamadaFuncionp -> . empty
    (57) expresion -> . relacional apply_operation_expresion expresionp
    (128) empty -> .
    (62) relacional -> . aritmetica apply_operation_relational relacionalp
    (71) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (76) factor -> . matriz apply_operation_factor factorp
    (82) matriz -> . cte matrizp
    (83) matriz -> . NOT operation_seen cte apply_not
    (90) cte -> . CTE_INT
    (91) cte -> . CTE_FLOAT
    (92) cte -> . CTE_CHAR
    (93) cte -> . llamadaFuncion
    (94) cte -> . ID operand_seen dimId
    (95) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (96) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    R_PARENTHESIS   reduce using rule 128 (empty -> .)
    NOT             shift and go to state 100
    CTE_INT         shift and go to state 101
    CTE_FLOAT       shift and go to state 102
    CTE_CHAR        shift and go to state 103
    ID              shift and go to state 105
    L_PARENTHESIS   shift and go to state 93

    llamadaFuncionp                shift and go to state 231
    expresion                      shift and go to state 121
    empty                          shift and go to state 122
    relacional                     shift and go to state 95
    aritmetica                     shift and go to state 96
    factor                         shift and go to state 97
    matriz                         shift and go to state 98
    cte                            shift and go to state 99
    llamadaFuncion                 shift and go to state 104

state 203

    (100) llamadaFuncionpp -> empty .

    R_PARENTHESIS   reduce using rule 100 (llamadaFuncionpp -> empty .)


state 204

    (95) cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS . operation_seen
    (81) operation_seen -> .

    DETERMINANT     reduce using rule 81 (operation_seen -> .)
    TRANSPOSED      reduce using rule 81 (operation_seen -> .)
    INVERSE         reduce using rule 81 (operation_seen -> .)
    MULTIPLY        reduce using rule 81 (operation_seen -> .)
    DIVIDE          reduce using rule 81 (operation_seen -> .)
    SUM             reduce using rule 81 (operation_seen -> .)
    SUBTRACT        reduce using rule 81 (operation_seen -> .)
    EQUALS          reduce using rule 81 (operation_seen -> .)
    NOT_EQUAL       reduce using rule 81 (operation_seen -> .)
    LESS_THAN       reduce using rule 81 (operation_seen -> .)
    LESS_THAN_EQUAL reduce using rule 81 (operation_seen -> .)
    GREATER_THAN    reduce using rule 81 (operation_seen -> .)
    GREATER_THAN_EQUAL reduce using rule 81 (operation_seen -> .)
    AND             reduce using rule 81 (operation_seen -> .)
    OR              reduce using rule 81 (operation_seen -> .)
    R_PARENTHESIS   reduce using rule 81 (operation_seen -> .)
    COMMA           reduce using rule 81 (operation_seen -> .)
    SEMICOLON       reduce using rule 81 (operation_seen -> .)
    R_SQUARE_BRACKET reduce using rule 81 (operation_seen -> .)
    HASTA           reduce using rule 81 (operation_seen -> .)
    HACER           reduce using rule 81 (operation_seen -> .)

    operation_seen                 shift and go to state 232

state 205

    (58) expresionp -> AND operation_seen . expresion
    (57) expresion -> . relacional apply_operation_expresion expresionp
    (62) relacional -> . aritmetica apply_operation_relational relacionalp
    (71) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (76) factor -> . matriz apply_operation_factor factorp
    (82) matriz -> . cte matrizp
    (83) matriz -> . NOT operation_seen cte apply_not
    (90) cte -> . CTE_INT
    (91) cte -> . CTE_FLOAT
    (92) cte -> . CTE_CHAR
    (93) cte -> . llamadaFuncion
    (94) cte -> . ID operand_seen dimId
    (95) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (96) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    NOT             shift and go to state 100
    CTE_INT         shift and go to state 101
    CTE_FLOAT       shift and go to state 102
    CTE_CHAR        shift and go to state 103
    ID              shift and go to state 105
    L_PARENTHESIS   shift and go to state 93

    expresion                      shift and go to state 233
    relacional                     shift and go to state 95
    aritmetica                     shift and go to state 96
    factor                         shift and go to state 97
    matriz                         shift and go to state 98
    cte                            shift and go to state 99
    llamadaFuncion                 shift and go to state 104

state 206

    (59) expresionp -> OR operation_seen . expresion
    (57) expresion -> . relacional apply_operation_expresion expresionp
    (62) relacional -> . aritmetica apply_operation_relational relacionalp
    (71) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (76) factor -> . matriz apply_operation_factor factorp
    (82) matriz -> . cte matrizp
    (83) matriz -> . NOT operation_seen cte apply_not
    (90) cte -> . CTE_INT
    (91) cte -> . CTE_FLOAT
    (92) cte -> . CTE_CHAR
    (93) cte -> . llamadaFuncion
    (94) cte -> . ID operand_seen dimId
    (95) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (96) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    NOT             shift and go to state 100
    CTE_INT         shift and go to state 101
    CTE_FLOAT       shift and go to state 102
    CTE_CHAR        shift and go to state 103
    ID              shift and go to state 105
    L_PARENTHESIS   shift and go to state 93

    expresion                      shift and go to state 234
    relacional                     shift and go to state 95
    aritmetica                     shift and go to state 96
    factor                         shift and go to state 97
    matriz                         shift and go to state 98
    cte                            shift and go to state 99
    llamadaFuncion                 shift and go to state 104

state 207

    (63) relacionalp -> EQUALS operation_seen . relacional
    (62) relacional -> . aritmetica apply_operation_relational relacionalp
    (71) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (76) factor -> . matriz apply_operation_factor factorp
    (82) matriz -> . cte matrizp
    (83) matriz -> . NOT operation_seen cte apply_not
    (90) cte -> . CTE_INT
    (91) cte -> . CTE_FLOAT
    (92) cte -> . CTE_CHAR
    (93) cte -> . llamadaFuncion
    (94) cte -> . ID operand_seen dimId
    (95) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (96) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    NOT             shift and go to state 100
    CTE_INT         shift and go to state 101
    CTE_FLOAT       shift and go to state 102
    CTE_CHAR        shift and go to state 103
    ID              shift and go to state 105
    L_PARENTHESIS   shift and go to state 93

    relacional                     shift and go to state 235
    aritmetica                     shift and go to state 96
    factor                         shift and go to state 97
    matriz                         shift and go to state 98
    cte                            shift and go to state 99
    llamadaFuncion                 shift and go to state 104

state 208

    (64) relacionalp -> NOT_EQUAL operation_seen . relacional
    (62) relacional -> . aritmetica apply_operation_relational relacionalp
    (71) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (76) factor -> . matriz apply_operation_factor factorp
    (82) matriz -> . cte matrizp
    (83) matriz -> . NOT operation_seen cte apply_not
    (90) cte -> . CTE_INT
    (91) cte -> . CTE_FLOAT
    (92) cte -> . CTE_CHAR
    (93) cte -> . llamadaFuncion
    (94) cte -> . ID operand_seen dimId
    (95) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (96) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    NOT             shift and go to state 100
    CTE_INT         shift and go to state 101
    CTE_FLOAT       shift and go to state 102
    CTE_CHAR        shift and go to state 103
    ID              shift and go to state 105
    L_PARENTHESIS   shift and go to state 93

    relacional                     shift and go to state 236
    aritmetica                     shift and go to state 96
    factor                         shift and go to state 97
    matriz                         shift and go to state 98
    cte                            shift and go to state 99
    llamadaFuncion                 shift and go to state 104

state 209

    (65) relacionalp -> LESS_THAN operation_seen . relacional
    (62) relacional -> . aritmetica apply_operation_relational relacionalp
    (71) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (76) factor -> . matriz apply_operation_factor factorp
    (82) matriz -> . cte matrizp
    (83) matriz -> . NOT operation_seen cte apply_not
    (90) cte -> . CTE_INT
    (91) cte -> . CTE_FLOAT
    (92) cte -> . CTE_CHAR
    (93) cte -> . llamadaFuncion
    (94) cte -> . ID operand_seen dimId
    (95) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (96) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    NOT             shift and go to state 100
    CTE_INT         shift and go to state 101
    CTE_FLOAT       shift and go to state 102
    CTE_CHAR        shift and go to state 103
    ID              shift and go to state 105
    L_PARENTHESIS   shift and go to state 93

    relacional                     shift and go to state 237
    aritmetica                     shift and go to state 96
    factor                         shift and go to state 97
    matriz                         shift and go to state 98
    cte                            shift and go to state 99
    llamadaFuncion                 shift and go to state 104

state 210

    (66) relacionalp -> LESS_THAN_EQUAL operation_seen . relacional
    (62) relacional -> . aritmetica apply_operation_relational relacionalp
    (71) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (76) factor -> . matriz apply_operation_factor factorp
    (82) matriz -> . cte matrizp
    (83) matriz -> . NOT operation_seen cte apply_not
    (90) cte -> . CTE_INT
    (91) cte -> . CTE_FLOAT
    (92) cte -> . CTE_CHAR
    (93) cte -> . llamadaFuncion
    (94) cte -> . ID operand_seen dimId
    (95) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (96) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    NOT             shift and go to state 100
    CTE_INT         shift and go to state 101
    CTE_FLOAT       shift and go to state 102
    CTE_CHAR        shift and go to state 103
    ID              shift and go to state 105
    L_PARENTHESIS   shift and go to state 93

    relacional                     shift and go to state 238
    aritmetica                     shift and go to state 96
    factor                         shift and go to state 97
    matriz                         shift and go to state 98
    cte                            shift and go to state 99
    llamadaFuncion                 shift and go to state 104

state 211

    (67) relacionalp -> GREATER_THAN operation_seen . relacional
    (62) relacional -> . aritmetica apply_operation_relational relacionalp
    (71) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (76) factor -> . matriz apply_operation_factor factorp
    (82) matriz -> . cte matrizp
    (83) matriz -> . NOT operation_seen cte apply_not
    (90) cte -> . CTE_INT
    (91) cte -> . CTE_FLOAT
    (92) cte -> . CTE_CHAR
    (93) cte -> . llamadaFuncion
    (94) cte -> . ID operand_seen dimId
    (95) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (96) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    NOT             shift and go to state 100
    CTE_INT         shift and go to state 101
    CTE_FLOAT       shift and go to state 102
    CTE_CHAR        shift and go to state 103
    ID              shift and go to state 105
    L_PARENTHESIS   shift and go to state 93

    relacional                     shift and go to state 239
    aritmetica                     shift and go to state 96
    factor                         shift and go to state 97
    matriz                         shift and go to state 98
    cte                            shift and go to state 99
    llamadaFuncion                 shift and go to state 104

state 212

    (68) relacionalp -> GREATER_THAN_EQUAL operation_seen . relacional
    (62) relacional -> . aritmetica apply_operation_relational relacionalp
    (71) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (76) factor -> . matriz apply_operation_factor factorp
    (82) matriz -> . cte matrizp
    (83) matriz -> . NOT operation_seen cte apply_not
    (90) cte -> . CTE_INT
    (91) cte -> . CTE_FLOAT
    (92) cte -> . CTE_CHAR
    (93) cte -> . llamadaFuncion
    (94) cte -> . ID operand_seen dimId
    (95) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (96) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    NOT             shift and go to state 100
    CTE_INT         shift and go to state 101
    CTE_FLOAT       shift and go to state 102
    CTE_CHAR        shift and go to state 103
    ID              shift and go to state 105
    L_PARENTHESIS   shift and go to state 93

    relacional                     shift and go to state 240
    aritmetica                     shift and go to state 96
    factor                         shift and go to state 97
    matriz                         shift and go to state 98
    cte                            shift and go to state 99
    llamadaFuncion                 shift and go to state 104

state 213

    (72) aritmeticap -> SUM operation_seen . aritmetica
    (71) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (76) factor -> . matriz apply_operation_factor factorp
    (82) matriz -> . cte matrizp
    (83) matriz -> . NOT operation_seen cte apply_not
    (90) cte -> . CTE_INT
    (91) cte -> . CTE_FLOAT
    (92) cte -> . CTE_CHAR
    (93) cte -> . llamadaFuncion
    (94) cte -> . ID operand_seen dimId
    (95) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (96) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    NOT             shift and go to state 100
    CTE_INT         shift and go to state 101
    CTE_FLOAT       shift and go to state 102
    CTE_CHAR        shift and go to state 103
    ID              shift and go to state 105
    L_PARENTHESIS   shift and go to state 93

    aritmetica                     shift and go to state 241
    factor                         shift and go to state 97
    matriz                         shift and go to state 98
    cte                            shift and go to state 99
    llamadaFuncion                 shift and go to state 104

state 214

    (73) aritmeticap -> SUBTRACT operation_seen . aritmetica
    (71) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (76) factor -> . matriz apply_operation_factor factorp
    (82) matriz -> . cte matrizp
    (83) matriz -> . NOT operation_seen cte apply_not
    (90) cte -> . CTE_INT
    (91) cte -> . CTE_FLOAT
    (92) cte -> . CTE_CHAR
    (93) cte -> . llamadaFuncion
    (94) cte -> . ID operand_seen dimId
    (95) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (96) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    NOT             shift and go to state 100
    CTE_INT         shift and go to state 101
    CTE_FLOAT       shift and go to state 102
    CTE_CHAR        shift and go to state 103
    ID              shift and go to state 105
    L_PARENTHESIS   shift and go to state 93

    aritmetica                     shift and go to state 242
    factor                         shift and go to state 97
    matriz                         shift and go to state 98
    cte                            shift and go to state 99
    llamadaFuncion                 shift and go to state 104

state 215

    (77) factorp -> MULTIPLY operation_seen . factor
    (76) factor -> . matriz apply_operation_factor factorp
    (82) matriz -> . cte matrizp
    (83) matriz -> . NOT operation_seen cte apply_not
    (90) cte -> . CTE_INT
    (91) cte -> . CTE_FLOAT
    (92) cte -> . CTE_CHAR
    (93) cte -> . llamadaFuncion
    (94) cte -> . ID operand_seen dimId
    (95) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (96) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    NOT             shift and go to state 100
    CTE_INT         shift and go to state 101
    CTE_FLOAT       shift and go to state 102
    CTE_CHAR        shift and go to state 103
    ID              shift and go to state 105
    L_PARENTHESIS   shift and go to state 93

    factor                         shift and go to state 243
    matriz                         shift and go to state 98
    cte                            shift and go to state 99
    llamadaFuncion                 shift and go to state 104

state 216

    (78) factorp -> DIVIDE operation_seen . factor
    (76) factor -> . matriz apply_operation_factor factorp
    (82) matriz -> . cte matrizp
    (83) matriz -> . NOT operation_seen cte apply_not
    (90) cte -> . CTE_INT
    (91) cte -> . CTE_FLOAT
    (92) cte -> . CTE_CHAR
    (93) cte -> . llamadaFuncion
    (94) cte -> . ID operand_seen dimId
    (95) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (96) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    NOT             shift and go to state 100
    CTE_INT         shift and go to state 101
    CTE_FLOAT       shift and go to state 102
    CTE_CHAR        shift and go to state 103
    ID              shift and go to state 105
    L_PARENTHESIS   shift and go to state 93

    factor                         shift and go to state 244
    matriz                         shift and go to state 98
    cte                            shift and go to state 99
    llamadaFuncion                 shift and go to state 104

state 217

    (85) matrizp -> DETERMINANT operation_seen apply_mat .

    MULTIPLY        reduce using rule 85 (matrizp -> DETERMINANT operation_seen apply_mat .)
    DIVIDE          reduce using rule 85 (matrizp -> DETERMINANT operation_seen apply_mat .)
    SUM             reduce using rule 85 (matrizp -> DETERMINANT operation_seen apply_mat .)
    SUBTRACT        reduce using rule 85 (matrizp -> DETERMINANT operation_seen apply_mat .)
    EQUALS          reduce using rule 85 (matrizp -> DETERMINANT operation_seen apply_mat .)
    NOT_EQUAL       reduce using rule 85 (matrizp -> DETERMINANT operation_seen apply_mat .)
    LESS_THAN       reduce using rule 85 (matrizp -> DETERMINANT operation_seen apply_mat .)
    LESS_THAN_EQUAL reduce using rule 85 (matrizp -> DETERMINANT operation_seen apply_mat .)
    GREATER_THAN    reduce using rule 85 (matrizp -> DETERMINANT operation_seen apply_mat .)
    GREATER_THAN_EQUAL reduce using rule 85 (matrizp -> DETERMINANT operation_seen apply_mat .)
    AND             reduce using rule 85 (matrizp -> DETERMINANT operation_seen apply_mat .)
    OR              reduce using rule 85 (matrizp -> DETERMINANT operation_seen apply_mat .)
    R_PARENTHESIS   reduce using rule 85 (matrizp -> DETERMINANT operation_seen apply_mat .)
    COMMA           reduce using rule 85 (matrizp -> DETERMINANT operation_seen apply_mat .)
    SEMICOLON       reduce using rule 85 (matrizp -> DETERMINANT operation_seen apply_mat .)
    R_SQUARE_BRACKET reduce using rule 85 (matrizp -> DETERMINANT operation_seen apply_mat .)
    HASTA           reduce using rule 85 (matrizp -> DETERMINANT operation_seen apply_mat .)
    HACER           reduce using rule 85 (matrizp -> DETERMINANT operation_seen apply_mat .)


state 218

    (86) matrizp -> TRANSPOSED operation_seen apply_mat .

    MULTIPLY        reduce using rule 86 (matrizp -> TRANSPOSED operation_seen apply_mat .)
    DIVIDE          reduce using rule 86 (matrizp -> TRANSPOSED operation_seen apply_mat .)
    SUM             reduce using rule 86 (matrizp -> TRANSPOSED operation_seen apply_mat .)
    SUBTRACT        reduce using rule 86 (matrizp -> TRANSPOSED operation_seen apply_mat .)
    EQUALS          reduce using rule 86 (matrizp -> TRANSPOSED operation_seen apply_mat .)
    NOT_EQUAL       reduce using rule 86 (matrizp -> TRANSPOSED operation_seen apply_mat .)
    LESS_THAN       reduce using rule 86 (matrizp -> TRANSPOSED operation_seen apply_mat .)
    LESS_THAN_EQUAL reduce using rule 86 (matrizp -> TRANSPOSED operation_seen apply_mat .)
    GREATER_THAN    reduce using rule 86 (matrizp -> TRANSPOSED operation_seen apply_mat .)
    GREATER_THAN_EQUAL reduce using rule 86 (matrizp -> TRANSPOSED operation_seen apply_mat .)
    AND             reduce using rule 86 (matrizp -> TRANSPOSED operation_seen apply_mat .)
    OR              reduce using rule 86 (matrizp -> TRANSPOSED operation_seen apply_mat .)
    R_PARENTHESIS   reduce using rule 86 (matrizp -> TRANSPOSED operation_seen apply_mat .)
    COMMA           reduce using rule 86 (matrizp -> TRANSPOSED operation_seen apply_mat .)
    SEMICOLON       reduce using rule 86 (matrizp -> TRANSPOSED operation_seen apply_mat .)
    R_SQUARE_BRACKET reduce using rule 86 (matrizp -> TRANSPOSED operation_seen apply_mat .)
    HASTA           reduce using rule 86 (matrizp -> TRANSPOSED operation_seen apply_mat .)
    HACER           reduce using rule 86 (matrizp -> TRANSPOSED operation_seen apply_mat .)


state 219

    (87) matrizp -> INVERSE operation_seen apply_mat .

    MULTIPLY        reduce using rule 87 (matrizp -> INVERSE operation_seen apply_mat .)
    DIVIDE          reduce using rule 87 (matrizp -> INVERSE operation_seen apply_mat .)
    SUM             reduce using rule 87 (matrizp -> INVERSE operation_seen apply_mat .)
    SUBTRACT        reduce using rule 87 (matrizp -> INVERSE operation_seen apply_mat .)
    EQUALS          reduce using rule 87 (matrizp -> INVERSE operation_seen apply_mat .)
    NOT_EQUAL       reduce using rule 87 (matrizp -> INVERSE operation_seen apply_mat .)
    LESS_THAN       reduce using rule 87 (matrizp -> INVERSE operation_seen apply_mat .)
    LESS_THAN_EQUAL reduce using rule 87 (matrizp -> INVERSE operation_seen apply_mat .)
    GREATER_THAN    reduce using rule 87 (matrizp -> INVERSE operation_seen apply_mat .)
    GREATER_THAN_EQUAL reduce using rule 87 (matrizp -> INVERSE operation_seen apply_mat .)
    AND             reduce using rule 87 (matrizp -> INVERSE operation_seen apply_mat .)
    OR              reduce using rule 87 (matrizp -> INVERSE operation_seen apply_mat .)
    R_PARENTHESIS   reduce using rule 87 (matrizp -> INVERSE operation_seen apply_mat .)
    COMMA           reduce using rule 87 (matrizp -> INVERSE operation_seen apply_mat .)
    SEMICOLON       reduce using rule 87 (matrizp -> INVERSE operation_seen apply_mat .)
    R_SQUARE_BRACKET reduce using rule 87 (matrizp -> INVERSE operation_seen apply_mat .)
    HASTA           reduce using rule 87 (matrizp -> INVERSE operation_seen apply_mat .)
    HACER           reduce using rule 87 (matrizp -> INVERSE operation_seen apply_mat .)


state 220

    (83) matriz -> NOT operation_seen cte apply_not .

    MULTIPLY        reduce using rule 83 (matriz -> NOT operation_seen cte apply_not .)
    DIVIDE          reduce using rule 83 (matriz -> NOT operation_seen cte apply_not .)
    SUM             reduce using rule 83 (matriz -> NOT operation_seen cte apply_not .)
    SUBTRACT        reduce using rule 83 (matriz -> NOT operation_seen cte apply_not .)
    EQUALS          reduce using rule 83 (matriz -> NOT operation_seen cte apply_not .)
    NOT_EQUAL       reduce using rule 83 (matriz -> NOT operation_seen cte apply_not .)
    LESS_THAN       reduce using rule 83 (matriz -> NOT operation_seen cte apply_not .)
    LESS_THAN_EQUAL reduce using rule 83 (matriz -> NOT operation_seen cte apply_not .)
    GREATER_THAN    reduce using rule 83 (matriz -> NOT operation_seen cte apply_not .)
    GREATER_THAN_EQUAL reduce using rule 83 (matriz -> NOT operation_seen cte apply_not .)
    AND             reduce using rule 83 (matriz -> NOT operation_seen cte apply_not .)
    OR              reduce using rule 83 (matriz -> NOT operation_seen cte apply_not .)
    R_PARENTHESIS   reduce using rule 83 (matriz -> NOT operation_seen cte apply_not .)
    COMMA           reduce using rule 83 (matriz -> NOT operation_seen cte apply_not .)
    SEMICOLON       reduce using rule 83 (matriz -> NOT operation_seen cte apply_not .)
    R_SQUARE_BRACKET reduce using rule 83 (matriz -> NOT operation_seen cte apply_not .)
    HASTA           reduce using rule 83 (matriz -> NOT operation_seen cte apply_not .)
    HACER           reduce using rule 83 (matriz -> NOT operation_seen cte apply_not .)


state 221

    (96) llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen . llamadaFuncionp R_PARENTHESIS operation_seen
    (97) llamadaFuncionp -> . expresion verify_parameter llamadaFuncionpp
    (98) llamadaFuncionp -> . empty
    (57) expresion -> . relacional apply_operation_expresion expresionp
    (128) empty -> .
    (62) relacional -> . aritmetica apply_operation_relational relacionalp
    (71) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (76) factor -> . matriz apply_operation_factor factorp
    (82) matriz -> . cte matrizp
    (83) matriz -> . NOT operation_seen cte apply_not
    (90) cte -> . CTE_INT
    (91) cte -> . CTE_FLOAT
    (92) cte -> . CTE_CHAR
    (93) cte -> . llamadaFuncion
    (94) cte -> . ID operand_seen dimId
    (95) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (96) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    R_PARENTHESIS   reduce using rule 128 (empty -> .)
    NOT             shift and go to state 100
    CTE_INT         shift and go to state 101
    CTE_FLOAT       shift and go to state 102
    CTE_CHAR        shift and go to state 103
    ID              shift and go to state 105
    L_PARENTHESIS   shift and go to state 93

    llamadaFuncionp                shift and go to state 245
    expresion                      shift and go to state 121
    empty                          shift and go to state 122
    relacional                     shift and go to state 95
    aritmetica                     shift and go to state 96
    factor                         shift and go to state 97
    matriz                         shift and go to state 98
    cte                            shift and go to state 99
    llamadaFuncion                 shift and go to state 104

state 222

    (106) lecturap -> ID operand_seen dimId gen_input . lecturapp
    (108) lecturapp -> . COMMA lecturap
    (109) lecturapp -> . empty
    (128) empty -> .

    COMMA           shift and go to state 247
    R_PARENTHESIS   reduce using rule 128 (empty -> .)

    lecturapp                      shift and go to state 246
    empty                          shift and go to state 248

state 223

    (114) escriturapp -> COMMA escriturap .

    R_PARENTHESIS   reduce using rule 114 (escriturapp -> COMMA escriturap .)


state 224

    (116) decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ . bloque decisionp
    (35) bloque -> . L_CURLY_BRACKET bloquep R_CURLY_BRACKET

    L_CURLY_BRACKET shift and go to state 39

    bloque                         shift and go to state 249

state 225

    (122) cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false . HAZ bloque update_jump_cycle

    HAZ             shift and go to state 250


state 226

    (125) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen . expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle
    (57) expresion -> . relacional apply_operation_expresion expresionp
    (62) relacional -> . aritmetica apply_operation_relational relacionalp
    (71) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (76) factor -> . matriz apply_operation_factor factorp
    (82) matriz -> . cte matrizp
    (83) matriz -> . NOT operation_seen cte apply_not
    (90) cte -> . CTE_INT
    (91) cte -> . CTE_FLOAT
    (92) cte -> . CTE_CHAR
    (93) cte -> . llamadaFuncion
    (94) cte -> . ID operand_seen dimId
    (95) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (96) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    NOT             shift and go to state 100
    CTE_INT         shift and go to state 101
    CTE_FLOAT       shift and go to state 102
    CTE_CHAR        shift and go to state 103
    ID              shift and go to state 105
    L_PARENTHESIS   shift and go to state 93

    expresion                      shift and go to state 251
    relacional                     shift and go to state 95
    aritmetica                     shift and go to state 96
    factor                         shift and go to state 97
    matriz                         shift and go to state 98
    cte                            shift and go to state 99
    llamadaFuncion                 shift and go to state 104

state 227

    (31) parametrop -> COMMA tipo ID save_param parametrop .

    R_PARENTHESIS   reduce using rule 31 (parametrop -> COMMA tipo ID save_param parametrop .)


state 228

    (46) asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign . SEMICOLON

    SEMICOLON       shift and go to state 252


state 229

    (49) dimId -> is_array create_dim dim dim pop_array .

    ASSIGN          reduce using rule 49 (dimId -> is_array create_dim dim dim pop_array .)
    DETERMINANT     reduce using rule 49 (dimId -> is_array create_dim dim dim pop_array .)
    TRANSPOSED      reduce using rule 49 (dimId -> is_array create_dim dim dim pop_array .)
    INVERSE         reduce using rule 49 (dimId -> is_array create_dim dim dim pop_array .)
    MULTIPLY        reduce using rule 49 (dimId -> is_array create_dim dim dim pop_array .)
    DIVIDE          reduce using rule 49 (dimId -> is_array create_dim dim dim pop_array .)
    SUM             reduce using rule 49 (dimId -> is_array create_dim dim dim pop_array .)
    SUBTRACT        reduce using rule 49 (dimId -> is_array create_dim dim dim pop_array .)
    EQUALS          reduce using rule 49 (dimId -> is_array create_dim dim dim pop_array .)
    NOT_EQUAL       reduce using rule 49 (dimId -> is_array create_dim dim dim pop_array .)
    LESS_THAN       reduce using rule 49 (dimId -> is_array create_dim dim dim pop_array .)
    LESS_THAN_EQUAL reduce using rule 49 (dimId -> is_array create_dim dim dim pop_array .)
    GREATER_THAN    reduce using rule 49 (dimId -> is_array create_dim dim dim pop_array .)
    GREATER_THAN_EQUAL reduce using rule 49 (dimId -> is_array create_dim dim dim pop_array .)
    AND             reduce using rule 49 (dimId -> is_array create_dim dim dim pop_array .)
    OR              reduce using rule 49 (dimId -> is_array create_dim dim dim pop_array .)
    R_PARENTHESIS   reduce using rule 49 (dimId -> is_array create_dim dim dim pop_array .)
    COMMA           reduce using rule 49 (dimId -> is_array create_dim dim dim pop_array .)
    SEMICOLON       reduce using rule 49 (dimId -> is_array create_dim dim dim pop_array .)
    R_SQUARE_BRACKET reduce using rule 49 (dimId -> is_array create_dim dim dim pop_array .)
    HASTA           reduce using rule 49 (dimId -> is_array create_dim dim dim pop_array .)
    HACER           reduce using rule 49 (dimId -> is_array create_dim dim dim pop_array .)


state 230

    (53) dim -> L_SQUARE_BRACKET bracket_seen expresion . R_SQUARE_BRACKET bracket_seen

    R_SQUARE_BRACKET shift and go to state 253


state 231

    (99) llamadaFuncionpp -> COMMA llamadaFuncionp .

    R_PARENTHESIS   reduce using rule 99 (llamadaFuncionpp -> COMMA llamadaFuncionp .)


state 232

    (95) cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .

    DETERMINANT     reduce using rule 95 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    TRANSPOSED      reduce using rule 95 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    INVERSE         reduce using rule 95 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    MULTIPLY        reduce using rule 95 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    DIVIDE          reduce using rule 95 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    SUM             reduce using rule 95 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    SUBTRACT        reduce using rule 95 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    EQUALS          reduce using rule 95 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    NOT_EQUAL       reduce using rule 95 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    LESS_THAN       reduce using rule 95 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    LESS_THAN_EQUAL reduce using rule 95 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    GREATER_THAN    reduce using rule 95 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    GREATER_THAN_EQUAL reduce using rule 95 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    AND             reduce using rule 95 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    OR              reduce using rule 95 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    R_PARENTHESIS   reduce using rule 95 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    COMMA           reduce using rule 95 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    SEMICOLON       reduce using rule 95 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    R_SQUARE_BRACKET reduce using rule 95 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    HASTA           reduce using rule 95 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)
    HACER           reduce using rule 95 (cte -> L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen .)


state 233

    (58) expresionp -> AND operation_seen expresion .

    R_PARENTHESIS   reduce using rule 58 (expresionp -> AND operation_seen expresion .)
    COMMA           reduce using rule 58 (expresionp -> AND operation_seen expresion .)
    SEMICOLON       reduce using rule 58 (expresionp -> AND operation_seen expresion .)
    R_SQUARE_BRACKET reduce using rule 58 (expresionp -> AND operation_seen expresion .)
    HASTA           reduce using rule 58 (expresionp -> AND operation_seen expresion .)
    HACER           reduce using rule 58 (expresionp -> AND operation_seen expresion .)


state 234

    (59) expresionp -> OR operation_seen expresion .

    R_PARENTHESIS   reduce using rule 59 (expresionp -> OR operation_seen expresion .)
    COMMA           reduce using rule 59 (expresionp -> OR operation_seen expresion .)
    SEMICOLON       reduce using rule 59 (expresionp -> OR operation_seen expresion .)
    R_SQUARE_BRACKET reduce using rule 59 (expresionp -> OR operation_seen expresion .)
    HASTA           reduce using rule 59 (expresionp -> OR operation_seen expresion .)
    HACER           reduce using rule 59 (expresionp -> OR operation_seen expresion .)


state 235

    (63) relacionalp -> EQUALS operation_seen relacional .

    AND             reduce using rule 63 (relacionalp -> EQUALS operation_seen relacional .)
    OR              reduce using rule 63 (relacionalp -> EQUALS operation_seen relacional .)
    R_PARENTHESIS   reduce using rule 63 (relacionalp -> EQUALS operation_seen relacional .)
    COMMA           reduce using rule 63 (relacionalp -> EQUALS operation_seen relacional .)
    SEMICOLON       reduce using rule 63 (relacionalp -> EQUALS operation_seen relacional .)
    R_SQUARE_BRACKET reduce using rule 63 (relacionalp -> EQUALS operation_seen relacional .)
    HASTA           reduce using rule 63 (relacionalp -> EQUALS operation_seen relacional .)
    HACER           reduce using rule 63 (relacionalp -> EQUALS operation_seen relacional .)


state 236

    (64) relacionalp -> NOT_EQUAL operation_seen relacional .

    AND             reduce using rule 64 (relacionalp -> NOT_EQUAL operation_seen relacional .)
    OR              reduce using rule 64 (relacionalp -> NOT_EQUAL operation_seen relacional .)
    R_PARENTHESIS   reduce using rule 64 (relacionalp -> NOT_EQUAL operation_seen relacional .)
    COMMA           reduce using rule 64 (relacionalp -> NOT_EQUAL operation_seen relacional .)
    SEMICOLON       reduce using rule 64 (relacionalp -> NOT_EQUAL operation_seen relacional .)
    R_SQUARE_BRACKET reduce using rule 64 (relacionalp -> NOT_EQUAL operation_seen relacional .)
    HASTA           reduce using rule 64 (relacionalp -> NOT_EQUAL operation_seen relacional .)
    HACER           reduce using rule 64 (relacionalp -> NOT_EQUAL operation_seen relacional .)


state 237

    (65) relacionalp -> LESS_THAN operation_seen relacional .

    AND             reduce using rule 65 (relacionalp -> LESS_THAN operation_seen relacional .)
    OR              reduce using rule 65 (relacionalp -> LESS_THAN operation_seen relacional .)
    R_PARENTHESIS   reduce using rule 65 (relacionalp -> LESS_THAN operation_seen relacional .)
    COMMA           reduce using rule 65 (relacionalp -> LESS_THAN operation_seen relacional .)
    SEMICOLON       reduce using rule 65 (relacionalp -> LESS_THAN operation_seen relacional .)
    R_SQUARE_BRACKET reduce using rule 65 (relacionalp -> LESS_THAN operation_seen relacional .)
    HASTA           reduce using rule 65 (relacionalp -> LESS_THAN operation_seen relacional .)
    HACER           reduce using rule 65 (relacionalp -> LESS_THAN operation_seen relacional .)


state 238

    (66) relacionalp -> LESS_THAN_EQUAL operation_seen relacional .

    AND             reduce using rule 66 (relacionalp -> LESS_THAN_EQUAL operation_seen relacional .)
    OR              reduce using rule 66 (relacionalp -> LESS_THAN_EQUAL operation_seen relacional .)
    R_PARENTHESIS   reduce using rule 66 (relacionalp -> LESS_THAN_EQUAL operation_seen relacional .)
    COMMA           reduce using rule 66 (relacionalp -> LESS_THAN_EQUAL operation_seen relacional .)
    SEMICOLON       reduce using rule 66 (relacionalp -> LESS_THAN_EQUAL operation_seen relacional .)
    R_SQUARE_BRACKET reduce using rule 66 (relacionalp -> LESS_THAN_EQUAL operation_seen relacional .)
    HASTA           reduce using rule 66 (relacionalp -> LESS_THAN_EQUAL operation_seen relacional .)
    HACER           reduce using rule 66 (relacionalp -> LESS_THAN_EQUAL operation_seen relacional .)


state 239

    (67) relacionalp -> GREATER_THAN operation_seen relacional .

    AND             reduce using rule 67 (relacionalp -> GREATER_THAN operation_seen relacional .)
    OR              reduce using rule 67 (relacionalp -> GREATER_THAN operation_seen relacional .)
    R_PARENTHESIS   reduce using rule 67 (relacionalp -> GREATER_THAN operation_seen relacional .)
    COMMA           reduce using rule 67 (relacionalp -> GREATER_THAN operation_seen relacional .)
    SEMICOLON       reduce using rule 67 (relacionalp -> GREATER_THAN operation_seen relacional .)
    R_SQUARE_BRACKET reduce using rule 67 (relacionalp -> GREATER_THAN operation_seen relacional .)
    HASTA           reduce using rule 67 (relacionalp -> GREATER_THAN operation_seen relacional .)
    HACER           reduce using rule 67 (relacionalp -> GREATER_THAN operation_seen relacional .)


state 240

    (68) relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .

    AND             reduce using rule 68 (relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .)
    OR              reduce using rule 68 (relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .)
    R_PARENTHESIS   reduce using rule 68 (relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .)
    COMMA           reduce using rule 68 (relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .)
    SEMICOLON       reduce using rule 68 (relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .)
    R_SQUARE_BRACKET reduce using rule 68 (relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .)
    HASTA           reduce using rule 68 (relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .)
    HACER           reduce using rule 68 (relacionalp -> GREATER_THAN_EQUAL operation_seen relacional .)


state 241

    (72) aritmeticap -> SUM operation_seen aritmetica .

    EQUALS          reduce using rule 72 (aritmeticap -> SUM operation_seen aritmetica .)
    NOT_EQUAL       reduce using rule 72 (aritmeticap -> SUM operation_seen aritmetica .)
    LESS_THAN       reduce using rule 72 (aritmeticap -> SUM operation_seen aritmetica .)
    LESS_THAN_EQUAL reduce using rule 72 (aritmeticap -> SUM operation_seen aritmetica .)
    GREATER_THAN    reduce using rule 72 (aritmeticap -> SUM operation_seen aritmetica .)
    GREATER_THAN_EQUAL reduce using rule 72 (aritmeticap -> SUM operation_seen aritmetica .)
    AND             reduce using rule 72 (aritmeticap -> SUM operation_seen aritmetica .)
    OR              reduce using rule 72 (aritmeticap -> SUM operation_seen aritmetica .)
    R_PARENTHESIS   reduce using rule 72 (aritmeticap -> SUM operation_seen aritmetica .)
    COMMA           reduce using rule 72 (aritmeticap -> SUM operation_seen aritmetica .)
    SEMICOLON       reduce using rule 72 (aritmeticap -> SUM operation_seen aritmetica .)
    R_SQUARE_BRACKET reduce using rule 72 (aritmeticap -> SUM operation_seen aritmetica .)
    HASTA           reduce using rule 72 (aritmeticap -> SUM operation_seen aritmetica .)
    HACER           reduce using rule 72 (aritmeticap -> SUM operation_seen aritmetica .)


state 242

    (73) aritmeticap -> SUBTRACT operation_seen aritmetica .

    EQUALS          reduce using rule 73 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    NOT_EQUAL       reduce using rule 73 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    LESS_THAN       reduce using rule 73 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    LESS_THAN_EQUAL reduce using rule 73 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    GREATER_THAN    reduce using rule 73 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    GREATER_THAN_EQUAL reduce using rule 73 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    AND             reduce using rule 73 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    OR              reduce using rule 73 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    R_PARENTHESIS   reduce using rule 73 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    COMMA           reduce using rule 73 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    SEMICOLON       reduce using rule 73 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    R_SQUARE_BRACKET reduce using rule 73 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    HASTA           reduce using rule 73 (aritmeticap -> SUBTRACT operation_seen aritmetica .)
    HACER           reduce using rule 73 (aritmeticap -> SUBTRACT operation_seen aritmetica .)


state 243

    (77) factorp -> MULTIPLY operation_seen factor .

    SUM             reduce using rule 77 (factorp -> MULTIPLY operation_seen factor .)
    SUBTRACT        reduce using rule 77 (factorp -> MULTIPLY operation_seen factor .)
    EQUALS          reduce using rule 77 (factorp -> MULTIPLY operation_seen factor .)
    NOT_EQUAL       reduce using rule 77 (factorp -> MULTIPLY operation_seen factor .)
    LESS_THAN       reduce using rule 77 (factorp -> MULTIPLY operation_seen factor .)
    LESS_THAN_EQUAL reduce using rule 77 (factorp -> MULTIPLY operation_seen factor .)
    GREATER_THAN    reduce using rule 77 (factorp -> MULTIPLY operation_seen factor .)
    GREATER_THAN_EQUAL reduce using rule 77 (factorp -> MULTIPLY operation_seen factor .)
    AND             reduce using rule 77 (factorp -> MULTIPLY operation_seen factor .)
    OR              reduce using rule 77 (factorp -> MULTIPLY operation_seen factor .)
    R_PARENTHESIS   reduce using rule 77 (factorp -> MULTIPLY operation_seen factor .)
    COMMA           reduce using rule 77 (factorp -> MULTIPLY operation_seen factor .)
    SEMICOLON       reduce using rule 77 (factorp -> MULTIPLY operation_seen factor .)
    R_SQUARE_BRACKET reduce using rule 77 (factorp -> MULTIPLY operation_seen factor .)
    HASTA           reduce using rule 77 (factorp -> MULTIPLY operation_seen factor .)
    HACER           reduce using rule 77 (factorp -> MULTIPLY operation_seen factor .)


state 244

    (78) factorp -> DIVIDE operation_seen factor .

    SUM             reduce using rule 78 (factorp -> DIVIDE operation_seen factor .)
    SUBTRACT        reduce using rule 78 (factorp -> DIVIDE operation_seen factor .)
    EQUALS          reduce using rule 78 (factorp -> DIVIDE operation_seen factor .)
    NOT_EQUAL       reduce using rule 78 (factorp -> DIVIDE operation_seen factor .)
    LESS_THAN       reduce using rule 78 (factorp -> DIVIDE operation_seen factor .)
    LESS_THAN_EQUAL reduce using rule 78 (factorp -> DIVIDE operation_seen factor .)
    GREATER_THAN    reduce using rule 78 (factorp -> DIVIDE operation_seen factor .)
    GREATER_THAN_EQUAL reduce using rule 78 (factorp -> DIVIDE operation_seen factor .)
    AND             reduce using rule 78 (factorp -> DIVIDE operation_seen factor .)
    OR              reduce using rule 78 (factorp -> DIVIDE operation_seen factor .)
    R_PARENTHESIS   reduce using rule 78 (factorp -> DIVIDE operation_seen factor .)
    COMMA           reduce using rule 78 (factorp -> DIVIDE operation_seen factor .)
    SEMICOLON       reduce using rule 78 (factorp -> DIVIDE operation_seen factor .)
    R_SQUARE_BRACKET reduce using rule 78 (factorp -> DIVIDE operation_seen factor .)
    HASTA           reduce using rule 78 (factorp -> DIVIDE operation_seen factor .)
    HACER           reduce using rule 78 (factorp -> DIVIDE operation_seen factor .)


state 245

    (96) llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp . R_PARENTHESIS operation_seen

    R_PARENTHESIS   shift and go to state 254


state 246

    (106) lecturap -> ID operand_seen dimId gen_input lecturapp .

    R_PARENTHESIS   reduce using rule 106 (lecturap -> ID operand_seen dimId gen_input lecturapp .)


state 247

    (108) lecturapp -> COMMA . lecturap
    (106) lecturap -> . ID operand_seen dimId gen_input lecturapp

    ID              shift and go to state 107

    lecturap                       shift and go to state 255

state 248

    (109) lecturapp -> empty .

    R_PARENTHESIS   reduce using rule 109 (lecturapp -> empty .)


state 249

    (116) decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque . decisionp
    (119) decisionp -> . SINO jump_else bloque update_jump
    (120) decisionp -> . empty update_jump
    (128) empty -> .

    SINO            shift and go to state 257
    ID              reduce using rule 128 (empty -> .)
    REGRESA         reduce using rule 128 (empty -> .)
    LECTURA         reduce using rule 128 (empty -> .)
    ESCRIBE         reduce using rule 128 (empty -> .)
    SI              reduce using rule 128 (empty -> .)
    MIENTRAS        reduce using rule 128 (empty -> .)
    DESDE           reduce using rule 128 (empty -> .)
    R_CURLY_BRACKET reduce using rule 128 (empty -> .)

    decisionp                      shift and go to state 256
    empty                          shift and go to state 258

state 250

    (122) cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ . bloque update_jump_cycle
    (35) bloque -> . L_CURLY_BRACKET bloquep R_CURLY_BRACKET

    L_CURLY_BRACKET shift and go to state 39

    bloque                         shift and go to state 259

state 251

    (125) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion . apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle
    (56) apply_operation_assign -> .

    HASTA           reduce using rule 56 (apply_operation_assign -> .)

    apply_operation_assign         shift and go to state 260

state 252

    (46) asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON .

    ID              reduce using rule 46 (asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON .)
    REGRESA         reduce using rule 46 (asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON .)
    LECTURA         reduce using rule 46 (asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON .)
    ESCRIBE         reduce using rule 46 (asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON .)
    SI              reduce using rule 46 (asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON .)
    MIENTRAS        reduce using rule 46 (asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON .)
    DESDE           reduce using rule 46 (asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON .)
    R_CURLY_BRACKET reduce using rule 46 (asignacion -> ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign SEMICOLON .)


state 253

    (53) dim -> L_SQUARE_BRACKET bracket_seen expresion R_SQUARE_BRACKET . bracket_seen
    (55) bracket_seen -> .

    L_SQUARE_BRACKET reduce using rule 55 (bracket_seen -> .)
    ASSIGN          reduce using rule 55 (bracket_seen -> .)
    DETERMINANT     reduce using rule 55 (bracket_seen -> .)
    TRANSPOSED      reduce using rule 55 (bracket_seen -> .)
    INVERSE         reduce using rule 55 (bracket_seen -> .)
    MULTIPLY        reduce using rule 55 (bracket_seen -> .)
    DIVIDE          reduce using rule 55 (bracket_seen -> .)
    SUM             reduce using rule 55 (bracket_seen -> .)
    SUBTRACT        reduce using rule 55 (bracket_seen -> .)
    EQUALS          reduce using rule 55 (bracket_seen -> .)
    NOT_EQUAL       reduce using rule 55 (bracket_seen -> .)
    LESS_THAN       reduce using rule 55 (bracket_seen -> .)
    LESS_THAN_EQUAL reduce using rule 55 (bracket_seen -> .)
    GREATER_THAN    reduce using rule 55 (bracket_seen -> .)
    GREATER_THAN_EQUAL reduce using rule 55 (bracket_seen -> .)
    AND             reduce using rule 55 (bracket_seen -> .)
    OR              reduce using rule 55 (bracket_seen -> .)
    R_PARENTHESIS   reduce using rule 55 (bracket_seen -> .)
    COMMA           reduce using rule 55 (bracket_seen -> .)
    SEMICOLON       reduce using rule 55 (bracket_seen -> .)
    R_SQUARE_BRACKET reduce using rule 55 (bracket_seen -> .)
    HASTA           reduce using rule 55 (bracket_seen -> .)
    HACER           reduce using rule 55 (bracket_seen -> .)

    bracket_seen                   shift and go to state 261

state 254

    (96) llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS . operation_seen
    (81) operation_seen -> .

    DETERMINANT     reduce using rule 81 (operation_seen -> .)
    TRANSPOSED      reduce using rule 81 (operation_seen -> .)
    INVERSE         reduce using rule 81 (operation_seen -> .)
    MULTIPLY        reduce using rule 81 (operation_seen -> .)
    DIVIDE          reduce using rule 81 (operation_seen -> .)
    SUM             reduce using rule 81 (operation_seen -> .)
    SUBTRACT        reduce using rule 81 (operation_seen -> .)
    EQUALS          reduce using rule 81 (operation_seen -> .)
    NOT_EQUAL       reduce using rule 81 (operation_seen -> .)
    LESS_THAN       reduce using rule 81 (operation_seen -> .)
    LESS_THAN_EQUAL reduce using rule 81 (operation_seen -> .)
    GREATER_THAN    reduce using rule 81 (operation_seen -> .)
    GREATER_THAN_EQUAL reduce using rule 81 (operation_seen -> .)
    AND             reduce using rule 81 (operation_seen -> .)
    OR              reduce using rule 81 (operation_seen -> .)
    R_PARENTHESIS   reduce using rule 81 (operation_seen -> .)
    COMMA           reduce using rule 81 (operation_seen -> .)
    SEMICOLON       reduce using rule 81 (operation_seen -> .)
    R_SQUARE_BRACKET reduce using rule 81 (operation_seen -> .)
    HASTA           reduce using rule 81 (operation_seen -> .)
    HACER           reduce using rule 81 (operation_seen -> .)

    operation_seen                 shift and go to state 262

state 255

    (108) lecturapp -> COMMA lecturap .

    R_PARENTHESIS   reduce using rule 108 (lecturapp -> COMMA lecturap .)


state 256

    (116) decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp .

    ID              reduce using rule 116 (decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp .)
    REGRESA         reduce using rule 116 (decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp .)
    LECTURA         reduce using rule 116 (decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp .)
    ESCRIBE         reduce using rule 116 (decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp .)
    SI              reduce using rule 116 (decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp .)
    MIENTRAS        reduce using rule 116 (decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp .)
    DESDE           reduce using rule 116 (decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp .)
    R_CURLY_BRACKET reduce using rule 116 (decision -> SI L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque decisionp .)


state 257

    (119) decisionp -> SINO . jump_else bloque update_jump
    (121) jump_else -> .

    L_CURLY_BRACKET reduce using rule 121 (jump_else -> .)

    jump_else                      shift and go to state 263

state 258

    (120) decisionp -> empty . update_jump
    (118) update_jump -> .

    ID              reduce using rule 118 (update_jump -> .)
    REGRESA         reduce using rule 118 (update_jump -> .)
    LECTURA         reduce using rule 118 (update_jump -> .)
    ESCRIBE         reduce using rule 118 (update_jump -> .)
    SI              reduce using rule 118 (update_jump -> .)
    MIENTRAS        reduce using rule 118 (update_jump -> .)
    DESDE           reduce using rule 118 (update_jump -> .)
    R_CURLY_BRACKET reduce using rule 118 (update_jump -> .)

    update_jump                    shift and go to state 264

state 259

    (122) cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque . update_jump_cycle
    (124) update_jump_cycle -> .

    ID              reduce using rule 124 (update_jump_cycle -> .)
    REGRESA         reduce using rule 124 (update_jump_cycle -> .)
    LECTURA         reduce using rule 124 (update_jump_cycle -> .)
    ESCRIBE         reduce using rule 124 (update_jump_cycle -> .)
    SI              reduce using rule 124 (update_jump_cycle -> .)
    MIENTRAS        reduce using rule 124 (update_jump_cycle -> .)
    DESDE           reduce using rule 124 (update_jump_cycle -> .)
    R_CURLY_BRACKET reduce using rule 124 (update_jump_cycle -> .)

    update_jump_cycle              shift and go to state 265

state 260

    (125) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign . HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle

    HASTA           shift and go to state 266


state 261

    (53) dim -> L_SQUARE_BRACKET bracket_seen expresion R_SQUARE_BRACKET bracket_seen .

    L_SQUARE_BRACKET reduce using rule 53 (dim -> L_SQUARE_BRACKET bracket_seen expresion R_SQUARE_BRACKET bracket_seen .)
    ASSIGN          reduce using rule 53 (dim -> L_SQUARE_BRACKET bracket_seen expresion R_SQUARE_BRACKET bracket_seen .)
    DETERMINANT     reduce using rule 53 (dim -> L_SQUARE_BRACKET bracket_seen expresion R_SQUARE_BRACKET bracket_seen .)
    TRANSPOSED      reduce using rule 53 (dim -> L_SQUARE_BRACKET bracket_seen expresion R_SQUARE_BRACKET bracket_seen .)
    INVERSE         reduce using rule 53 (dim -> L_SQUARE_BRACKET bracket_seen expresion R_SQUARE_BRACKET bracket_seen .)
    MULTIPLY        reduce using rule 53 (dim -> L_SQUARE_BRACKET bracket_seen expresion R_SQUARE_BRACKET bracket_seen .)
    DIVIDE          reduce using rule 53 (dim -> L_SQUARE_BRACKET bracket_seen expresion R_SQUARE_BRACKET bracket_seen .)
    SUM             reduce using rule 53 (dim -> L_SQUARE_BRACKET bracket_seen expresion R_SQUARE_BRACKET bracket_seen .)
    SUBTRACT        reduce using rule 53 (dim -> L_SQUARE_BRACKET bracket_seen expresion R_SQUARE_BRACKET bracket_seen .)
    EQUALS          reduce using rule 53 (dim -> L_SQUARE_BRACKET bracket_seen expresion R_SQUARE_BRACKET bracket_seen .)
    NOT_EQUAL       reduce using rule 53 (dim -> L_SQUARE_BRACKET bracket_seen expresion R_SQUARE_BRACKET bracket_seen .)
    LESS_THAN       reduce using rule 53 (dim -> L_SQUARE_BRACKET bracket_seen expresion R_SQUARE_BRACKET bracket_seen .)
    LESS_THAN_EQUAL reduce using rule 53 (dim -> L_SQUARE_BRACKET bracket_seen expresion R_SQUARE_BRACKET bracket_seen .)
    GREATER_THAN    reduce using rule 53 (dim -> L_SQUARE_BRACKET bracket_seen expresion R_SQUARE_BRACKET bracket_seen .)
    GREATER_THAN_EQUAL reduce using rule 53 (dim -> L_SQUARE_BRACKET bracket_seen expresion R_SQUARE_BRACKET bracket_seen .)
    AND             reduce using rule 53 (dim -> L_SQUARE_BRACKET bracket_seen expresion R_SQUARE_BRACKET bracket_seen .)
    OR              reduce using rule 53 (dim -> L_SQUARE_BRACKET bracket_seen expresion R_SQUARE_BRACKET bracket_seen .)
    R_PARENTHESIS   reduce using rule 53 (dim -> L_SQUARE_BRACKET bracket_seen expresion R_SQUARE_BRACKET bracket_seen .)
    COMMA           reduce using rule 53 (dim -> L_SQUARE_BRACKET bracket_seen expresion R_SQUARE_BRACKET bracket_seen .)
    SEMICOLON       reduce using rule 53 (dim -> L_SQUARE_BRACKET bracket_seen expresion R_SQUARE_BRACKET bracket_seen .)
    R_SQUARE_BRACKET reduce using rule 53 (dim -> L_SQUARE_BRACKET bracket_seen expresion R_SQUARE_BRACKET bracket_seen .)
    HASTA           reduce using rule 53 (dim -> L_SQUARE_BRACKET bracket_seen expresion R_SQUARE_BRACKET bracket_seen .)
    HACER           reduce using rule 53 (dim -> L_SQUARE_BRACKET bracket_seen expresion R_SQUARE_BRACKET bracket_seen .)


state 262

    (96) llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .

    DETERMINANT     reduce using rule 96 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    TRANSPOSED      reduce using rule 96 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    INVERSE         reduce using rule 96 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    MULTIPLY        reduce using rule 96 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    DIVIDE          reduce using rule 96 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    SUM             reduce using rule 96 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    SUBTRACT        reduce using rule 96 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    EQUALS          reduce using rule 96 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    NOT_EQUAL       reduce using rule 96 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    LESS_THAN       reduce using rule 96 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    LESS_THAN_EQUAL reduce using rule 96 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    GREATER_THAN    reduce using rule 96 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    GREATER_THAN_EQUAL reduce using rule 96 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    AND             reduce using rule 96 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    OR              reduce using rule 96 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    R_PARENTHESIS   reduce using rule 96 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    COMMA           reduce using rule 96 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    SEMICOLON       reduce using rule 96 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    R_SQUARE_BRACKET reduce using rule 96 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    HASTA           reduce using rule 96 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)
    HACER           reduce using rule 96 (llamadaFuncion -> ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen .)


state 263

    (119) decisionp -> SINO jump_else . bloque update_jump
    (35) bloque -> . L_CURLY_BRACKET bloquep R_CURLY_BRACKET

    L_CURLY_BRACKET shift and go to state 39

    bloque                         shift and go to state 267

state 264

    (120) decisionp -> empty update_jump .

    ID              reduce using rule 120 (decisionp -> empty update_jump .)
    REGRESA         reduce using rule 120 (decisionp -> empty update_jump .)
    LECTURA         reduce using rule 120 (decisionp -> empty update_jump .)
    ESCRIBE         reduce using rule 120 (decisionp -> empty update_jump .)
    SI              reduce using rule 120 (decisionp -> empty update_jump .)
    MIENTRAS        reduce using rule 120 (decisionp -> empty update_jump .)
    DESDE           reduce using rule 120 (decisionp -> empty update_jump .)
    R_CURLY_BRACKET reduce using rule 120 (decisionp -> empty update_jump .)


state 265

    (122) cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle .

    ID              reduce using rule 122 (cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle .)
    REGRESA         reduce using rule 122 (cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle .)
    LECTURA         reduce using rule 122 (cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle .)
    ESCRIBE         reduce using rule 122 (cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle .)
    SI              reduce using rule 122 (cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle .)
    MIENTRAS        reduce using rule 122 (cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle .)
    DESDE           reduce using rule 122 (cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle .)
    R_CURLY_BRACKET reduce using rule 122 (cicloCondicional -> MIENTRAS jump_cycle L_PARENTHESIS expresion R_PARENTHESIS jump_false HAZ bloque update_jump_cycle .)


state 266

    (125) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA . expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle
    (57) expresion -> . relacional apply_operation_expresion expresionp
    (62) relacional -> . aritmetica apply_operation_relational relacionalp
    (71) aritmetica -> . factor apply_operation_aritmetica aritmeticap
    (76) factor -> . matriz apply_operation_factor factorp
    (82) matriz -> . cte matrizp
    (83) matriz -> . NOT operation_seen cte apply_not
    (90) cte -> . CTE_INT
    (91) cte -> . CTE_FLOAT
    (92) cte -> . CTE_CHAR
    (93) cte -> . llamadaFuncion
    (94) cte -> . ID operand_seen dimId
    (95) cte -> . L_PARENTHESIS operation_seen expresion R_PARENTHESIS operation_seen
    (96) llamadaFuncion -> . ID set_func_scope L_PARENTHESIS operation_seen llamadaFuncionp R_PARENTHESIS operation_seen

    NOT             shift and go to state 100
    CTE_INT         shift and go to state 101
    CTE_FLOAT       shift and go to state 102
    CTE_CHAR        shift and go to state 103
    ID              shift and go to state 105
    L_PARENTHESIS   shift and go to state 93

    expresion                      shift and go to state 268
    relacional                     shift and go to state 95
    aritmetica                     shift and go to state 96
    factor                         shift and go to state 97
    matriz                         shift and go to state 98
    cte                            shift and go to state 99
    llamadaFuncion                 shift and go to state 104

state 267

    (119) decisionp -> SINO jump_else bloque . update_jump
    (118) update_jump -> .

    ID              reduce using rule 118 (update_jump -> .)
    REGRESA         reduce using rule 118 (update_jump -> .)
    LECTURA         reduce using rule 118 (update_jump -> .)
    ESCRIBE         reduce using rule 118 (update_jump -> .)
    SI              reduce using rule 118 (update_jump -> .)
    MIENTRAS        reduce using rule 118 (update_jump -> .)
    DESDE           reduce using rule 118 (update_jump -> .)
    R_CURLY_BRACKET reduce using rule 118 (update_jump -> .)

    update_jump                    shift and go to state 269

state 268

    (125) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion . jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle
    (123) jump_cycle -> .

    HACER           reduce using rule 123 (jump_cycle -> .)

    jump_cycle                     shift and go to state 270

state 269

    (119) decisionp -> SINO jump_else bloque update_jump .

    ID              reduce using rule 119 (decisionp -> SINO jump_else bloque update_jump .)
    REGRESA         reduce using rule 119 (decisionp -> SINO jump_else bloque update_jump .)
    LECTURA         reduce using rule 119 (decisionp -> SINO jump_else bloque update_jump .)
    ESCRIBE         reduce using rule 119 (decisionp -> SINO jump_else bloque update_jump .)
    SI              reduce using rule 119 (decisionp -> SINO jump_else bloque update_jump .)
    MIENTRAS        reduce using rule 119 (decisionp -> SINO jump_else bloque update_jump .)
    DESDE           reduce using rule 119 (decisionp -> SINO jump_else bloque update_jump .)
    R_CURLY_BRACKET reduce using rule 119 (decisionp -> SINO jump_else bloque update_jump .)


state 270

    (125) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle . add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle
    (126) add_gt -> .

    HACER           reduce using rule 126 (add_gt -> .)

    add_gt                         shift and go to state 271

state 271

    (125) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt . apply_operation_relational jump_false HACER bloque add_one update_jump_cycle
    (70) apply_operation_relational -> .

    HACER           reduce using rule 70 (apply_operation_relational -> .)

    apply_operation_relational     shift and go to state 272

state 272

    (125) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational . jump_false HACER bloque add_one update_jump_cycle
    (117) jump_false -> .

    HACER           reduce using rule 117 (jump_false -> .)

    jump_false                     shift and go to state 273

state 273

    (125) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false . HACER bloque add_one update_jump_cycle

    HACER           shift and go to state 274


state 274

    (125) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER . bloque add_one update_jump_cycle
    (35) bloque -> . L_CURLY_BRACKET bloquep R_CURLY_BRACKET

    L_CURLY_BRACKET shift and go to state 39

    bloque                         shift and go to state 275

state 275

    (125) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque . add_one update_jump_cycle
    (127) add_one -> .

    ID              reduce using rule 127 (add_one -> .)
    REGRESA         reduce using rule 127 (add_one -> .)
    LECTURA         reduce using rule 127 (add_one -> .)
    ESCRIBE         reduce using rule 127 (add_one -> .)
    SI              reduce using rule 127 (add_one -> .)
    MIENTRAS        reduce using rule 127 (add_one -> .)
    DESDE           reduce using rule 127 (add_one -> .)
    R_CURLY_BRACKET reduce using rule 127 (add_one -> .)

    add_one                        shift and go to state 276

state 276

    (125) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one . update_jump_cycle
    (124) update_jump_cycle -> .

    ID              reduce using rule 124 (update_jump_cycle -> .)
    REGRESA         reduce using rule 124 (update_jump_cycle -> .)
    LECTURA         reduce using rule 124 (update_jump_cycle -> .)
    ESCRIBE         reduce using rule 124 (update_jump_cycle -> .)
    SI              reduce using rule 124 (update_jump_cycle -> .)
    MIENTRAS        reduce using rule 124 (update_jump_cycle -> .)
    DESDE           reduce using rule 124 (update_jump_cycle -> .)
    R_CURLY_BRACKET reduce using rule 124 (update_jump_cycle -> .)

    update_jump_cycle              shift and go to state 277

state 277

    (125) cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle .

    ID              reduce using rule 125 (cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle .)
    REGRESA         reduce using rule 125 (cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle .)
    LECTURA         reduce using rule 125 (cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle .)
    ESCRIBE         reduce using rule 125 (cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle .)
    SI              reduce using rule 125 (cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle .)
    MIENTRAS        reduce using rule 125 (cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle .)
    DESDE           reduce using rule 125 (cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle .)
    R_CURLY_BRACKET reduce using rule 125 (cicloNoCondicional -> DESDE ID operand_seen dimId ASSIGN operation_seen expresion apply_operation_assign HASTA expresion jump_cycle add_gt apply_operation_relational jump_false HACER bloque add_one update_jump_cycle .)

