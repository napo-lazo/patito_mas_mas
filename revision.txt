programa revision;

funcion int FibonacciRec(int n){
    si (n <= 1) haz {
        regresa(n);
    }
    regresa(FibonacciRec(n - 1) + FibonacciRec(n - 2));
}

funcion int FibonacciIt(int n)
var int: antepenultimoValor, penultimoValor, valor, i; {

    penultimoValor = 0;
    valor = 1;

    desde i = 1 hasta n hacer{
        antepenultimoValor = penultimoValor;
        penultimoValor = valor;
        valor = antepenultimoValor + penultimoValor;
    }

    regresa(valor);
}

funcion int FactorialRec(int n){
    si(n <= 1) haz{
        regresa(n);
    }
    sino{
        regresa(n + FactorialRec(n - 1));
    }
}

funcion int FactorialIt(int n)
var int: i, aux; {

    i = 1;
    aux = 0;

    mientras(i <= 5) haz{
        aux = aux + i;
        i = i + 1;
    }
    regresa(aux);
}

funcion void Sort()
var int: A[5], size, i, j, k, min, temp;
{
	A[0] = 5; A[1] = 4; A[2] = 1; A[3] = 2; A[4] = 3;
	size = 5; i = 0;
    desde k = 0 hasta size hacer{
        escribe(A[k], " ");
    }
	mientras (i < (size -1)) haz {
		min = i;
        j = i + 1;
        mientras (j < size) haz {
            si (A[j] < A[min]) entonces {
                min = j;
            }
            j = j + 1;
        }
        temp = A[i];
        A[i] = A[min];
        A[min] = temp;
        i = i + 1;
	}
     desde k = 0 hasta size hacer{
        escribe(A[k], " ");
    }
}

principal(){
    escribe(FibonacciRec(9));
    escribe(FibonacciIt(9));
    escribe(FactorialRec(5));
    escribe(FactorialIt(5));
}
